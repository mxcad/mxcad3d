// Generated by dts-bundle-generator v6.13.0

export declare class MxCanvas2Image {
	private $support;
	private downloadMime;
	private mydocument;
	constructor(in_document?: any);
	private scaleCanvas;
	private getDataURL;
	private saveFile;
	private genImage;
	private fixType;
	private encodeData;
	private getImageData;
	private makeURI;
	private genBitmapImage;
	/**
	 * saveAsImage
	 * @param canvasElement
	 * @param {String} image type
	 * @param {Number} [optional] png width
	 * @param {Number} [optional] png height
	 */
	saveAsImage(canvas: any, width: any, height: any, type: any): void;
	convertToImage(canvas: any, width: any, height: any, type: any): HTMLImageElement | undefined;
}
export type FileTypes = {
	description?: string;
	accept: {
		[type: string]: string[];
	};
}[];
/**
 *  文件下载保存（另存为只支持 Chrome86 或 Edge 86 以及 Opera 72）兼容 iE10等较低版本的浏览器
 */
export declare function saveAsFileDialog({ blob, filename, types }: {
	blob: Blob;
	filename?: string;
	types?: FileTypes;
}): Promise<false | (FileSystemFileHandle & {
	createWritable: () => Promise<WritableStreamDefaultWriter>;
}) | undefined>;
export declare namespace MdGe {
	enum MxShapeEnum {
		Enum_COMPOUND = 0,
		Enum_COMPSOLID = 1,
		Enum_SOLID = 2,
		Enum_SHELL = 3,
		Enum_FACE = 4,
		Enum_WIRE = 5,
		Enum_EDGE = 6,
		Enum_VERTEX = 7,
		Enum_SHAPE = 8
	}
	enum MxHorizontalTextAlignment {
		HTA_LEFT = 0,
		HTA_CENTER = 1,
		HTA_RIGHT = 2
	}
	enum MxVerticalTextAlignment {
		CVTA_BOTTOM = 0,
		CVTA_CENTER = 1,
		CVTA_TOP = 2,
		CVTA_TOPFIRSTLINE = 3
	}
	enum MxFontAspect {
		FA_UNDEFINED = -1,
		FA_Regular = 0,
		FA_Bold = 1,
		FA_Italic = 2,
		FA_BoldItalic = 3
	}
	enum MxTypeOfDisplayText {
		TODT_NORMAL = 0,
		TODT_SUBTITLE = 1,
		TODT_DEKALE = 2,
		TODT_BLEND = 3,
		TODT_DIMENSION = 4,
		TODT_SHADOW = 5
	}
	enum MxCF3dFilletShapeEnum {
		Enum_Rational = 0,
		Enum_QuasiAngular = 1,
		Enum_Polynomial = 2
	}
	enum MxCFDSChamfMode {
		Enum_ClassicChamfer = 0,
		Enum_ConstThroatChamfer = 1,
		Enum_ConstThroatWithPenetrationChamfer = 2
	}
	enum MxGFTrihedron {
		GF_IsCorrectedFrenet = 0,
		GF_IsFixed = 1,
		GF_IsFrenet = 2,
		GF_IsConstantNormal = 3,
		GF_IsDarboux = 4,
		GF_IsGuideAC = 5,
		GF_IsGuidePlan = 6,
		GF_IsGuideACWithContact = 7,
		GF_IsGuidePlanWithContact = 8,
		GF_IsDiscreteTrihedron = 9
	}
	enum MxGAShapeEnum {
		GA_C0 = 0,
		GA_G1 = 1,
		GA_C1 = 2,
		GA_G2 = 3,
		GA_C2 = 4,
		GA_C3 = 5,
		GA_CN = 6
	}
	enum MxOffsetModeEnum {
		Offset_Skin = 0,
		Offset_Pipe = 1,
		Offset_RectoVerso = 2
	}
	enum MxGAJoinTypeEnum {
		GA_Arc = 0,
		GA_Tangent = 1,
		GA_Intersection = 2
	}
	enum MxNameOfMaterial {
		Material_NOM_Brass = 0,
		Material_NOM_Bronze = 1,
		Material_NOM_Copper = 2,
		Material_NOM_Gold = 3,
		Material_NOM_Pewter = 4,
		Material_NOM_Plastered = 5,
		Material_NOM_Plastified = 6,
		Material_NOM_Silver = 7,
		Material_NOM_Steel = 8,
		Material_NOM_Stone = 9,
		Material_NOM_ShinyPlastified = 10,
		Material_NOM_Satin = 11,
		Material_NOM_Metalized = 12,
		Material_NOM_Ionized = 13,
		Material_NOM_Chrome = 14,
		Material_NOM_Aluminum = 15,
		Material_NOM_Obsidian = 16,
		Material_NOM_Neon = 17,
		Material_NOM_Jade = 18,
		Material_NOM_Charcoal = 19,
		Material_NOM_Water = 20,
		Material_NOM_Glass = 21,
		Material_NOM_Diamond = 22,
		Material_NOM_Transparent = 23,
		Material_NOM_DEFAULT = 24,
		Material_NOM_UserDefined = 25
	}
	enum MxTypeOfMaterial {
		Material_TOM_ASPECT = 0,
		Material_TOM_PHYSIC = 1
	}
	enum MxTypeOfReflection {
		Reflection_TOR_AMBIENT = 0,
		Reflection_TOR_DIFFUSE = 1,
		Reflection_TOR_SPECULAR = 2,
		Reflection_TOR_EMISSION = 3
	}
	enum MxNameOfColor {
		Color_NOC_BLACK = 0,
		Color_NOC_MATRABLUE = 1,
		Color_NOC_MATRAGRAY = 2,
		Color_NOC_ALICEBLUE = 3,
		Color_NOC_ANTIQUEWHITE = 4,
		Color_NOC_ANTIQUEWHITE1 = 5,
		Color_NOC_ANTIQUEWHITE2 = 6,
		Color_NOC_ANTIQUEWHITE3 = 7,
		Color_NOC_ANTIQUEWHITE4 = 8,
		Color_NOC_AQUAMARINE1 = 9,
		Color_NOC_AQUAMARINE2 = 10,
		Color_NOC_AQUAMARINE4 = 11,
		Color_NOC_AZURE = 12,
		Color_NOC_AZURE2 = 13,
		Color_NOC_AZURE3 = 14,
		Color_NOC_AZURE4 = 15,
		Color_NOC_BEIGE = 16,
		Color_NOC_BISQUE = 17,
		Color_NOC_BISQUE2 = 18,
		Color_NOC_BISQUE3 = 19,
		Color_NOC_BISQUE4 = 20,
		Color_NOC_BLANCHEDALMOND = 21,
		Color_NOC_BLUE = 22,
		Color_NOC_BLUE1 = 22,
		Color_NOC_BLUE2 = 23,
		Color_NOC_BLUE3 = 24,
		Color_NOC_BLUE4 = 25,
		Color_NOC_BLUEVIOLET = 26,
		Color_NOC_BROWN = 27,
		Color_NOC_BROWN1 = 28,
		Color_NOC_BROWN2 = 29,
		Color_NOC_BROWN3 = 30,
		Color_NOC_BROWN4 = 31,
		Color_NOC_BURLYWOOD = 32,
		Color_NOC_BURLYWOOD1 = 33,
		Color_NOC_BURLYWOOD2 = 34,
		Color_NOC_BURLYWOOD3 = 35,
		Color_NOC_BURLYWOOD4 = 36,
		Color_NOC_CADETBLUE = 37,
		Color_NOC_CADETBLUE1 = 38,
		Color_NOC_CADETBLUE2 = 39,
		Color_NOC_CADETBLUE3 = 40,
		Color_NOC_CADETBLUE4 = 41,
		Color_NOC_CHARTREUSE = 42,
		Color_NOC_CHARTREUSE1 = 42,
		Color_NOC_CHARTREUSE2 = 43,
		Color_NOC_CHARTREUSE3 = 44,
		Color_NOC_CHARTREUSE4 = 45,
		Color_NOC_CHOCOLATE = 46,
		Color_NOC_CHOCOLATE1 = 47,
		Color_NOC_CHOCOLATE2 = 48,
		Color_NOC_CHOCOLATE3 = 49,
		Color_NOC_CHOCOLATE4 = 50,
		Color_NOC_CORAL = 51,
		Color_NOC_CORAL1 = 52,
		Color_NOC_CORAL2 = 53,
		Color_NOC_CORAL3 = 54,
		Color_NOC_CORAL4 = 55,
		Color_NOC_CORNFLOWERBLUE = 56,
		Color_NOC_CORNSILK1 = 57,
		Color_NOC_CORNSILK2 = 58,
		Color_NOC_CORNSILK3 = 59,
		Color_NOC_CORNSILK4 = 60,
		Color_NOC_CYAN = 61,
		Color_NOC_CYAN1 = 61,
		Color_NOC_CYAN2 = 62,
		Color_NOC_CYAN3 = 63,
		Color_NOC_CYAN4 = 64,
		Color_NOC_DARKGOLDENROD = 65,
		Color_NOC_DARKGOLDENROD1 = 66,
		Color_NOC_DARKGOLDENROD2 = 67,
		Color_NOC_DARKGOLDENROD3 = 68,
		Color_NOC_DARKGOLDENROD4 = 69,
		Color_NOC_DARKGREEN = 70,
		Color_NOC_DARKKHAKI = 71,
		Color_NOC_DARKOLIVEGREEN = 72,
		Color_NOC_DARKOLIVEGREEN1 = 73,
		Color_NOC_DARKOLIVEGREEN2 = 74,
		Color_NOC_DARKOLIVEGREEN3 = 75,
		Color_NOC_DARKOLIVEGREEN4 = 76,
		Color_NOC_DARKORANGE = 77,
		Color_NOC_DARKORANGE1 = 78,
		Color_NOC_DARKORANGE2 = 79,
		Color_NOC_DARKORANGE3 = 80,
		Color_NOC_DARKORANGE4 = 81,
		Color_NOC_DARKORCHID = 82,
		Color_NOC_DARKORCHID1 = 83,
		Color_NOC_DARKORCHID2 = 84,
		Color_NOC_DARKORCHID3 = 85,
		Color_NOC_DARKORCHID4 = 86,
		Color_NOC_DARKSALMON = 87,
		Color_NOC_DARKSEAGREEN = 88,
		Color_NOC_DARKSEAGREEN1 = 89,
		Color_NOC_DARKSEAGREEN2 = 90,
		Color_NOC_DARKSEAGREEN3 = 91,
		Color_NOC_DARKSEAGREEN4 = 92,
		Color_NOC_DARKSLATEBLUE = 93,
		Color_NOC_DARKSLATEGRAY1 = 94,
		Color_NOC_DARKSLATEGRAY2 = 95,
		Color_NOC_DARKSLATEGRAY3 = 96,
		Color_NOC_DARKSLATEGRAY4 = 97,
		Color_NOC_DARKSLATEGRAY = 98,
		Color_NOC_DARKTURQUOISE = 99,
		Color_NOC_DARKVIOLET = 100,
		Color_NOC_DEEPPINK = 101,
		Color_NOC_DEEPPINK2 = 102,
		Color_NOC_DEEPPINK3 = 103,
		Color_NOC_DEEPPINK4 = 104,
		Color_NOC_DEEPSKYBLUE1 = 105,
		Color_NOC_DEEPSKYBLUE2 = 106,
		Color_NOC_DEEPSKYBLUE3 = 107,
		Color_NOC_DEEPSKYBLUE4 = 108,
		Color_NOC_DODGERBLUE1 = 109,
		Color_NOC_DODGERBLUE2 = 110,
		Color_NOC_DODGERBLUE3 = 111,
		Color_NOC_DODGERBLUE4 = 112,
		Color_NOC_FIREBRICK = 113,
		Color_NOC_FIREBRICK1 = 114,
		Color_NOC_FIREBRICK2 = 115,
		Color_NOC_FIREBRICK3 = 116,
		Color_NOC_FIREBRICK4 = 117,
		Color_NOC_FLORALWHITE = 118,
		Color_NOC_FORESTGREEN = 119,
		Color_NOC_GAINSBORO = 120,
		Color_NOC_GHOSTWHITE = 121,
		Color_NOC_GOLD = 122,
		Color_NOC_GOLD1 = 122,
		Color_NOC_GOLD2 = 123,
		Color_NOC_GOLD3 = 124,
		Color_NOC_GOLD4 = 125,
		Color_NOC_GOLDENROD = 126,
		Color_NOC_GOLDENROD1 = 127,
		Color_NOC_GOLDENROD2 = 128,
		Color_NOC_GOLDENROD3 = 129,
		Color_NOC_GOLDENROD4 = 130,
		Color_NOC_GRAY = 131,
		Color_NOC_GRAY0 = 132,
		Color_NOC_GRAY1 = 133,
		Color_NOC_GRAY2 = 134,
		Color_NOC_GRAY3 = 135,
		Color_NOC_GRAY4 = 136,
		Color_NOC_GRAY5 = 137,
		Color_NOC_GRAY6 = 138,
		Color_NOC_GRAY7 = 139,
		Color_NOC_GRAY8 = 140,
		Color_NOC_GRAY9 = 141,
		Color_NOC_GRAY10 = 142,
		Color_NOC_GRAY11 = 143,
		Color_NOC_GRAY12 = 144,
		Color_NOC_GRAY13 = 145,
		Color_NOC_GRAY14 = 146,
		Color_NOC_GRAY15 = 147,
		Color_NOC_GRAY16 = 148,
		Color_NOC_GRAY17 = 149,
		Color_NOC_GRAY18 = 150,
		Color_NOC_GRAY19 = 151,
		Color_NOC_GRAY20 = 152,
		Color_NOC_GRAY21 = 153,
		Color_NOC_GRAY22 = 154,
		Color_NOC_GRAY23 = 155,
		Color_NOC_GRAY24 = 156,
		Color_NOC_GRAY25 = 157,
		Color_NOC_GRAY26 = 158,
		Color_NOC_GRAY27 = 159,
		Color_NOC_GRAY28 = 160,
		Color_NOC_GRAY29 = 161,
		Color_NOC_GRAY30 = 162,
		Color_NOC_GRAY31 = 163,
		Color_NOC_GRAY32 = 164,
		Color_NOC_GRAY33 = 165,
		Color_NOC_GRAY34 = 166,
		Color_NOC_GRAY35 = 167,
		Color_NOC_GRAY36 = 168,
		Color_NOC_GRAY37 = 169,
		Color_NOC_GRAY38 = 170,
		Color_NOC_GRAY39 = 171,
		Color_NOC_GRAY40 = 172,
		Color_NOC_GRAY41 = 173,
		Color_NOC_GRAY42 = 174,
		Color_NOC_GRAY43 = 175,
		Color_NOC_GRAY44 = 176,
		Color_NOC_GRAY45 = 177,
		Color_NOC_GRAY46 = 178,
		Color_NOC_GRAY47 = 179,
		Color_NOC_GRAY48 = 180,
		Color_NOC_GRAY49 = 181,
		Color_NOC_GRAY50 = 182,
		Color_NOC_GRAY51 = 183,
		Color_NOC_GRAY52 = 184,
		Color_NOC_GRAY53 = 185,
		Color_NOC_GRAY54 = 186,
		Color_NOC_GRAY55 = 187,
		Color_NOC_GRAY56 = 188,
		Color_NOC_GRAY57 = 189,
		Color_NOC_GRAY58 = 190,
		Color_NOC_GRAY59 = 191,
		Color_NOC_GRAY60 = 192,
		Color_NOC_GRAY61 = 193,
		Color_NOC_GRAY62 = 194,
		Color_NOC_GRAY63 = 195,
		Color_NOC_GRAY64 = 196,
		Color_NOC_GRAY65 = 197,
		Color_NOC_GRAY66 = 198,
		Color_NOC_GRAY67 = 199,
		Color_NOC_GRAY68 = 200,
		Color_NOC_GRAY69 = 201,
		Color_NOC_GRAY70 = 202,
		Color_NOC_GRAY71 = 203,
		Color_NOC_GRAY72 = 204,
		Color_NOC_GRAY73 = 205,
		Color_NOC_GRAY74 = 206,
		Color_NOC_GRAY75 = 207,
		Color_NOC_GRAY76 = 208,
		Color_NOC_GRAY77 = 209,
		Color_NOC_GRAY78 = 210,
		Color_NOC_GRAY79 = 211,
		Color_NOC_GRAY80 = 212,
		Color_NOC_GRAY81 = 213,
		Color_NOC_GRAY82 = 214,
		Color_NOC_GRAY83 = 215,
		Color_NOC_GRAY85 = 216,
		Color_NOC_GRAY86 = 217,
		Color_NOC_GRAY87 = 218,
		Color_NOC_GRAY88 = 219,
		Color_NOC_GRAY89 = 220,
		Color_NOC_GRAY90 = 221,
		Color_NOC_GRAY91 = 222,
		Color_NOC_GRAY92 = 223,
		Color_NOC_GRAY93 = 224,
		Color_NOC_GRAY94 = 225,
		Color_NOC_GRAY95 = 226,
		Color_NOC_GRAY97 = 227,
		Color_NOC_GRAY98 = 228,
		Color_NOC_GRAY99 = 229,
		Color_NOC_GREEN = 230,
		Color_NOC_GREEN1 = 230,
		Color_NOC_GREEN2 = 231,
		Color_NOC_GREEN3 = 232,
		Color_NOC_GREEN4 = 233,
		Color_NOC_GREENYELLOW = 234,
		Color_NOC_HONEYDEW = 235,
		Color_NOC_HONEYDEW2 = 236,
		Color_NOC_HONEYDEW3 = 237,
		Color_NOC_HONEYDEW4 = 238,
		Color_NOC_HOTPINK = 239,
		Color_NOC_HOTPINK1 = 240,
		Color_NOC_HOTPINK2 = 241,
		Color_NOC_HOTPINK3 = 242,
		Color_NOC_HOTPINK4 = 243,
		Color_NOC_INDIANRED = 244,
		Color_NOC_INDIANRED1 = 245,
		Color_NOC_INDIANRED2 = 246,
		Color_NOC_INDIANRED3 = 247,
		Color_NOC_INDIANRED4 = 248,
		Color_NOC_IVORY = 249,
		Color_NOC_IVORY2 = 250,
		Color_NOC_IVORY3 = 251,
		Color_NOC_IVORY4 = 252,
		Color_NOC_KHAKI = 253,
		Color_NOC_KHAKI1 = 254,
		Color_NOC_KHAKI2 = 255,
		Color_NOC_KHAKI3 = 256,
		Color_NOC_KHAKI4 = 257,
		Color_NOC_LAVENDER = 258,
		Color_NOC_LAVENDERBLUSH1 = 259,
		Color_NOC_LAVENDERBLUSH2 = 260,
		Color_NOC_LAVENDERBLUSH3 = 261,
		Color_NOC_LAVENDERBLUSH4 = 262,
		Color_NOC_LAWNGREEN = 263,
		Color_NOC_LEMONCHIFFON1 = 264,
		Color_NOC_LEMONCHIFFON2 = 265,
		Color_NOC_LEMONCHIFFON3 = 266,
		Color_NOC_LEMONCHIFFON4 = 267,
		Color_NOC_LIGHTBLUE = 268,
		Color_NOC_LIGHTBLUE1 = 269,
		Color_NOC_LIGHTBLUE2 = 270,
		Color_NOC_LIGHTBLUE3 = 271,
		Color_NOC_LIGHTBLUE4 = 272,
		Color_NOC_LIGHTCORAL = 273,
		Color_NOC_LIGHTCYAN = 274,
		Color_NOC_LIGHTCYAN1 = 274,
		Color_NOC_LIGHTCYAN2 = 275,
		Color_NOC_LIGHTCYAN3 = 276,
		Color_NOC_LIGHTCYAN4 = 277,
		Color_NOC_LIGHTGOLDENROD = 278,
		Color_NOC_LIGHTGOLDENROD1 = 279,
		Color_NOC_LIGHTGOLDENROD2 = 280,
		Color_NOC_LIGHTGOLDENROD3 = 281,
		Color_NOC_LIGHTGOLDENROD4 = 282,
		Color_NOC_LIGHTGOLDENRODYELLOW = 283,
		Color_NOC_LIGHTGRAY = 284,
		Color_NOC_LIGHTPINK = 285,
		Color_NOC_LIGHTPINK1 = 286,
		Color_NOC_LIGHTPINK2 = 287,
		Color_NOC_LIGHTPINK3 = 288,
		Color_NOC_LIGHTPINK4 = 289,
		Color_NOC_LIGHTSALMON1 = 290,
		Color_NOC_LIGHTSALMON2 = 291,
		Color_NOC_LIGHTSALMON3 = 292,
		Color_NOC_LIGHTSALMON4 = 293,
		Color_NOC_LIGHTSEAGREEN = 294,
		Color_NOC_LIGHTSKYBLUE = 295,
		Color_NOC_LIGHTSKYBLUE1 = 296,
		Color_NOC_LIGHTSKYBLUE2 = 297,
		Color_NOC_LIGHTSKYBLUE3 = 298,
		Color_NOC_LIGHTSKYBLUE4 = 299,
		Color_NOC_LIGHTSLATEBLUE = 300,
		Color_NOC_LIGHTSLATEGRAY = 301,
		Color_NOC_LIGHTSTEELBLUE = 302,
		Color_NOC_LIGHTSTEELBLUE1 = 303,
		Color_NOC_LIGHTSTEELBLUE2 = 304,
		Color_NOC_LIGHTSTEELBLUE3 = 305,
		Color_NOC_LIGHTSTEELBLUE4 = 306,
		Color_NOC_LIGHTYELLOW = 307,
		Color_NOC_LIGHTYELLOW2 = 308,
		Color_NOC_LIGHTYELLOW3 = 309,
		Color_NOC_LIGHTYELLOW4 = 310,
		Color_NOC_LIMEGREEN = 311,
		Color_NOC_LINEN = 312,
		Color_NOC_MAGENTA = 313,
		Color_NOC_MAGENTA1 = 313,
		Color_NOC_MAGENTA2 = 314,
		Color_NOC_MAGENTA3 = 315,
		Color_NOC_MAGENTA4 = 316,
		Color_NOC_MAROON = 317,
		Color_NOC_MAROON1 = 318,
		Color_NOC_MAROON2 = 319,
		Color_NOC_MAROON3 = 320,
		Color_NOC_MAROON4 = 321,
		Color_NOC_MEDIUMAQUAMARINE = 322,
		Color_NOC_MEDIUMORCHID = 323,
		Color_NOC_MEDIUMORCHID1 = 324,
		Color_NOC_MEDIUMORCHID2 = 325,
		Color_NOC_MEDIUMORCHID3 = 326,
		Color_NOC_MEDIUMORCHID4 = 327,
		Color_NOC_MEDIUMPURPLE = 328,
		Color_NOC_MEDIUMPURPLE1 = 329,
		Color_NOC_MEDIUMPURPLE2 = 330,
		Color_NOC_MEDIUMPURPLE3 = 331,
		Color_NOC_MEDIUMPURPLE4 = 332,
		Color_NOC_MEDIUMSEAGREEN = 333,
		Color_NOC_MEDIUMSLATEBLUE = 334,
		Color_NOC_MEDIUMSPRINGGREEN = 335,
		Color_NOC_MEDIUMTURQUOISE = 336,
		Color_NOC_MEDIUMVIOLETRED = 337,
		Color_NOC_MIDNIGHTBLUE = 338,
		Color_NOC_MINTCREAM = 339,
		Color_NOC_MISTYROSE = 340,
		Color_NOC_MISTYROSE2 = 341,
		Color_NOC_MISTYROSE3 = 342,
		Color_NOC_MISTYROSE4 = 343,
		Color_NOC_MOCCASIN = 344,
		Color_NOC_NAVAJOWHITE1 = 345,
		Color_NOC_NAVAJOWHITE2 = 346,
		Color_NOC_NAVAJOWHITE3 = 347,
		Color_NOC_NAVAJOWHITE4 = 348,
		Color_NOC_NAVYBLUE = 349,
		Color_NOC_OLDLACE = 350,
		Color_NOC_OLIVEDRAB = 351,
		Color_NOC_OLIVEDRAB1 = 352,
		Color_NOC_OLIVEDRAB2 = 353,
		Color_NOC_OLIVEDRAB3 = 354,
		Color_NOC_OLIVEDRAB4 = 355,
		Color_NOC_ORANGE = 356,
		Color_NOC_ORANGE1 = 356,
		Color_NOC_ORANGE2 = 357,
		Color_NOC_ORANGE3 = 358,
		Color_NOC_ORANGE4 = 359,
		Color_NOC_ORANGERED = 360,
		Color_NOC_ORANGERED1 = 360,
		Color_NOC_ORANGERED2 = 361,
		Color_NOC_ORANGERED3 = 362,
		Color_NOC_ORANGERED4 = 363,
		Color_NOC_ORCHID = 364,
		Color_NOC_ORCHID1 = 365,
		Color_NOC_ORCHID2 = 366,
		Color_NOC_ORCHID3 = 367,
		Color_NOC_ORCHID4 = 368,
		Color_NOC_PALEGOLDENROD = 369,
		Color_NOC_PALEGREEN = 370,
		Color_NOC_PALEGREEN1 = 371,
		Color_NOC_PALEGREEN2 = 372,
		Color_NOC_PALEGREEN3 = 373,
		Color_NOC_PALEGREEN4 = 374,
		Color_NOC_PALETURQUOISE = 375,
		Color_NOC_PALETURQUOISE1 = 376,
		Color_NOC_PALETURQUOISE2 = 377,
		Color_NOC_PALETURQUOISE3 = 378,
		Color_NOC_PALETURQUOISE4 = 379,
		Color_NOC_PALEVIOLETRED = 380,
		Color_NOC_PALEVIOLETRED1 = 381,
		Color_NOC_PALEVIOLETRED2 = 382,
		Color_NOC_PALEVIOLETRED3 = 383,
		Color_NOC_PALEVIOLETRED4 = 384,
		Color_NOC_PAPAYAWHIP = 385,
		Color_NOC_PEACHPUFF = 386,
		Color_NOC_PEACHPUFF2 = 387,
		Color_NOC_PEACHPUFF3 = 388,
		Color_NOC_PEACHPUFF4 = 389,
		Color_NOC_PERU = 390,
		Color_NOC_PINK = 391,
		Color_NOC_PINK1 = 392,
		Color_NOC_PINK2 = 393,
		Color_NOC_PINK3 = 394,
		Color_NOC_PINK4 = 395,
		Color_NOC_PLUM = 396,
		Color_NOC_PLUM1 = 397,
		Color_NOC_PLUM2 = 398,
		Color_NOC_PLUM3 = 399,
		Color_NOC_PLUM4 = 400,
		Color_NOC_POWDERBLUE = 401,
		Color_NOC_PURPLE = 402,
		Color_NOC_PURPLE1 = 403,
		Color_NOC_PURPLE2 = 404,
		Color_NOC_PURPLE3 = 405,
		Color_NOC_PURPLE4 = 406,
		Color_NOC_RED = 407,
		Color_NOC_RED1 = 407,
		Color_NOC_RED2 = 408,
		Color_NOC_RED3 = 409,
		Color_NOC_RED4 = 410,
		Color_NOC_ROSYBROWN = 411,
		Color_NOC_ROSYBROWN1 = 412,
		Color_NOC_ROSYBROWN2 = 413,
		Color_NOC_ROSYBROWN3 = 414,
		Color_NOC_ROSYBROWN4 = 415,
		Color_NOC_ROYALBLUE = 416,
		Color_NOC_ROYALBLUE1 = 417,
		Color_NOC_ROYALBLUE2 = 418,
		Color_NOC_ROYALBLUE3 = 419,
		Color_NOC_ROYALBLUE4 = 420,
		Color_NOC_SADDLEBROWN = 421,
		Color_NOC_SALMON = 422,
		Color_NOC_SALMON1 = 423,
		Color_NOC_SALMON2 = 424,
		Color_NOC_SALMON3 = 425,
		Color_NOC_SALMON4 = 426,
		Color_NOC_SANDYBROWN = 427,
		Color_NOC_SEAGREEN = 428,
		Color_NOC_SEAGREEN1 = 429,
		Color_NOC_SEAGREEN2 = 430,
		Color_NOC_SEAGREEN3 = 431,
		Color_NOC_SEAGREEN4 = 432,
		Color_NOC_SEASHELL = 433,
		Color_NOC_SEASHELL2 = 434,
		Color_NOC_SEASHELL3 = 435,
		Color_NOC_SEASHELL4 = 436,
		Color_NOC_BEET = 437,
		Color_NOC_TEAL = 438,
		Color_NOC_SIENNA = 439,
		Color_NOC_SIENNA1 = 440,
		Color_NOC_SIENNA2 = 441,
		Color_NOC_SIENNA3 = 442,
		Color_NOC_SIENNA4 = 443,
		Color_NOC_SKYBLUE = 444,
		Color_NOC_SKYBLUE1 = 445,
		Color_NOC_SKYBLUE2 = 446,
		Color_NOC_SKYBLUE3 = 447,
		Color_NOC_SKYBLUE4 = 448,
		Color_NOC_SLATEBLUE = 449,
		Color_NOC_SLATEBLUE1 = 450,
		Color_NOC_SLATEBLUE2 = 451,
		Color_NOC_SLATEBLUE3 = 452,
		Color_NOC_SLATEBLUE4 = 453,
		Color_NOC_SLATEGRAY1 = 454,
		Color_NOC_SLATEGRAY2 = 455,
		Color_NOC_SLATEGRAY3 = 456,
		Color_NOC_SLATEGRAY4 = 457,
		Color_NOC_SLATEGRAY = 458,
		Color_NOC_SNOW = 459,
		Color_NOC_SNOW2 = 460,
		Color_NOC_SNOW3 = 461,
		Color_NOC_SNOW4 = 462,
		Color_NOC_SPRINGGREEN = 463,
		Color_NOC_SPRINGGREEN2 = 464,
		Color_NOC_SPRINGGREEN3 = 465,
		Color_NOC_SPRINGGREEN4 = 466,
		Color_NOC_STEELBLUE = 467,
		Color_NOC_STEELBLUE1 = 468,
		Color_NOC_STEELBLUE2 = 469,
		Color_NOC_STEELBLUE3 = 470,
		Color_NOC_STEELBLUE4 = 471,
		Color_NOC_TAN = 472,
		Color_NOC_TAN1 = 473,
		Color_NOC_TAN2 = 474,
		Color_NOC_TAN3 = 475,
		Color_NOC_TAN4 = 476,
		Color_NOC_THISTLE = 477,
		Color_NOC_THISTLE1 = 478,
		Color_NOC_THISTLE2 = 479,
		Color_NOC_THISTLE3 = 480,
		Color_NOC_THISTLE4 = 481,
		Color_NOC_TOMATO = 482,
		Color_NOC_TOMATO1 = 482,
		Color_NOC_TOMATO2 = 483,
		Color_NOC_TOMATO3 = 484,
		Color_NOC_TOMATO4 = 485,
		Color_NOC_TURQUOISE = 486,
		Color_NOC_TURQUOISE1 = 487,
		Color_NOC_TURQUOISE2 = 488,
		Color_NOC_TURQUOISE3 = 489,
		Color_NOC_TURQUOISE4 = 490,
		Color_NOC_VIOLET = 491,
		Color_NOC_VIOLETRED = 492,
		Color_NOC_VIOLETRED1 = 493,
		Color_NOC_VIOLETRED2 = 494,
		Color_NOC_VIOLETRED3 = 495,
		Color_NOC_VIOLETRED4 = 496,
		Color_NOC_WHEAT = 497,
		Color_NOC_WHEAT1 = 498,
		Color_NOC_WHEAT2 = 499,
		Color_NOC_WHEAT3 = 500,
		Color_NOC_WHEAT4 = 501,
		Color_NOC_WHITESMOKE = 502,
		Color_NOC_YELLOW = 503,
		Color_NOC_YELLOW1 = 503,
		Color_NOC_YELLOW2 = 504,
		Color_NOC_YELLOW3 = 505,
		Color_NOC_YELLOW4 = 506,
		Color_NOC_YELLOWGREEN = 507,
		Color_NOC_WHITE = 508
	}
	enum MxTypeOfColor {
		Color_TOC_RGB = 0,
		Color_TOC_sRGB = 1,
		Color_TOC_HLS = 2,
		Color_TOC_CIELab = 3,
		Color_TOC_CIELch = 4
	}
	enum MxDisplayMode {
		DM_WireFrame = 0,
		DM_Shaded = 1
	}
	enum MxTypeOfLightSource {
		LightSource_TOLS_AMBIENT = 0,
		LightSource_TOLS_DIRECTIONAL = 1,
		LightSource_TOLS_POSITIONAL = 2,
		LightSource_TOLS_SPOT = 3
	}
	enum MxCameraProjection {
		CProjection_Orthographic = 0,//正交投影
		CProjection_Perspective = 1,//透视投影
		CProjection_Stereo = 2,// 立体投影
		CProjection_MonoLeftEye = 3,
		CProjection_MonoRightEye = 4
	}
	enum MxV3dTypeOfOrientation {
		Orientation_Xpos = 0,//!< (+Y+Z) view
		Orientation_Ypos = 1,//!< (-X+Z) view
		Orientation_Zpos = 2,//!< (+X+Y) view
		Orientation_Xneg = 3,//!< (-Y+Z) view
		Orientation_Yneg = 4,//!< (+X+Z) view
		Orientation_Zneg = 5,//!< (+X-Y) view
		Orientation_XposYpos = 6,
		Orientation_XposZpos = 7,
		Orientation_YposZpos = 8,
		Orientation_XnegYneg = 9,
		Orientation_XnegYpos = 10,
		Orientation_XnegZneg = 11,
		Orientation_XnegZpos = 12,
		Orientation_YnegZneg = 13,
		Orientation_YnegZpos = 14,
		Orientation_XposYneg = 15,
		Orientation_XposZneg = 16,
		Orientation_YposZneg = 17,
		Orientation_XposYposZpos = 18,
		Orientation_XposYnegZpos = 19,
		Orientation_XposYposZneg = 20,
		Orientation_XnegYposZpos = 21,
		Orientation_XposYnegZneg = 22,
		Orientation_XnegYposZneg = 23,
		Orientation_XnegYnegZpos = 24,
		Orientation_XnegYnegZneg = 25,
		Orientation_TypeOfOrientation_Zup_AxoLeft = 24,//!< +Z-up +Y-forward Left +Front+Top
		Orientation_TypeOfOrientation_Zup_AxoRight = 19,//!< +Z-up +Y-forward Right+Front+Top
		Orientation_TypeOfOrientation_Zup_Front = 4,//!< +Z-up +Y-forward Front  (+X+Z) view
		Orientation_TypeOfOrientation_Zup_Back = 1,//!< +Z-up +Y-forward Back   (-X+Z) view
		Orientation_TypeOfOrientation_Zup_Top = 2,//!< +Z-up +Y-forward Top    (+X+Y) view
		Orientation_TypeOfOrientation_Zup_Bottom = 5,//!< +Z-up +Y-forward Bottom (+X-Y) view
		Orientation_TypeOfOrientation_Zup_Left = 3,//!< +Z-up +Y-forward Left   (-Y+Z) view
		Orientation_TypeOfOrientation_Zup_Right = 0,//!< +Z-up +Y-forward Right  (+Y+Z) view
		Orientation_TypeOfOrientation_Yup_AxoLeft = 21,//!< +Y-up -Z-forward Left +Front+Top
		Orientation_TypeOfOrientation_Yup_AxoRight = 18,//!< +Y-up -Z-forward Right+Front+Top
		Orientation_TypeOfOrientation_Yup_Front = 2,//!< +Y-up -Z-forward Front  (+X+Y) view
		Orientation_TypeOfOrientation_Yup_Back = 5,//!< +Y-up -Z-forward Back   (-X+Y) view
		Orientation_TypeOfOrientation_Yup_Top = 1,//!< +Y-up -Z-forward Top    (+X-Z) view
		Orientation_TypeOfOrientation_Yup_Bottom = 4,//!< +Y-up -Z-forward Bottom (-X-Z) view
		Orientation_TypeOfOrientation_Yup_Left = 0,//!< +Y-up -Z-forward Left   (-Z+Y) view
		Orientation_TypeOfOrientation_Yup_Right = 3
	}
	enum MxTypeOfAngle {
		Angle_TypeOfAngle_Interior = 0,
		Angle_TypeOfAngle_Exterior = 1
	}
	enum MxTypeOfAngleArrowVisibility {
		Visibility_TOAAV_Both = 0,
		Visibility_TOAAV_First = 1,
		Visibility_TOAAV_Second = 2,
		Visibility_TOAAV_None = 3
	}
	enum MxTypeOfLine {
		Line_TOL_EMPTY = -1,//!< hidden
		Line_TOL_SOLID = 0,//!< continuous
		Line_TOL_DASH = 1,//!< dashed 2.0,1.0 (MM)
		Line_TOL_DOT = 2,//!< dotted 0.2,0.5 (MM)
		Line_TOL_DOTDASH = 3,//!< mixed  10.0,1.0,2.0,1.0 (MM)
		Line_TOL_USERDEFINED = 4
	}
	enum MxTextPath {
		TextPath_TP_UP = 0,
		TextPath_TP_DOWN = 1,
		TextPath_TP_LEFT = 2,
		TextPath_TP_RIGHT = 3
	}
	enum MxDimensionArrowOrientation {
		DimensionArrowOrientation_DAO_Internal = 0,
		DimensionArrowOrientation_DAO_External = 1,
		DimensionArrowOrientation_DAO_Fit = 2
	}
	enum MxDimensionTextVerticalPosition {
		DimensionTextVerticalPosition_DTVP_Above = 0,
		DimensionTextVerticalPosition_DTVP_Below = 1,
		DimensionTextVerticalPosition_DTVP_Center = 2
	}
	enum MxDimensionTextHorizontalPosition {
		DimensionTextHorizontalPosition_DTHP_Left = 0,
		DimensionTextHorizontalPosition_DTHP_Right = 1,
		DimensionTextHorizontalPosition_DTHP_Center = 2,
		DimensionTextHorizontalPosition_DTHP_Fit = 3
	}
	enum MxKindOfDimension {
		KindOfDimension_KOD_NONE = 0,
		KindOfDimension_KOD_LENGTH = 1,
		KindOfDimension_KOD_PLANEANGLE = 2,
		KindOfDimension_KOD_SOLIDANGLE = 3,
		KindOfDimension_KOD_AREA = 4,
		KindOfDimension_KOD_VOLUME = 5,
		KindOfDimension_KOD_MASS = 6,
		KindOfDimension_KOD_TIME = 7,
		KindOfDimension_KOD_RADIUS = 8,
		KindOfDimension_KOD_DIAMETER = 9,
		KindOfDimension_KOD_CHAMF2D = 10,
		KindOfDimension_KOD_CHAMF3D = 11,
		KindOfDimension_KOD_OFFSET = 12,
		KindOfDimension_KOD_ELLIPSERADIUS = 13
	}
	enum MxDocColorType {
		DocColor_ColorGen = 0,
		DocColor_ColorSurf = 1,
		DocColor_ColorCurv = 2
	}
	enum MxKindOfInteractive {
		KindOfInteractive_None = 0,
		KindOfInteractive_Datum = 1,
		KindOfInteractive_Shape = 2,
		KindOfInteractive_Object = 3,
		KindOfInteractive_Relation = 4,
		KindOfInteractive_Dimension = 5,
		KindOfInteractive_LightSource = 6,
		KOI_None = 0,
		KOI_Datum = 1,
		KOI_Shape = 2,
		KOI_Object = 3,
		KOI_Relation = 4,
		KOI_Dimension = 5
	}
	enum MxPrs3dTypeOfHLR {
		TOH_NotSet = 0,
		TOH_PolyAlgo = 1,
		TOH_Algo = 2
	}
	enum MxDisplayStatus {
		DisplayStatus_Displayed = 0,
		DisplayStatus_Erased = 1,
		DisplayStatus_None = 2,
		DS_Displayed = 0,
		DS_Erased = 1,
		DS_None = 2
	}
	enum MxGlobalDisplayMode {
		DisplayMode_Wireframe = 0,
		DisplayMode_HiddenLineRemoval = 1,
		DisplayMode_Shaded = 2,
		DisplayMode_ShadedWithFaceBoundary = 3,
		DisplayMode_Transparency = 4
	}
	enum MxGradientFillMethod {
		GradientFillMethod_None = 0,//!< fill method not specified
		GradientFillMethod_Horizontal = 1,//!< gradient directed from left (Color1) to right (Color2)
		GradientFillMethod_Vertical = 2,//!< gradient directed from top (Color1) to bottom (Color2)
		GradientFillMethod_Diagonal1 = 3,//!< gradient directed from upper left corner (Color1) to lower right (Color2)
		GradientFillMethod_Diagonal2 = 4,//!< gradient directed from upper right corner (Color1) to lower left (Color2)
		GradientFillMethod_Corner1 = 5,//!< highlights upper left corner with Color1
		GradientFillMethod_Corner2 = 6,//!< highlights upper right corner with Color1
		GradientFillMethod_Corner3 = 7,//!< highlights lower right corner with Color1
		GradientFillMethod_Corner4 = 8,//!< highlights lower left corner with Color1
		GradientFillMethod_Elliptical = 9,//!< gradient directed from center (Color1) in all directions forming an elliptic shape (Color2)
		GFM_NONE = 0,
		GFM_HOR = 1,
		GFM_VER = 2,
		GFM_DIAG1 = 3,
		GFM_DIAG2 = 4,
		GFM_CORNER1 = 5,
		GFM_CORNER2 = 6,
		GFM_CORNER3 = 7,
		GFM_CORNER4 = 8
	}
	enum MxFormat {
		Format_Unknown = 0,
		Format_Image = 1,
		Format_3DS = 2,
		Format_3MF = 3,
		Format_AMF = 4,
		Format_COLLADA = 5,
		Format_DXF = 6,
		Format_FBX = 7,
		Format_GLTF = 8,
		Format_IGES = 9,
		Format_OBJ = 10,
		Format_OCCBREP = 11,
		Format_OFF = 12,
		Format_PLY = 13,
		Format_STEP = 14,
		Format_STL = 15,
		Format_VRML = 16,
		Format_X3D = 17,
		Format_Blender = 18
	}
	enum MxQuantAspect {
		Quant_Length = 0,
		Quant_Area = 1,
		Quant_Volume = 2
	}
	enum MxOrientation {
		Orientation_FORWARD = 0,
		Orientation_REVERSED = 1,
		Orientation_INTERNAL = 2,
		Orientation_EXTERNAL = 3
	}
	enum MxTransitionMode {
		Mx_Transformed = 0,
		Mx_RightCorner = 1,
		Mx_RoundCorner = 2
	}
}
export type EventType = string | symbol;
export type PubSubEvent = Record<EventType, (...ages: any) => any>;
declare class PubSub<Events extends PubSubEvent = PubSubEvent> {
	events: {
		[x: EventType]: Events[keyof Events][];
	};
	constructor();
	/**
	 * 订阅
	 * @param event 事件名称
	 * @param callback 事件回调
	 */
	on<Key extends keyof Events>(event: Key, callback: Events[keyof Events]): void;
	/**
	 * 订阅一次
	 * @param event 事件名称
	 * @param callback 事件回调
	 */
	once<Key extends keyof Events>(event: Key, callback: Events[keyof Events]): void;
	/**
	 * 发布
	 * @param event 事件名称
	 * @param data 载荷
	 */
	emit<Key extends keyof Events>(event: Key | number, ...data: Parameters<Events[Key]>): void;
	/**
	 * 销毁事件
	 * @param event 事件名称
	 * @param callback 事件方法
	 */
	off<Key extends keyof Events>(event: Key, callback?: Events[keyof Events]): void;
}
declare class MxApp3DType extends PubSub<{
	eventModesSelected: (ids: number[]) => void;
	eventAddToTree: (node: string) => void;
	eventRemoveFromTree: (ids: number[]) => void;
	eventFileSave: (fileName: string) => void;
	eventRebuildTree: (tree_str: string) => void;
	eventUpdatePointer: (pointer: number[]) => void;
	eventUpdateViewSize: (pointer: number[]) => void;
	eventUpdateAttribute: (attrStr: string) => void;
}> {
	/**
	 * @internal
	 */
	init(imp: any): void;
	/**
	 * @internal
	 */
	imp?: any;
	/**
	 * @internal
	 */
	cpp_app: any;
	/**
	 * @internal
	 */
	tool: any;
	/**
	 * @internal
	 */
	globalMethods: any;
	/**
	 * 为当前应用程序创建一个视图
	 * @param theCanvasSelector canvas的CSS选择器字符串
	 * @returns 返回一个视图对象
	 */
	createView(theCanvasSelector: string): Mx3dView;
	/**
	 * 获取当前视图对象
	 * @returns 返回当前的视图对象
	 */
	getCurrentActiveView(): Mx3dView;
}
/**
 * 全局应用程序单实例
 */
export declare const MxApp3D: MxApp3DType;
export interface MxCAD3DConfig {
	[x: string]: any;
	canvas: string | HTMLCanvasElement;
	/** canvas最小宽度 默认300 */
	minWidth?: number;
	/** canvas最小高度 默认300 */
	minHeight?: number;
	/** 指定更新Canvas大小的函数，不指定则默认自动处理(指定该函数则 minHeight, minWidth无效) */
	updateCanvasSize?: () => void;
	locateFile?: (fileName: string, base?: string | URL) => string;
}
/**
 * 文档视图对象
 * 一个文档视图对象对应一个Canvas视图和一个文档
 */
export declare class MxCAD3DObject {
	/**
	 * @internal
	 */
	private event;
	/**
	 * @internal
	 */
	private imp;
	/**
	 * @internal
	 */
	private canvas;
	/**
	 * @internal
	 */
	private ctx;
	/**
	 * @internal
	 */
	private updateCanvasSizeFun;
	constructor();
	/**
	 * 获取当前文档视图对象的文档
	 * @returns 返回文档对象
	 */
	getDocument(): Mx3dDbDocument;
	/**
	 * 移除所有
	 * @param theUpdateView 移除后是否立即更新视图
	 */
	removeAll(theUpdateView?: boolean): void;
	/**
	 * 移除选中
	 */
	removeSelected(): void;
	/**
	 * 更新显示
	 * @param isUpAllData 是否更新所有数据
	 * @param isRemoveAll 是否首先移除所有数据
	 */
	update(isUpAllData?: boolean, isRemoveAll?: boolean): void;
	/**
	 * 设置视图投影模式
	 * @param theProjection 投影模式
	 */
	setProjectionType(theProjection: MdGe.MxCameraProjection): void;
	/**
	 * 显示中心坐标轴
	 * @param theToShow true显示，false不显示
	 */
	showCenterTrihedron(theToShow: boolean): void;
	/**
	 * 视图中的所有对象缩放至适应整个视图
	 * @param theAuto 自动缩放
	 */
	fitAllObjects(theAuto: boolean): void;
	/**
	 * 开启/关闭X轴剖切面
	 * @param theToEnabled 是否开启X轴剖切面
	 */
	enableXClipPlane(theToEnabled: boolean): void;
	/**
	 * 设置X轴剖切面的位置
	 * @param thePosition 剖切平面相对于世界坐标系原点的位置
	 */
	setXClipPlaneXPosition(thePosition: number): void;
	/**
	 * 翻转X轴剖切面
	 */
	setXClipPlaneReverse(): void;
	/**
	 * 开启/关闭Y轴剖切面
	 * @param theToEnabled 是否开启Y轴剖切面
	 */
	enableYClipPlane(theToEnabled: boolean): void;
	/**
	 * 设置Y轴剖切面的位置
	 * @param thePosition 剖切平面相对于世界坐标系原点的位置
	 */
	setYClipPlaneYPosition(thePosition: number): void;
	/**
	 * 翻转Y轴剖切面
	 */
	setYClipPlaneReverse(): void;
	/**
	 * 开启/关闭Z轴剖切面
	 * @param theToEnabled 是否开启Z轴剖切面
	 */
	enableZClipPlane(theToEnabled: boolean): void;
	/**
	 * 设置Z轴剖切面的位置
	 * @param thePosition 剖切平面相对于世界坐标系原点的位置
	 */
	setZClipPlaneZPosition(thePosition: number): void;
	/**
	 * 翻转Z轴剖切面
	 */
	setZClipPlaneReverse(): void;
	/**
	 * 开启/关闭用户自定义剖切面
	 * @param theToEnabled 是否开启用户自定义剖切面
	 */
	enableCustomClipPlane(theToEnabled: boolean): void;
	/**
	 * 设置用户自定义剖切面的位置
	 * @param thePosition 剖切平面相对于世界坐标系原点的位置
	 */
	setCustomClipPlanePosition(thePosition: number): void;
	/**
	 * 翻转用户自定义剖切面
	 */
	setCustomClipPlaneReverse(): void;
	/**
	 * 设置用户自定义剖切面的法向
	 * @param x 法向的x分量
	 * @param y 法向的y分量
	 * @param z 法向的z分量
	 */
	setCustomClipPlaneDirection(x: number, y: number, z: number): void;
	/**
	 * 显示文字符号
	 * @param theSymbol 文字符号对象
	 */
	displaySymbolText(theSymbol: Mx3dSymbolText): void;
	/**
	 * 显示标注符号
	 * @param theDimension 标注符号对象
	 */
	displayDimension(theDimension: Mx3dDimObject): void;
	/**
	 * 为当前选中对象设置纹理贴图
	 * @param theFileName 图片在文件系统中的完整路径
	 */
	addModelTexture(theFileName: string): void;
	/**
	 * 移除当前选择对象的纹理贴图
	 */
	removeModelTexture(): void;
	/**
	 * 设置渐变背景色
	 * @param theColor1 颜色对象1
	 * @param theColor2 颜色对象2
	 * @param theMethod 渐变方式
	 */
	setGradientBgColor(theColor1: Mx3dGeColor, theColor2: Mx3dGeColor, theMethod: MdGe.MxGradientFillMethod): void;
	/**
	 * 设置视图方向
	 * @param theOrientation 视图方向
	 * @param theIsYup 是否Y轴向上
	 */
	setProj(theOrientation: MdGe.MxV3dTypeOfOrientation, theIsYup: boolean): void;
	/**
	 * 设置当前选中对象的颜色
	 * @param color 颜色
	 */
	setSelectedColor(color: Mx3dGeColor): void;
	/**
	 * 设置选中对象的材质
	 * @param material 材质
	 */
	setSelectedMaterial(material: Mx3dGeMaterial): void;
	/**
	 * 设置当前的显示模式
	 * @param theMode 显示模式
	 */
	setDisplayMode(theMode: MdGe.MxGlobalDisplayMode): void;
	enableDirLightSrc(theToEnabled: boolean): void;
	setCubemapBackground(theRight: string, theLeft: string, theTop: string, theBottom: string, theFront: string, theBack: string): void;
	setManipulatorEnabled(isEnabled: boolean): void;
	getImp(): any;
	getCtx(): any;
	updateCanvasSize(): void;
	init(imp: any): void;
	on(name: "init", fun: () => void): void;
	off(name: string, fun?: Function): void;
	callEvent(sEventName: string, param?: any): boolean;
	/**
	 * 初始化当前文档视图对象
	 * @param config 初始化需要的相关配置，canvas可以是选择器字符串，也可以是canvas对象
	 */
	create(config: MxCAD3DConfig): void;
}
export type Vector = [
	theX: number,
	theY: number,
	theZ: number
];
/**
 * 点和数组的联合类型
 */
export type UniPoint = Mx3dGePoint | Vector;
/**
 * 方向向量和数组的联合类型
 */
export type UniDir = Mx3dGeDir | Vector;
/**
 * 向量和数组的联合类型
 */
export type UniVec = Mx3dGeVec | Vector;
/**
 * 应用程序类，全局单实例
 */
export declare class Mx3dApplication {
	/**
	 * @internal
	 */
	protected imp: any;
	/**
	 * @internal
	 */
	constructor();
	/**
	 * 为当前应用程序创建一个视图
	 * @param theCanvasSelector canvas的CSS选择器字符串
	 * @returns 返回一个视图对象
	 */
	createView(theCanvasSelector: string): Mx3dView;
	/**
	 * 获取当前视图对象
	 * @returns 返回当前的视图对象
	 */
	getCurrentActiveView(): Mx3dView;
}
/**
 * 管理对象生命周期的基类
 */
export declare class Mx3dBaseObject {
	/**
	 * @internal
	 */
	protected imp: any;
	/**
	 * @internal
	 */
	constructor(imp?: any);
	/**
	 * @internal
	 */
	getImp(): any;
	/**
	 * @internal
	 */
	protected initTempObject(imp: any): void;
}
/**
 * 尺寸标注的基类
 */
export declare class Mx3dDimObject extends Mx3dBaseObject {
	/**
	 * @internal
	 */
	constructor(p?: object);
}
/**
 * 符号的基类
 */
export declare class Mx3dSymbolObject extends Mx3dBaseObject {
	/**
	 * @internal
	 */
	constructor(p?: object);
}
/**
 * 模型算法的基类
 */
export declare class Mx3dAlgoObject extends Mx3dBaseObject {
	/**
	 * @internal
	 */
	constructor(p?: object);
}
/**
 * 样式基类
 */
export declare class Mx3dAspectObject extends Mx3dBaseObject {
	/**
	 * @internal
	 */
	constructor(p?: object);
}
/**
 * 数学几何基类
 */
export declare class Mx3dGeObject extends Mx3dBaseObject {
	/**
	 * @internal
	 */
	constructor(p?: object);
}
/**
 * 曲线基类
 */
export declare class Mx3dGeCurve extends Mx3dGeObject {
	/**
	 * @internal
	 */
	constructor(p?: object);
}
/**
 * 圆锥曲线基类
 */
export declare class Mx3dGeConic extends Mx3dGeCurve {
	/**
	 * @internal
	 */
	constructor(p?: object);
}
/**
 * 表示三维空间中的一个点。
 *
 * 提供构造函数以及获取和设置点的坐标的方法。
 */
export declare class Mx3dGePoint extends Mx3dGeObject {
	/**
	 * 默认构造一个位于原点 (0, 0, 0) 的点。
	 */
	constructor();
	/**
	 * 使用给定的坐标数组构造一个点。
	 *
	 * @param theXYZ - 包含X, Y, Z坐标值的数组。
	 */
	constructor(theXYZ: Vector);
	/**
	 * 使用给定的X, Y, Z坐标值构造一个点。
	 *
	 * @param theX - X坐标值。
	 * @param theY - Y坐标值。
	 * @param theZ - Z坐标值。
	 */
	constructor(theX: number, theY: number, theZ: number);
	/**
	 * 获取点在世界坐标系下的X坐标值
	 * @returns X坐标值
	 */
	X(): number;
	/**
	 * 获取点在世界坐标系下的Y坐标值
	 * @returns Y坐标值
	 */
	Y(): number;
	/**
	 * 获取点在世界坐标系下的Z坐标值
	 * @returns Z坐标值
	 */
	Z(): number;
	/**
	 * 设置点在世界坐标系下的X坐标值
	 * @param theX X坐标值
	 */
	setX(theX: number): void;
	/**
	 * 设置点在世界坐标系下的Y坐标值
	 * @param theY Y坐标值
	 */
	setY(theY: number): void;
	/**
	 * 设置点在世界坐标系下的Z坐标值
	 * @param theZ Z坐标值
	 */
	setZ(theZ: number): void;
	/**
	 * 设置点在世界坐标系下的X,Y,Z坐标值
	 * @param theX X坐标值
	 * @param theY Y坐标值
	 * @param theZ Z坐标值
	 */
	setXYZ(theX: number, theY: number, theZ: number): void;
	/**
	 * 获取当前点的拓扑点形状
	 * @returns 拓扑点形状
	 */
	Vertex(): Mx3dShapeVertex;
}
/**
 * 表示几何变换
 */
export declare class Mx3dGeTrsf extends Mx3dGeObject {
	constructor();
	/**
	 * 设置按照点镜像变换
	 * @param point 镜像点
	 */
	SetMirrorByPoint(point: UniPoint): void;
	/**
	 * 设置按照轴镜像变换
	 * @param axis 镜像轴
	 */
	SetMirrorByAxis(axis: Mx3dGeAxis): void;
	/**
	 * 设置按照坐标系镜像变换，镜像平面是坐标系的XOY平面
	 * @param csysr 镜像坐标系
	 */
	SetMirrorByCSYSR(csysr: Mx3dGeCSYSR): void;
	/**
	 * 设置按照轴旋转一定角度的变换
	 * @param axis 旋转轴
	 * @param ang 旋转角度
	 */
	SetRotation(axis: Mx3dGeAxis, ang: number): void;
	/**
	 * 设置按照点，以一定的比例进行缩放变换
	 * @param point 缩放点
	 * @param s 缩放比例
	 */
	SetScale(point: UniPoint, s: number): void;
	/**
	 * 设置按照向量进行平移变换，移动的方向和距离分别是向量的方向和模长
	 * @param vec 向量
	 */
	SetTranslationByVec(vec: UniVec): void;
	/**
	 * 设置按照起点减去终点构成的向量的平移变换
	 * @param point1 起点
	 * @param point2 终点
	 */
	SetTranslationBy2Points(point1: UniPoint, point2: UniPoint): void;
	/**
	 * 单独设置按照向量的平移变换
	 * @param vec 向量
	 */
	SetTranslationPart(vec: Mx3dGeVec): void;
	/**
	 * 设置缩放比例
	 * @param s 缩放比例
	 */
	SetScaleFactor(s: number): void;
	/**
	 * 设置除了平移变换的仿射变换矩阵
	 * @param a11 第1行第1列
	 * @param a12 第1行第2列
	 * @param a13 第1行第3列
	 * @param a14 第1行第4列
	 * @param a21 第2行第1列
	 * @param a22 第2行第2列
	 * @param a23 第2行第3列
	 * @param a24 第2行第4列
	 * @param a31 第3行第1列
	 * @param a32 第3行第2列
	 * @param a33 第3行第3列
	 * @param a34 第3行第4列
	 */
	SetValues(a11: number, a12: number, a13: number, a14: number, a21: number, a22: number, a23: number, a24: number, a31: number, a32: number, a33: number, a34: number): void;
	/**
	 * 判断此变换矩阵的行列式是否为负
	 * @returns 是否为负
	 */
	IsNegative(): boolean;
	/**
	 * 获取变换的缩放比例
	 * @returns 缩放比例
	 */
	ScaleFactor(): number;
	/**
	 * 获取变换矩阵中指定行列的元素值
	 * @param row 行
	 * @param col 列
	 * @returns 元素值
	 */
	Value(row: number, col: number): number;
	/**
	 * 将变换矩阵转置
	 */
	Invert(): void;
	/**
	 * 获取变换矩阵转置后的矩阵
	 * @returns 转置矩阵
	 */
	Inverted(): Mx3dGeTrsf;
	/**
	 * 获取矩阵相乘之后的结果，[res] = [me] * t，[res]代表结果，[me]代表自身，t是另外的变换矩阵
	 * @param t 另一个变换矩阵
	 * @returns 矩阵相乘后的结果
	 */
	Multiplied(t: Mx3dGeTrsf): Mx3dGeTrsf;
	/**
	 * 自身乘以另外一个变换矩阵，[me] = [me] * t，[me]代表自身，t是另外的变换矩阵
	 * @param t 另一个变换矩阵
	 */
	Multiply(t: Mx3dGeTrsf): void;
	/**
	 * 另外一个变换矩阵乘以自身，[me] = t * [me]，[me]代表自身，t是另外的变换矩阵
	 * @param t 另一个变换矩阵
	 */
	PreMultiply(t: Mx3dGeTrsf): void;
	/**
	 * 自身n幂次方运算，[me] * [me] * .......* [me]，[me]代表自身，乘以n次
	 * @param n 次数
	 */
	Power(n: number): void;
	/**
	 * 获取当前变换矩阵n次幂方运算后的结果，[res] = [me] * [me] * .......* [me]，[res]代表结果，[me]代表自身，n个[me]相乘
	 * @param n 次数
	 * @returns n幂次方的结果
	 */
	Powered(n: number): Mx3dGeTrsf;
	/**
	 * 对一个点用当前变换矩阵进行变换，参数是引用的，会被函数修改
	 * @param x
	 * @param y
	 * @param z
	 */
	Transforms(x: number, y: number, z: number): void;
}
/**
 * 表示一个轴
 */
export declare class Mx3dGeAxis extends Mx3dGeObject {
	/**
	 * 默认构造
	 */
	constructor();
	/**
	 * 构造函数
	 * @param theLoc 轴的原点
	 * @param theDir 轴的方向
	 */
	constructor(theLoc: UniPoint, theDir: UniDir);
	/**
	 * 获取轴的方向
	 * @returns 方向
	 */
	Direction(): Mx3dGeDir;
	/**
	 * 获取轴的原点
	 * @returns 原点
	 */
	Location(): Mx3dGePoint;
	/**
	 * 设置轴的方向
	 * @param theDir 方向
	 */
	SetDirection(theDir: Mx3dGeDir): void;
	/**
	 * 设置轴的原点
	 * @param theLoc 原点
	 */
	SetLocation(theLoc: UniPoint): void;
}
/**
 * 表示方向的向量，模长始终为1
 */
export declare class Mx3dGeDir extends Mx3dGeObject {
	/**
	 * 构造函数
	 */
	constructor();
	/**
	 * 构造函数
	 * @param theXv X方向
	 * @param theYv Y方向
	 * @param theZv Z方向
	 */
	constructor(theXv: number, theYv: number, theZv: number);
	/**
	 * 获取X方向的大小
	 * @returns X方向的大小
	 */
	X(): number;
	/**
	 * 获取Y方向的大小
	 * @returns Y方向的大小
	 */
	Y(): number;
	/**
	 * 获取Z方向的大小
	 * @returns Z方向的大小
	 */
	Z(): number;
	/**
	 * 设置X方向的大小
	 * @param theX X方向的大小
	 */
	SetX(theX: number): void;
	/**
	 * 设置Y方向的大小
	 * @param theY Y方向的大小
	 */
	SetY(theY: number): void;
	/**
	 * 设置Z方向的大小
	 * @param theZ Z方向的大小
	 */
	SetZ(theZ: number): void;
	/**
	 * 设置X,Y,Z方向的大小
	 * @param theXv X方向的大小
	 * @param theYv Y方向的大小
	 * @param theZv Z方向的大小
	 */
	SetXYZ(theXv: number, theYv: number, theZv: number): void;
	/**
	 * 判断是否和另外一个方向相等
	 * @param theOther 另一个方向
	 * @param theAngularTolerance 角度精度
	 * @returns 是否是同一方向
	 */
	IsEqual(theOther: Mx3dGeDir, theAngularTolerance: number): boolean;
	/**
	 * 判断是否和另外一个方向垂直
	 * @param theOther 另一个方向
	 * @param theAngularTolerance 角度精度
	 * @returns 是否垂直
	 */
	IsNormal(theOther: Mx3dGeDir, theAngularTolerance: number): boolean;
	/**
	 * 判断是否和另外一个方向相反
	 * @param theOther 另一个方向
	 * @param theAngularTolerance 角度精度
	 * @returns 是否相反
	 */
	IsOpposite(theOther: Mx3dGeDir, theAngularTolerance: number): boolean;
	/**
	 * 判断是否和另外一个方向平行（同向或反向均为平行）
	 * @param theOther 另一个方向
	 * @param theAngularTolerance 角度精度
	 * @returns 是否平行
	 */
	IsParallel(theOther: Mx3dGeDir, theAngularTolerance: number): boolean;
	/**
	 * 获取与另一个方向的夹角，范围[0,PI]
	 * @param theOther 另一个方向
	 * @returns 夹角
	 */
	Angle(theOther: Mx3dGeDir): number;
	/**
	 *
	 * @param theOther
	 * @param theVRef
	 * @returns
	 */
	AngleWithRef(theOther: Mx3dGeDir, theVRef: Mx3dGeDir): number;
	/**
	 * [me] = [me] ^ theRight，[me]代表自身，^代表叉乘
	 * @param theRight 另一个方向向量
	 */
	Cross(theRight: Mx3dGeDir): void;
	/**
	 * [res] = [me] ^ theRight，[me]代表自身，[res]代表结果，^代表叉乘
	 * @param theRight 另一个方向向量
	 * @returns 叉乘结果
	 */
	Crossed(theRight: Mx3dGeDir): Mx3dGeDir;
	/**
	 * [me] ^ (theV1 ^ theV2)，[me]代表自身，^代表叉乘
	 * @param theV1 另一个方向向量
	 * @param theV2 另一个方向向量
	 */
	CrossCross(theV1: Mx3dGeDir, theV2: Mx3dGeDir): void;
	/**
	 * [res] ^ (theV1 ^ theV2)，[me]代表自身，[res]代表结果，^代表叉乘
	 * @param theV1 另一个方向向量
	 * @param theV2 另一个方向向量
	 * @returns 叉乘结果
	 */
	CrossCrossed(theV1: Mx3dGeDir, theV2: Mx3dGeDir): Mx3dGeDir;
	/**
	 * [res] = [me] * theOther，[me]代表自身，[res]代表结果，*代表点乘
	 * @param theOther 另一个方向向量
	 * @returns 点乘结果
	 */
	Dot(theOther: Mx3dGeDir): number;
	/**
	 * [res] = [me] * (theV1 ^ theV2)，[me]代表自身，[res]代表结果，^代表叉乘，*代表点乘
	 * @param theV1 另一个方向向量
	 * @param theV2 另一个方向向量
	 * @returns 最后点乘结果
	 */
	DotCross(theV1: Mx3dGeDir, theV2: Mx3dGeDir): number;
	/**
	 * 翻转方向
	 */
	Reverse(): void;
	/**
	 * 获取翻转方向后的结果
	 * @returns 翻转方向后的结果
	 */
	Reversed(): Mx3dGeDir;
	/**
	 * 按照一个镜像中心方向向量镜像
	 * @param theV 镜像中心方向
	 */
	MirrorByVec(theV: Mx3dGeDir): void;
	MirroredByVec(theV: Mx3dGeDir): Mx3dGeDir;
	MirrorByAxis(theA1: Mx3dGeAxis): void;
	MirroredByAxis(theA1: Mx3dGeAxis): Mx3dGeDir;
	MirrorByCSYSR(theA2: Mx3dGeCSYSR): void;
	MirroredByCSYSR(theA2: Mx3dGeCSYSR): Mx3dGeDir;
	Rotate(theA1: Mx3dGeAxis, theAng: number): void;
	Rotated(theA1: Mx3dGeAxis, theAng: number): Mx3dGeDir;
	Transform(theT: Mx3dGeTrsf): void;
	Transformed(theT: Mx3dGeTrsf): Mx3dGeDir;
}
/**
 * 表示三维空间中的椭圆对象，继承自Mx3dGeObject类。
 * 支持通过不同参数构造椭圆，并提供了丰富的属性访问与操作方法。
 */
export declare class Mx3dGeEllipse extends Mx3dGeObject {
	/**
	 * 构造一个未初始化的椭圆实例。
	 */
	constructor();
	/**
	 * 根据给定的坐标系和半径构造椭圆。
	 * @param theA2 椭圆所在的坐标系
	 * @param theMajorRadius 主半径
	 * @param theMinorRadius 次半径
	 */
	constructor(theA2: Mx3dGeCSYSR, theMajorRadius: number, theMinorRadius: number);
	/**
	 * 设置椭圆的轴。
	 * @param theA1 新的轴
	 */
	SetAxis(theA1: Mx3dGeAxis): void;
	/**
	 * 设置椭圆的位置。
	 * @param theP 新的位置点
	 */
	SetLocation(theP: Mx3dGePoint): void;
	/**
	 * 设置椭圆的主半径。
	 * @param theMajorRadius 新的主半径
	 */
	SetMajorRadius(theMajorRadius: number): void;
	/**
	 * 设置椭圆的次半径。
	 * @param theMinorRadius 新的次半径
	 */
	SetMinorRadius(theMinorRadius: number): void;
	/**
	 * 设置椭圆的坐标系。
	 * @param theA2 新的坐标系
	 */
	SetPosition(theA2: Mx3dGeCSYSR): void;
	/**
	 * 计算并返回椭圆的面积。
	 * @returns 椭圆的面积
	 */
	Area(): number;
	/**
	 * 返回椭圆的轴。
	 * @returns 椭圆的轴
	 */
	Axis(): Mx3dGeAxis;
	/**
	 * 获取椭圆的第一条直接线，是垂直于主轴的直线，位于椭圆上，满足特定几何关系。
	 * @returns 直线1
	 */
	Directrix1(): Mx3dGeAxis;
	/**
	 * 获取椭圆的第二条直接线，是垂直于主轴的直线，位于椭圆上，满足特定几何关系。
	 * @returns 直线2
	 */
	Directrix2(): Mx3dGeAxis;
	/**
	 * 计算并返回椭圆的离心率，即焦距与半长轴之比。
	 * @returns 离心率
	 */
	Eccentricity(): number;
	/**
	 * 计算并返回椭圆的焦距，两焦点之间的距离。
	 * @returns 焦距
	 */
	Focal(): number;
	/**
	 * 获取椭圆的第一个焦点。
	 * @returns 第一焦点
	 */
	Focus1(): Mx3dGePoint;
	/**
	 * 获取椭圆的第二个焦点。
	 * @returns 二焦点
	 */
	Focus2(): Mx3dGePoint;
	/**
	 * 获取椭圆的当前位置，即中心点。
	 * @returns 当前位置
	 */
	Location(): Mx3dGePoint;
	/**
	 * 获取椭圆的主半径。
	 * @returns 主半径
	 */
	MajorRadius(): number;
	/**
	 * 获取椭圆的次半径。
	 * @returns 次半径
	 */
	MinorRadius(): number;
	/**
	 * 获取椭圆的参数，可能指椭圆上某点对应的参数方程中的参数。
	 * @returns 参数值
	 */
	Parameter(): number;
	/**
	 * 获取椭圆的位置坐标系，定义椭圆所在的坐标框架。
	 * @returns 位置坐标系
	 */
	Position(): Mx3dGeCSYSR;
	/**
	 * 获取椭圆的主轴，即沿主半径方向的轴。
	 * @returns 椭圆的主轴
	 */
	XAxis(): Mx3dGeAxis;
	/**
	 * 获取椭圆的次轴，即沿次半径方向的轴。
	 * @returns 椭圆的次轴
	 */
	YAxis(): Mx3dGeAxis;
	/**
	 * 对椭圆执行镜像操作，以指定点为中心进行对称变换。
	 * @param theP 镜像操作的中心点
	 */
	MirrorByPoint(theP: Mx3dGePoint): void;
	/**
	 * 返回沿指定点镜像后的椭圆副本。
	 * @param theP 镜像操作的中心点
	 * @returns 镜像后的椭圆副本
	 */
	MirroredByPoint(theP: Mx3dGePoint): Mx3dGeEllipse;
	/**
	 * 对椭圆执行镜像操作，以指定轴为对称轴。
	 * @param theA1 镜像操作的轴
	 */
	MirrorByAxis(theA1: Mx3dGeAxis): void;
	/**
	 * 返回沿指定轴镜像后的椭圆副本。
	 * @param theA1 镜像操作的轴
	 * @returns 镜像后的椭圆副本
	 */
	MirroredByAxis(theA1: Mx3dGeAxis): Mx3dGeEllipse;
	/**
	 * 对椭圆执行镜像操作，以指定坐标系所在的平面为对称面。
	 * @param theA2 镜像操作的坐标系
	 */
	MirrorByCSYSR(theA2: Mx3dGeCSYSR): void;
	/**
	 * 返回沿指定坐标系所在平面镜像后的椭圆副本。
	 * @param theA2 镜像操作的坐标系
	 * @returns 镜像后的椭圆副本
	 */
	MirroredByCSYSR(theA2: Mx3dGeCSYSR): Mx3dGeEllipse;
	/**
	 * 旋转椭圆，围绕指定轴按给定角度执行旋转操作。
	 * @param theA1 旋转轴
	 * @param theAng 旋转角度（弧度）
	 */
	Rotate(theA1: Mx3dGeAxis, theAng: number): void;
	/**
	 * 返回旋转后的椭圆副本。
	 * @param theA1 旋转轴
	 * @param theAng 旋转角度（弧度）
	 * @returns 旋转后的椭圆副本
	 */
	Rotated(theA1: Mx3dGeAxis, theAng: number): Mx3dGeEllipse;
	/**
	 * 缩放椭圆，从指定点出发按给定比例缩放。
	 * @param theP 缩放中心点
	 * @param theS 缩放比例
	 */
	Scale(theP: Mx3dGePoint, theS: number): void;
	/**
	 * 返回缩放后的椭圆副本。
	 * @param theP 缩放中心点
	 * @param theS 缩放比例
	 * @returns 缩放后的椭圆副本
	 */
	Scaled(theP: Mx3dGePoint, theS: number): Mx3dGeEllipse;
	/**
	 * 应用变换矩阵转换椭圆。
	 * @param theT 转换矩阵
	 */
	Transform(theT: Mx3dGeTrsf): void;
	/**
	 * 返回经过变换后的椭圆副本。
	 * @param theT 转换矩阵
	 * @returns 变换后的椭圆副本
	 */
	Transformed(theT: Mx3dGeTrsf): Mx3dGeEllipse;
	/**
	 * 沿圆沿指定向量平移。
	 * @param theV 平移向量
	 */
	TranslateByVec(theV: Mx3dGeVec): void;
	/**
	 * 返回平移后的椭圆副本。
	 * @param theV 平移向量
	 * @returns 平移后的椭圆副本
	 */
	TranslatedByVec(theV: Mx3dGeVec): Mx3dGeEllipse;
	/**
	 * 椭距平移椭圆，从一点移到另一点。
	 * @param theP1 起点
	 * @param theP2 终点
	 */
	TranslateBy2Points(theP1: Mx3dGePoint, theP2: Mx3dGePoint): void;
	/**
	 * 返回等距平移后的椭圆副本。
	 * @param theP1 起点
	 * @param theP2 终点
	 * @returns 平移后的椭圆副本
	 */
	TranslatedBy2Points(theP1: Mx3dGePoint, theP2: Mx3dGePoint): Mx3dGeEllipse;
}
/**
 * 表示一个三维空间中的双曲线对象。
 * 该类用于创建、操作和查询双曲线的各种属性，包括其轴、位置、半径以及各种变换状态。
 */
export declare class Mx3dGeHyperbola extends Mx3dGeObject {
	/**
	 * 默认构造函数，用于创建一个未定义的双曲线。
	 */
	constructor();
	/**
	 * 根据给定的主半径和次半径以及一个坐标系统（Mx3dGeCSYSR）来构造一个双曲线。
	 * 坐标系统定义了双曲线的位置，其中：
	 * - 原点为双曲线中心，
	 * - "X方向"定义了双曲线的主轴，
	 * - "Y方向"定义了双曲线的次轴。
	 * @param theA2 定义双曲线位置的坐标系统。
	 * @param theMajorRadius 双曲线的主半径。
	 * @param theMinorRadius 双曲线的次半径。
	 */
	constructor(theA2: Mx3dGeCSYSR, theMajorRadius: number, theMinorRadius: number);
	/**
	 * 设置双曲线的轴。
	 * @param theA1 要设置的新轴。
	 */
	SetAxis(theA1: Mx3dGeAxis): void;
	/**
	 * 设置双曲线的位置。
	 * @param theP 新的位置点。
	 */
	SetLocation(theP: Mx3dGePoint): void;
	/**
	 * 设置双曲线的主半径。
	 * @param theMajorRadius 新的主半径值。
	 */
	SetMajorRadius(theMajorRadius: number): void;
	/**
	 * 设置双曲线的次半径。
	 * @param theMinorRadius 新的次半径值。
	 */
	SetMinorRadius(theMinorRadius: number): void;
	/**
	 * 设置双曲线的坐标系统，从而重新定义其位置和方向。
	 * @param theA2 新的坐标系统。
	 */
	SetPosition(theA2: Mx3dGeCSYSR): void;
	/**
	 * 获取双曲线的对称轴。
	 * @returns 返回双曲线的对称轴。
	 */
	Asymptote1(): Mx3dGeAxis;
	/**
	 * 获取另一条对称轴。
	 * @returns 返回双曲线的另一条对称轴。
	 */
	Asymptote2(): Mx3dGeAxis;
	/**
	 * 获取双曲线的轴线。
	 * @returns 双曲线的轴线。
	 */
	Axis(): Mx3dGeAxis;
	/**
	 * 获取共轭分支1。
	 * @returns 双曲线的共轭分支1。
	 */
	ConjugateBranch1(): Mx3dGeHyperbola;
	/**
	 * 获取共轭分支2。
	 * @returns 双曲线的共轭分支2。
	 */
	ConjugateBranch2(): Mx3dGeHyperbola;
	/**
	 * 获取直接线1。
	 * @returns 双曲线的直接线1。
	 */
	Directrix1(): Mx3dGeAxis;
	/**
	 * 获取直接线2。
	 * @returns 双曲线的直接线2。
	 */
	Directrix2(): Mx3dGeAxis;
	/**
	 * 获取离心率。
	 * @returns 双曲线的离心率。
	 */
	Eccentricity(): number;
	/**
	 * 获取焦距。
	 * @returns 双曲线的焦距。
	 */
	Focal(): number;
	/**
	 * 获取焦点1。
	 * @returns 双曲线的第一个焦点。
	 */
	Focus1(): Mx3dGePoint;
	/**
	 * 获取焦点2。
	 * @returns 双曲线的第二个焦点。
	 */
	Focus2(): Mx3dGePoint;
	/**
	 * 获取双曲线的当前位置点，即中心点。
	 * @returns 位置点。
	 */
	Location(): Mx3dGePoint;
	/**
	 * 获取双曲线的长轴半径。
	 * @returns 一个 number，表示双曲线的长轴半径。
	 */
	MajorRadius(): number;
	/**
	 * 获取双曲线的短轴半径。
	 * @returns 一个 number，表示双曲线的短轴半径。
	 */
	MinorRadius(): number;
	/**
	 * 获取双曲线的另一分支，与当前分支关于主轴对称。
	 * @returns 另一分支。
	 */
	OtherBranch(): Mx3dGeHyperbola;
	/**
	 * 获取双曲线的参数。
	 * @returns 一个 number，表示双曲线的参数。
	 */
	Parameter(): number;
	/**
	 * 获取双曲线的坐标系统，定义其位置和方向。
	 * @returns 坐标系。
	 */
	Position(): Mx3dGeCSYSR;
	/**
	 * 获取X轴，定义双曲线的主要方向。
	 * @returns X轴。
	 */
	XAxis(): Mx3dGeAxis;
	/**
	 * 获取Y轴，定义双曲线的次要方向。
	 * @returns Y轴。
	 */
	YAxis(): Mx3dGeAxis;
	/**
	 * 通过点镜像变换双曲线。
	 * @param theP 一个 Mx3dGePoint 对象，表示镜像的中心点。
	 */
	MirrorByPoint(theP: Mx3dGePoint): void;
	/**
	 * 获取按点镜像后的双曲线。
	 * @param theP 镜像点 (Mx3dGePoint)。
	 * @returns 按点镜像后的双曲线 (Mx3dGeHyperbola)。
	 */
	MirroredByPoint(theP: Mx3dGePoint): Mx3dGeHyperbola;
	/**
	 * 按轴镜像双曲线。
	 * @param theA1 镜像轴 (Mx3dGeAxis)。
	 */
	MirrorByAxis(theA1: Mx3dGeAxis): void;
	/**
	 * 获取按轴镜像后的双曲线。
	 * @param theA1 镜像轴 (Mx3dGeAxis)。
	 * @returns 按轴镜像后的双曲线 (Mx3dGeHyperbola)。
	 */
	MirroredByAxis(theA1: Mx3dGeAxis): Mx3dGeHyperbola;
	/**
	 * 按坐标系镜像双曲线。
	 * @param theA2 镜像的坐标系 (Mx3dGeCSYSR)。
	 */
	MirrorByCSYSR(theA2: Mx3dGeCSYSR): void;
	/**
	 * 获取按坐标系镜像后的双曲线。
	 * @param theA2 镜像的坐标系 (Mx3dGeCSYSR)。
	 * @returns 按坐标系镜像后的双曲线 (Mx3dGeHyperbola)。
	 */
	MirroredByCSYSR(theA2: Mx3dGeCSYSR): Mx3dGeHyperbola;
	/**
	 * 旋转双曲线。
	 * @param theA1 旋转轴 (Mx3dGeAxis)。
	 * @param theAng 旋转角度。
	 */
	Rotate(theA1: Mx3dGeAxis, theAng: number): void;
	/**
	 * 获取旋转后的双曲线。
	 * @param theA1 旋转轴 (Mx3dGeAxis)。
	 * @param theAng 旋转角度。
	 * @returns 旋转后的双曲线 (Mx3dGeHyperbola)。
	 */
	Rotated(theA1: Mx3dGeAxis, theAng: number): Mx3dGeHyperbola;
	/**
	 * 缩放双曲线。
	 * @param theP 缩放中心 (Mx3dGePoint)。
	 * @param theS 缩放比例。
	 */
	Scale(theP: Mx3dGePoint, theS: number): void;
	/**
	 * 获取缩放后的双曲线。
	 * @param theP 缩放中心 (Mx3dGePoint)。
	 * @param theS 缩放比例。
	 * @returns 缩放后的双曲线 (Mx3dGeHyperbola)。
	 */
	Scaled(theP: Mx3dGePoint, theS: number): Mx3dGeHyperbola;
	/**
	 * 对双曲线进行变换。
	 * @param theTrsf 变换矩阵 (Mx3dGeTrsf)。
	 */
	Transform(theT: Mx3dGeTrsf): void;
	/**
	 * 获取变换后的双曲线。
	 * @param theTrsf 变换矩阵 (Mx3dGeTrsf)。
	 * @returns 变换后的双曲线 (Mx3dGeHyperbola)。
	 */
	Transformed(theT: Mx3dGeTrsf): Mx3dGeHyperbola;
	/**
	 * 按向量平移双曲线。
	 * @param theV 平移向量 (Mx3dGeVector)。
	 */
	TranslateByVec(theV: Mx3dGeVec): void;
	/**
	 * 获取按向量平移后的双曲线。
	 * @param theV 平移向量 (Mx3dGeVector)。
	 * @returns 平移后的双曲线 (Mx3dGeHyperbola)。
	 */
	TranslatedByVec(theV: Mx3dGeVec): Mx3dGeHyperbola;
	/**
	 * 按点平移双曲线。
	 * @param theP1 起点 (Mx3dGePoint)。
	 * @param theP2 终点 (Mx3dGePoint)。
	 */
	TranslateBy2Points(theP1: Mx3dGePoint, theP2: Mx3dGePoint): void;
	/**
	 * 获取按点平移后的双曲线。
	 * @param theP1 起点 (Mx3dGePoint)。
	 * @param theP2 终点 (Mx3dGePoint)。
	 * @returns 按点平移后的双曲线 (Mx3dGeHyperbola)。
	 */
	TranslatedBy2Points(theP1: Mx3dGePoint, theP2: Mx3dGePoint): Mx3dGeHyperbola;
}
/**
 * 表示一个三维向量的类。用于三维几何运算。
 */
export declare class Mx3dGeVec extends Mx3dGeObject {
	/**
	 * 构造一个新的 Mx3dGeVec 实例。
	 * 可以不带参数，或者带三个数值参数，或者带两个点。
	 * @param x 向量的 x 分量。
	 * @param y 向量的 y 分量。
	 * @param z 向量的 z 分量。
	 * @param thePoint1 起点。
	 * @param thePoint2 终点。
	 */
	constructor();
	constructor(x: number, y: number, z: number);
	constructor(thePoint1: Mx3dGePoint, thePoint2: Mx3dGePoint);
	/**
	 * 获取向量的 x 分量。
	 * @returns x 分量。
	 */
	X(): number;
	/**
	 * 获取向量的 y 分量。
	 * @returns y 分量。
	 */
	Y(): number;
	/**
	 * 获取向量的 z 分量。
	 * @returns z 分量。
	 */
	Z(): number;
	/**
	 * 设置向量的 x 分量。
	 * @param x 新的 x 分量。
	 */
	SetX(x: number): void;
	/**
	 * 设置向量的 y 分量。
	 * @param y 新的 y 分量。
	 */
	SetY(y: number): void;
	/**
	 * 设置向量的 z 分量。
	 * @param z 新的 z 分量。
	 */
	SetZ(z: number): void;
	/**
	 * 设置向量的 x, y 和 z 分量。
	 * @param x 新的 x 分量。
	 * @param y 新的 y 分量。
	 * @param z 新的 z 分量。
	 */
	SetXYZ(x: number, y: number, z: number): void;
	/**
	 * 判断两个向量是否相等。
	 * @param other 另一个向量。
	 * @param linearTolerance 线性公差。
	 * @param angularTolerance 角度公差。
	 * @returns 是否相等。
	 */
	IsEqual(other: Mx3dGeVec, linearTolerance: number, angularTolerance: number): boolean;
	/**
	 * 判断两个向量是否互为法向量。
	 * @param other 另一个向量。
	 * @param angularTolerance 角度公差。
	 * @returns 是否互为法向量。
	 */
	IsNormal(other: Mx3dGeVec, angularTolerance: number): boolean;
	/**
	 * 判断两个向量是否互为反向。
	 * @param other 另一个向量。
	 * @param angularTolerance 角度公差。
	 * @returns 是否互为反向。
	 */
	IsOpposite(other: Mx3dGeVec, angularTolerance: number): boolean;
	/**
	 * 判断两个向量是否平行。
	 * @param other 另一个向量。
	 * @param angularTolerance 角度公差。
	 * @returns 是否平行。
	 */
	IsParallel(other: Mx3dGeVec, angularTolerance: number): boolean;
	/**
	 * 计算两个向量之间的角度。
	 * @param other 另一个向量。
	 * @returns 角度值。
	 */
	Angle(other: Mx3dGeVec): number;
	/**
	 * 计算两个向量之间的带参考向量的角度。
	 * @param other 另一个向量。
	 * @param ref 参考向量。
	 * @returns 带参考向量的角度值。
	 */
	AngleWithRef(other: Mx3dGeVec, ref: Mx3dGeVec): number;
	/**
	 * 获取向量的模。
	 * @returns 向量的模。
	 */
	Magnitude(): number;
	/**
	 * 获取向量模的平方。
	 * @returns 向量模的平方。
	 */
	SquareMagnitude(): number;
	/**
	 * 将当前向量与另一个向量相加。
	 * @param other 另一个向量。
	 */
	Add(other: Mx3dGeVec): void;
	/**
	 * 返回当前向量与另一个向量相加的结果。
	 * @param other 另一个向量。
	 * @returns 相加后的向量。
	 */
	Added(other: Mx3dGeVec): Mx3dGeVec;
	/**
	 * 从当前向量中减去另一个向量。
	 * @param right 另一个向量。
	 */
	Subtract(right: Mx3dGeVec): void;
	/**
	 * 返回当前向量减去另一个向量的结果。
	 * @param right 另一个向量。
	 * @returns 相减后的向量。
	 */
	Subtracted(right: Mx3dGeVec): Mx3dGeVec;
	/**
	 * 将当前向量乘以一个标量。
	 * @param scalar 标量值。
	 */
	Multiply(scalar: number): void;
	/**
	 * 返回当前向量乘以标量的结果。
	 * @param scalar 标量值。
	 * @returns 乘以标量后的向量。
	 */
	Multiplied(scalar: number): Mx3dGeVec;
	/**
	 * 将当前向量除以一个标量。
	 * @param scalar 标量值。
	 */
	Divide(scalar: number): void;
	/**
	 * 返回当前向量除以标量的结果。
	 * @param scalar 标量值。
	 * @returns 除以标量后的向量。
	 */
	Divided(scalar: number): Mx3dGeVec;
	/**
	 * 计算两个向量的叉积。
	 * @param right 另一个向量。
	 */
	Cross(right: Mx3dGeVec): void;
	/**
	 * 返回两个向量的叉积结果。
	 * @param right 另一个向量。
	 * @returns 叉积后的向量。
	 */
	Crossed(right: Mx3dGeVec): Mx3dGeVec;
	/**
	 * 计算两个向量的叉积的模。
	 * @param right 另一个向量。
	 * @returns 叉积的模。
	 */
	CrossMagnitude(right: Mx3dGeVec): number;
	/**
	 * 计算两个向量的叉积模的平方。
	 * @param right 另一个向量。
	 * @returns 叉积模的平方。
	 */
	CrossSquareMagnitude(right: Mx3dGeVec): number;
	/**
	 * 计算三个向量的叉积。
	 * @param v1 向量1。
	 * @param v2 向量2。
	 */
	CrossCross(v1: Mx3dGeVec, v2: Mx3dGeVec): void;
	/**
	 * 返回三个向量的叉积结果。
	 * @param v1 向量1。
	 * @param v2 向量2。
	 * @returns 叉积后的向量。
	 */
	CrossCrossed(v1: Mx3dGeVec, v2: Mx3dGeVec): Mx3dGeVec;
	/**
	 * 计算两个向量的点积。
	 * @param other 另一个向量。
	 * @returns 点积值。
	 */
	Dot(other: Mx3dGeVec): number;
	/**
	 * 计算三个向量的点-叉积。
	 * @param v1 向量1。
	 * @param v2 向量2。
	 * @returns 点-叉积值。
	 */
	DotCross(v1: Mx3dGeVec, v2: Mx3dGeVec): number;
	/**
	 * 将当前向量归一化。
	 */
	Normalize(): void;
	/**
	 * 返回归一化后的向量。
	 * @returns 归一化后的向量。
	 */
	Normalized(): Mx3dGeVec;
	/**
	 * 反转当前向量的方向。
	 */
	Reverse(): void;
	/**
	 * 返回反转后的向量。
	 * @returns 反转后的向量。
	 */
	Reversed(): Mx3dGeVec;
	/**
	 * 设置当前向量为线性组合。
	 * @param v1 向量1。
	 * @param v2 向量2。
	 */
	SetLinearForm(v1: Mx3dGeVec, v2: Mx3dGeVec): void;
	SetLinearForm(a1: number, v1: Mx3dGeVec, v2: Mx3dGeVec): void;
	SetLinearForm(a1: number, v1: Mx3dGeVec, a2: number, v2: Mx3dGeVec): void;
	SetLinearForm(a1: number, v1: Mx3dGeVec, a2: number, v2: Mx3dGeVec, v3: Mx3dGeVec): void;
	SetLinearForm(a1: number, v1: Mx3dGeVec, a2: number, v2: Mx3dGeVec, a3: number, v3: Mx3dGeVec): void;
	SetLinearForm(a1: number, v1: Mx3dGeVec, a2: number, v2: Mx3dGeVec, a3: number, v3: Mx3dGeVec, v4: Mx3dGeVec): void;
	/**
	 * 根据一个向量镜像当前向量。
	 * @param vec 镜像向量。
	 */
	MirrorByVec(vec: Mx3dGeVec): void;
	/**
	 * 返回根据一个向量镜像后的向量。
	 * @param vec 镜像向量。
	 * @returns 镜像后的向量。
	 */
	MirroredByVec(vec: Mx3dGeVec): Mx3dGeVec;
	/**
	 * 根据一个轴镜像当前向量。
	 * @param axis 镜像轴。
	 */
	MirrorByAxis(axis: Mx3dGeAxis): void;
	/**
	 * 返回根据一个轴镜像后的向量。
	 * @param axis 镜像轴。
	 * @returns 镜像后的向量。
	 */
	MirroredByAxis(axis: Mx3dGeAxis): Mx3dGeVec;
	/**
	 * 根据一个坐标系镜像当前向量。
	 * @param csysr 坐标系。
	 */
	MirrorByCSYSR(csysr: Mx3dGeCSYSR): void;
	/**
	 * 返回根据一个坐标系镜像后的向量。
	 * @param csysr 坐标系。
	 * @returns 镜像后的向量。
	 */
	MirroredByCSYSR(csysr: Mx3dGeCSYSR): Mx3dGeVec;
	/**
	 * 旋转当前向量。
	 * @param axis 旋转轴。
	 * @param ang 旋转角度。
	 */
	Rotate(axis: Mx3dGeAxis, ang: number): void;
	/**
	 * 返回旋转后的向量。
	 * @param axis 旋转轴。
	 * @param ang 旋转角度。
	 * @returns 旋转后的向量。
	 */
	Rotated(axis: Mx3dGeAxis, ang: number): Mx3dGeVec;
	/**
	 * 缩放当前向量。
	 * @param s 缩放系数。
	 */
	Scale(s: number): void;
	/**
	 * 返回缩放后的向量。
	 * @param s 缩放系数。
	 * @returns 缩放后的向量。
	 */
	Scaled(s: number): Mx3dGeVec;
	/**
	 * 根据坐标系变换当前向量。
	 * @param csysr 坐标系。
	 */
	Transform(t: Mx3dGeTrsf): void;
	/**
	 * 返回根据坐标系变换后的向量。
	 * @param csysr 坐标系。
	 * @returns 变换后的向量。
	 */
	Transformed(t: Mx3dGeTrsf): Mx3dGeVec;
}
/**
 * 表示三维空间中的一个包围盒。
 *
 * 提供构造函数以及操作包围盒的方法，包括设置、更新、变换和检查等。
 * 包围盒类主要用于空间中的包围体计算与操作，通常用于碰撞检测、空间分割等场景。
 */
export declare class Mx3dGeBndBox extends Mx3dGeObject {
	/**
	 * 默认构造一个空的包围盒。
	 */
	constructor();
	/**
	 * 使用给定的最小点和最大点构造一个包围盒。
	 *
	 * @param theMin - 包围盒的最小点。
	 * @param theMax - 包围盒的最大点。
	 */
	constructor(theMin: Mx3dGePoint, theMax: Mx3dGePoint);
	/**
	 * 将包围盒设置为包含整个空间。
	 */
	SetWhole(): void;
	/**
	 * 将包围盒设置为一个无效状态（空的包围盒）。
	 */
	SetVoid(): void;
	/**
	 * 设置包围盒的方向。
	 *
	 * @param P - 包围盒的参考点。
	 * @param D - 包围盒的方向。
	 */
	Set(P: Mx3dGePoint, D: Mx3dGeDir): void;
	Update(aXmin: number, aYmin: number, aZmin: number, aXmax: number, aYmax: number, aZmax: number): void;
	GetGap(): number;
	SetGap(Tol: number): void;
	Enlarge(Tol: number): void;
	CornerMin(): Mx3dGePoint;
	CornerMax(): Mx3dGePoint;
	OpenXmin(): void;
	OpenXmax(): void;
	OpenYmin(): void;
	OpenYmax(): void;
	OpenZmin(): void;
	OpenZmax(): void;
	IsOpen(): boolean;
	IsOpenXmin(): boolean;
	IsOpenXmax(): boolean;
	IsOpenYmin(): boolean;
	IsOpenYmax(): boolean;
	IsOpenZmin(): boolean;
	IsOpenZmax(): boolean;
	IsWhole(): boolean;
	IsVoid(): boolean;
	IsXThin(tol: number): boolean;
	IsYThin(tol: number): boolean;
	IsZThin(tol: number): boolean;
	IsThin(tol: number): boolean;
	Transformed(T: Mx3dGeTrsf): Mx3dGeBndBox;
	AddBndBox(Other: Mx3dGeBndBox): void;
	AddPoint(P: Mx3dGePoint): void;
	AddPointDir(P: Mx3dGePoint, D: Mx3dGeDir): void;
	AddDir(D: Mx3dGeDir): void;
	IsOutPoint(P: Mx3dGePoint): boolean;
	IsOutBndBox(Other: Mx3dGeBndBox): boolean;
	IsOutBndBox(Other: Mx3dGeBndBox, T: Mx3dGeTrsf): boolean;
	IsOutTBT(T1: Mx3dGeTrsf, Other: Mx3dGeBndBox, T2: Mx3dGeTrsf): boolean;
	IsOutPPD(P1: Mx3dGePoint, P2: Mx3dGePoint, D: Mx3dGeDir): boolean;
	Distance(Other: Mx3dGeBndBox): number;
	SquareExtent(): number;
	FinitePart(): Mx3dGeBndBox;
	HasFinitePart(): boolean;
}
/**
 * 非参数几何圆
 */
export declare class Mx3dGeCircle extends Mx3dGeObject {
	/**
	 * 创建一个默认的圆对象。
	 */
	constructor();
	/**
	 * 创建一个带有坐标系和半径的圆对象。
	 * @param theA2 坐标系。
	 * @param theRadius 圆的半径。
	 */
	constructor(theA2: Mx3dGeCSYSR, theRadius: number);
	/**
	 * 设置圆的轴。
	 * @param theA1 圆的轴。
	 */
	SetAxis(theA1: Mx3dGeAxis): void;
	/**
	 * 设置圆的位置。
	 * @param theP 圆的位置点。
	 */
	SetLocation(theP: Mx3dGePoint): void;
	/**
	 * 设置圆的坐标系。
	 * @param theA2 圆的坐标系。
	 */
	SetPosition(theA2: Mx3dGeCSYSR): void;
	/**
	 * 设置圆的半径。
	 * @param theRadius 圆的半径。
	 */
	SetRadius(theRadius: number): void;
	/**
	 * 返回圆的面积。
	 * @returns 圆的面积。
	 */
	Area(): number;
	/**
	 * 返回圆的轴。
	 * @returns 圆的轴。
	 */
	Axis(): Mx3dGeAxis;
	/**
	 * 返回圆的周长。
	 * @returns 圆的周长。
	 */
	Length(): number;
	/**
	 * 返回圆的位置。
	 * @returns 圆的位置点。
	 */
	Location(): Mx3dGePoint;
	/**
	 * 返回圆的坐标系。
	 * @returns 圆的坐标系。
	 */
	Position(): Mx3dGeCSYSR;
	/**
	 * 返回圆的半径。
	 * @returns 圆的半径。
	 */
	Radius(): number;
	/**
	 * 返回圆的X轴。
	 * @returns 圆的X轴。
	 */
	XAxis(): Mx3dGeAxis;
	/**
	 * 返回圆的Y轴。
	 * @returns 圆的Y轴。
	 */
	YAxis(): Mx3dGeAxis;
	/**
	 * 计算圆到一个点的距离。
	 * @param theP 点。
	 * @returns 距离值。
	 */
	Distance(theP: Mx3dGePoint): number;
	/**
	 * 计算圆到一个点的平方距离。
	 * @param theP 点。
	 * @returns 平方距离值。
	 */
	SquareDistance(theP: Mx3dGePoint): number;
	/**
	 * 判断一个点是否在圆上。
	 * @param theP 点。
	 * @param theLinearTolerance 线性容差。
	 * @returns 如果点在圆上返回true，否则返回false。
	 */
	Contains(theP: Mx3dGePoint, theLinearTolerance: number): boolean;
	/**
	 * 根据一个点镜像当前圆。
	 * @param theP 镜像点。
	 */
	MirrorByPoint(theP: Mx3dGePoint): void;
	/**
	 * 返回根据一个点镜像后的圆。
	 * @param theP 镜像点。
	 * @returns 镜像后的圆。
	 */
	MirroredByPoint(theP: Mx3dGePoint): Mx3dGeCircle;
	/**
	 * 根据一个轴镜像当前圆。
	 * @param theA1 镜像轴。
	 */
	MirrorByAxis(theA1: Mx3dGeAxis): void;
	/**
	 * 返回根据一个轴镜像后的圆。
	 * @param theA1 镜像轴。
	 * @returns 镜像后的圆。
	 */
	MirroredByAxis(theA1: Mx3dGeAxis): Mx3dGeCircle;
	/**
	 * 根据一个坐标系镜像当前圆。
	 * @param theA2 镜像坐标系。
	 */
	MirrorByCSYSR(theA2: Mx3dGeCSYSR): void;
	/**
	 * 返回根据一个坐标系镜像后的圆。
	 * @param theA2 镜像坐标系。
	 * @returns 镜像后的圆。
	 */
	MirroredByCSYSR(theA2: Mx3dGeCSYSR): Mx3dGeCircle;
	/**
	 * 旋转当前圆。
	 * @param theA1 旋转轴。
	 * @param theAng 旋转角度。
	 */
	Rotate(theA1: Mx3dGeAxis, theAng: number): void;
	/**
	 * 返回旋转后的圆。
	 * @param theA1 旋转轴。
	 * @param theAng 旋转角度。
	 * @returns 旋转后的圆。
	 */
	Rotated(theA1: Mx3dGeAxis, theAng: number): Mx3dGeCircle;
	/**
	 * 缩放当前圆。
	 * @param theP 缩放中心点。
	 * @param theS 缩放比例。
	 */
	Scale(theP: Mx3dGePoint, theS: number): void;
	/**
	 * 返回缩放后的圆。
	 * @param theP 缩放中心点。
	 * @param theS 缩放比例。
	 * @returns 缩放后的圆。
	 */
	Scaled(theP: Mx3dGePoint, theS: number): Mx3dGeCircle;
	/**
	 * 根据变换矩阵变换当前圆。
	 * @param theT 变换矩阵。
	 */
	Transform(theT: Mx3dGeTrsf): void;
	/**
	 * 返回根据变换矩阵变换后的圆。
	 * @param theT 变换矩阵。
	 * @returns 变换后的圆。
	 */
	Transformed(theT: Mx3dGeTrsf): Mx3dGeCircle;
	/**
	 * 根据向量平移当前圆。
	 * @param theV 平移向量。
	 */
	TranslateByVec(theV: Mx3dGeVec): void;
	/**
	 * 返回根据向量平移后的圆。
	 * @param theV 平移向量。
	 * @returns 平移后的圆。
	 */
	TranslatedByVec(theV: Mx3dGeVec): Mx3dGeCircle;
	/**
	 * 根据两个点平移当前圆。
	 * @param theP1 起点。
	 * @param theP2 终点。
	 */
	TranslateBy2Points(theP1: Mx3dGePoint, theP2: Mx3dGePoint): void;
	/**
	 * 返回根据两个点平移后的圆。
	 * @param theP1 起点。
	 * @param theP2 终点。
	 * @returns 平移后的圆。
	 */
	TranslatedBy2Points(theP1: Mx3dGePoint, theP2: Mx3dGePoint): Mx3dGeCircle;
}
/**
 * 表示三维形状对象的基类。
 */
export declare class Mx3dShapeObject extends Mx3dBaseObject {
	/**
	 * 创建一个形状对象，可以选择传入一个对象参数。
	 * @param p 可选的对象参数。
	 */
	constructor(p?: object);
	/**
	 * 获取形状对象的边界框。
	 * @returns 边界框对象。
	 */
	getBndBox(): Mx3dGeBndBox;
	/**
	 * 形状反向
	 */
	reverse(): void;
	/**
	 * 获取反向后的新形状
	 * @returns 反向后的新形状
	 */
	reversed(): Mx3dShapeObject;
	/**
	 * 获取形状的朝向
	 * @returns 朝向
	 */
	Orientation(): MdGe.MxOrientation;
	/**
	 * 移动形状对象到指定位置。
	 * @param theLocation 移动的位置。
	 */
	move(theLocation: Mx3dGeLocation): void;
	/**
	 * 返回移动后的形状对象。
	 * @param theLocation 移动的位置。
	 * @returns 移动后的形状对象。
	 */
	moved(theLocation: Mx3dGeLocation): Mx3dShapeObject;
	/**
	 * 克隆当前形状对象。
	 * @returns 克隆后的形状对象。
	 */
	clone(): Mx3dShapeObject;
	/**
	 * 与另一个形状对象融合。
	 * @param theOther 另一个形状对象。
	 * @returns 融合后的形状对象。
	 */
	fuse(theOther: Mx3dShapeObject): Mx3dShapeObject;
	/**
	 * 从当前形状对象中减去另一个形状对象。
	 * @param theOther 另一个形状对象。
	 * @returns 削减后的形状对象。
	 */
	cut(theOther: Mx3dShapeObject): Mx3dShapeObject;
	/**
	 * 返回当前形状对象与另一个形状对象的公共部分。
	 * @param theOther 另一个形状对象。
	 * @returns 公共部分的形状对象。
	 */
	common(theOther: Mx3dShapeObject): Mx3dShapeObject;
	/**
	 * 返回当前形状对象与另一个形状对象的相交轮廓。
	 * @param theOther 另一个形状对象。
	 * @returns 相交轮廓的形状对象。
	 */
	section(theOther: Mx3dShapeObject): Mx3dShapeObject;
	/**
	 * 使用工具形状对象分割当前形状对象。
	 * @param theTools 工具形状对象数组。
	 * @returns 分割后的形状对象数组。
	 */
	spliter(theTools: Mx3dShapeObject[]): Mx3dShapeObject[];
	/**
	 * 根据一个点镜像当前形状对象。
	 * @param theP 镜像点。
	 */
	MirrorByPoint(theP: Mx3dGePoint): void;
	/**
	 * 返回根据一个点镜像后的形状对象。
	 * @param theP 镜像点。
	 * @returns 镜像后的形状对象。
	 */
	MirroredByPoint(theP: Mx3dGePoint): Mx3dShapeObject;
	/**
	 * 根据一个轴镜像当前形状对象。
	 * @param axis 镜像轴。
	 */
	MirrorByAxis(axis: Mx3dGeAxis): void;
	/**
	 * 返回根据一个轴镜像后的形状对象。
	 * @param axis 镜像轴。
	 * @returns 镜像后的形状对象。
	 */
	MirroredByAxis(axis: Mx3dGeAxis): Mx3dShapeObject;
	/**
	 * 根据一个坐标系镜像当前形状对象。
	 * @param csysr 镜像坐标系。
	 */
	MirrorByCSYSR(csysr: Mx3dGeCSYSR): void;
	/**
	 * 返回根据一个坐标系镜像后的形状对象。
	 * @param csysr 镜像坐标系。
	 * @returns 镜像后的形状对象。
	 */
	MirroredByCSYSR(csysr: Mx3dGeCSYSR): Mx3dShapeObject;
	/**
	 * 旋转当前形状对象。
	 * @param axis 旋转轴。
	 * @param ang 旋转角度。
	 */
	Rotate(axis: Mx3dGeAxis, ang: number): void;
	/**
	 * 返回旋转后的形状对象。
	 * @param axis 旋转轴。
	 * @param ang 旋转角度。
	 * @returns 旋转后的形状对象。
	 */
	Rotated(axis: Mx3dGeAxis, ang: number): Mx3dShapeObject;
	/**
	 * 缩放当前形状对象。
	 * @param point 缩放中心点。
	 * @param s 缩放比例。
	 */
	Scale(point: Mx3dGePoint, s: number): void;
	/**
	 * 返回缩放后的形状对象。
	 * @param point 缩放中心点。
	 * @param s 缩放比例。
	 * @returns 缩放后的形状对象。
	 */
	Scaled(point: Mx3dGePoint, s: number): Mx3dShapeObject;
	/**
	 * 根据变换矩阵变换当前形状对象。
	 * @param trsf 变换矩阵。
	 */
	Transform(trsf: Mx3dGeTrsf): void;
	/**
	 * 返回根据变换矩阵变换后的形状对象。
	 * @param trsf 变换矩阵。
	 * @returns 变换后的形状对象。
	 */
	Transformed(trsf: Mx3dGeTrsf): Mx3dShapeObject;
	/**
	 * 根据向量平移当前形状对象。
	 * @param vec 平移向量。
	 */
	TranslateByVec(vec: Mx3dGeVec): void;
	/**
	 * 根据坐标平移当前形状对象。
	 * @param theX X坐标。
	 * @param theY Y坐标。
	 * @param theZ Z坐标。
	 */
	TranslateByVec(theX: number, theY: number, theZ: number): void;
	/**
	 * 返回根据向量平移后的形状对象。
	 * @param vec 平移向量。
	 * @returns 平移后的形状对象。
	 */
	TranslatedByVec(vec: Mx3dGeVec): Mx3dShapeObject;
	/**
	 * 返回根据坐标平移后的形状对象。
	 * @param theX X坐标。
	 * @param theY Y坐标。
	 * @param theZ Z坐标。
	 * @returns 平移后的形状对象。
	 */
	TranslatedByVec(theX: number, theY: number, theZ: number): Mx3dShapeObject;
	/**
	 * 根据两个点平移当前形状对象。
	 * @param point1 起点。
	 * @param point2 终点。
	 */
	TranslateBy2Points(point1: Mx3dGePoint, point2: Mx3dGePoint): void;
	/**
	 * 返回根据两个点平移后的形状对象。
	 * @param point1 起点。
	 * @param point2 终点。
	 * @returns 平移后的形状对象。
	 */
	TranslatedBy2Points(point1: Mx3dGePoint, point2: Mx3dGePoint): Mx3dShapeObject;
	/**
	 * 遍历形状对象。
	 * @param ToFind 要查找的形状类型。
	 * @returns 形状对象数组。
	 */
	Explore(ToFind: MdGe.MxShapeEnum): Mx3dShapeObject[];
	/**
	 * 获取形状类型。
	 * @returns 形状类型。
	 */
	ShapeType(): MdGe.MxShapeEnum;
	/**
	 * 获取形状的长度，面积，体积等。
	 * @param theAspect 设置获取长度，面积还是体积。
	 * @returns 数量值。
	 */
	Quantities(theAspect: MdGe.MxQuantAspect): number;
	/**
	 * 获取形状的质心。
	 * @param theAspect 需要根据形状类型进行设置的质心类型。
	 * @returns 质心点。
	 */
	Centroid(theAspect: MdGe.MxQuantAspect): Mx3dGePoint;
}
/**
 * 表示一个面形状
 */
export declare class Mx3dShapeFace extends Mx3dShapeObject {
	constructor(p?: object);
}
/**
 * 表示一个点形状
 */
export declare class Mx3dShapeVertex extends Mx3dShapeObject {
	constructor(p?: object);
}
/**
 * 表示一个边形状
 */
export declare class Mx3dShapeEdge extends Mx3dShapeObject {
	constructor();
	/**
	 * 创建一个边形状，传入起点和终点
	 * @param pt1 起点
	 * @param pt2 终点
	 */
	constructor(pt1: Mx3dGePoint, pt2: Mx3dGePoint);
}
/**
 * 表示一个环，由边构成，可以是不闭合的
 */
export declare class Mx3dShapeWire extends Mx3dShapeObject {
	constructor(p?: object);
}
/**
 * 表示一个壳，由面构成，可以是不闭合的
 */
export declare class Mx3dShapeShell extends Mx3dShapeObject {
	constructor(p?: object);
}
/**
 * 实心形状对象
 */
export declare class Mx3dShapeSolid extends Mx3dShapeObject {
	constructor(p?: object);
}
/**
 * 复合实心实体对象，由实心实体构成
 */
export declare class Mx3dShapeCompSolid extends Mx3dShapeObject {
	constructor(p?: object);
}
/**
 * 复合形状对象，由其他类型的形状构成
 */
export declare class Mx3dShapeCompound extends Mx3dShapeObject {
	constructor(p?: object);
}
/**
 * 倒圆角算法
 */
export declare class Mx3dAlgoFillet extends Mx3dAlgoObject {
	constructor(S: Mx3dShapeObject, FShape: MdGe.MxCF3dFilletShapeEnum);
	Add(Radius: number, E: Mx3dShapeEdge): void;
	Shape(): Mx3dShapeObject;
}
/**
 * 倒斜角算法
 */
export declare class Mx3dAlgoChamfer extends Mx3dAlgoObject {
	/**
	 * 构造函数，输入需要倒斜角的对象
	 * @param S 进行倒斜角算法的对象
	 */
	constructor(S: Mx3dShapeObject);
	/**
	 * 添加对象上需要倒斜角的边
	 * @param Dis 倒斜角距离
	 * @param E 对象上的边
	 */
	Add(Dis: number, E: Mx3dShapeEdge): void;
	/**
	 * 获取倒斜角后的形状对象
	 * @returns 倒斜角后的形状对象
	 */
	Shape(): Mx3dShapeObject;
}
/**
 * 二维倒圆角算法
 */
export declare class Mx3dAlgoFillet2d extends Mx3dAlgoObject {
	/**
	 * 默认构造函数
	 */
	constructor();
	/**
   * 构造函数，传入Wire和Wire所在平面
   * @param theWire 要倒圆角的Wire
   * @param thePlane Wire所在平面
   */
	constructor(theWire: Mx3dShapeWire, thePlane: Mx3dGePlane);
	/**
	 * 构造函数，传入两条位于同一平面Edge，和所在平面
	 * @param theEdge1 第一条Edge
	 * @param theEdge2 第二条Edge
	 * @param thePlane 所在平面
	 */
	constructor(theEdge1: Mx3dShapeEdge, theEdge2: Mx3dShapeEdge, thePlane: Mx3dGePlane);
	/**
	 * 初始化函数，传入Wire和Wire所在平面
	 * @param theWire 要倒圆角的Wire
	 * @param thePlane Wire所在平面
	 */
	Init(theWire: Mx3dShapeWire, thePlane: Mx3dGePlane): void;
	/**
	 * 初始化函数，传入两条位于同一平面Edge，和所在平面
	 * @param theEdge1 第一条Edge
	 * @param theEdge2 第二条Edge
	 * @param thePlane 所在平面
	 */
	Init(theEdge1: Mx3dShapeEdge, theEdge2: Mx3dShapeEdge, thePlane: Mx3dGePlane): void;
	/**
	 * 执行圆角算法
	 * @param theRadius 圆角的半径
	 * @returns 算法是否执行成功
	 */
	Perform(theRadius: number): boolean;
	/**
	 * 获取圆角执行结果的数量
	 * @param thePoint 计算圆角处的点
	 * @returns 圆角执行结果的数量
	 */
	NbResults(thePoint: Mx3dGePoint): number;
	/**
	 *
	 * @param thePoint 设置要获取位于原曲线位于哪个交点的结果
	 * @param theEdge1 返回的第一条Edge
	 * @param theEdge2 返回的第二条Edge
	 * @param iSolution 默认-1，获取最靠近thePoint的结果
	 */
	Result(thePoint: Mx3dGePoint, theEdge1: Mx3dShapeEdge, theEdge2: Mx3dShapeEdge, iSolution?: number): Mx3dShapeEdge;
}
/**
 * 数据库对象基类
 */
export declare class Mx3dDbObject extends Mx3dBaseObject {
	constructor(p?: object);
}
export declare class Mx3dView extends Mx3dBaseObject {
	/**
	 * @internal
	 */
	constructor(p: object);
	/**
	 * 获取当前文档视图对象的文档
	 * @returns 返回文档对象
	 */
	getDocument(): Mx3dDbDocument;
	/**
	 * 移除所有
	 * @param theUpdateView 移除后是否立即更新视图
	 */
	removeAll(theUpdateView?: boolean): void;
	/**
	 * 移除选中
	 */
	removeSelected(): void;
	/**
	 * 更新显示
	 * @param isUpAllData 是否更新所有数据
	 * @param isRemoveAll 是否首先移除所有数据
	 */
	update(isUpAllData?: boolean, isRemoveAll?: boolean): void;
	/**
	 * 设置视图投影模式
	 * @param theProjection 投影模式
	 */
	setProjectionType(theProjection: MdGe.MxCameraProjection): void;
	/**
	 * 显示中心坐标轴
	 * @param theToShow true显示，false不显示
	 */
	showCenterTrihedron(theToShow: boolean): void;
	/**
	 * 视图中的所有对象缩放至适应整个视图
	 * @param theAuto 自动缩放
	 */
	fitAllObjects(theAuto: boolean): void;
	/**
	 * 开启/关闭X轴剖切面
	 * @param theToEnabled 是否开启X轴剖切面
	 */
	enableXClipPlane(theToEnabled: boolean): void;
	/**
	 * 设置X轴剖切面的位置
	 * @param thePosition 剖切平面相对于世界坐标系原点的位置
	 */
	setXClipPlaneXPosition(thePosition: number): void;
	/**
	 * 翻转X轴剖切面
	 */
	setXClipPlaneReverse(): void;
	/**
	 * 开启/关闭Y轴剖切面
	 * @param theToEnabled 是否开启Y轴剖切面
	 */
	enableYClipPlane(theToEnabled: boolean): void;
	/**
	 * 设置Y轴剖切面的位置
	 * @param thePosition 剖切平面相对于世界坐标系原点的位置
	 */
	setYClipPlaneYPosition(thePosition: number): void;
	/**
	 * 翻转Y轴剖切面
	 */
	setYClipPlaneReverse(): void;
	/**
	 * 开启/关闭Z轴剖切面
	 * @param theToEnabled 是否开启Z轴剖切面
	 */
	enableZClipPlane(theToEnabled: boolean): void;
	/**
	 * 设置Z轴剖切面的位置
	 * @param thePosition 剖切平面相对于世界坐标系原点的位置
	 */
	setZClipPlaneZPosition(thePosition: number): void;
	/**
	 * 翻转Z轴剖切面
	 */
	setZClipPlaneReverse(): void;
	/**
	 * 开启/关闭用户自定义剖切面
	 * @param theToEnabled 是否开启用户自定义剖切面
	 */
	enableCustomClipPlane(theToEnabled: boolean): void;
	/**
	 * 设置用户自定义剖切面的位置
	 * @param thePosition 剖切平面相对于世界坐标系原点的位置
	 */
	setCustomClipPlanePosition(thePosition: number): void;
	/**
	 * 翻转用户自定义剖切面
	 */
	setCustomClipPlaneReverse(): void;
	/**
	 * 设置用户自定义剖切面的法向
	 * @param x 法向的x分量
	 * @param y 法向的y分量
	 * @param z 法向的z分量
	 */
	setCustomClipPlaneDirection(x: number, y: number, z: number): void;
	/**
	 * 显示文字符号
	 * @param theSymbol 文字符号对象
	 */
	displaySymbolText(theSymbol: Mx3dSymbolText): void;
	/**
	 * 显示标注符号
	 * @param theDimension 标注符号对象
	 */
	displayDimension(theDimension: Mx3dDimObject): void;
	/**
	 * 为当前选中对象设置纹理贴图
	 * @param theFileName 图片在文件系统中的完整路径
	 */
	addModelTexture(theFileName: string): void;
	/**
	 * 移除当前选择对象的纹理贴图
	 */
	removeModelTexture(): void;
	/**
	 * 设置渐变背景色
	 * @param theColor1 颜色对象1
	 * @param theColor2 颜色对象2
	 * @param theMethod 渐变方式
	 */
	setGradientBgColor(theColor1: Mx3dGeColor, theColor2: Mx3dGeColor, theMethod: MdGe.MxGradientFillMethod): void;
	/**
	 * 设置视图方向
	 * @param theOrientation 视图方向
	 * @param theIsYup 是否Y轴向上
	 */
	setProj(theOrientation: MdGe.MxV3dTypeOfOrientation, theIsYup: boolean): void;
	/**
	 * 设置当前选中对象的颜色
	 * @param color 颜色
	 */
	setSelectedColor(color: Mx3dGeColor): void;
	/**
	 * 设置选中对象的材质
	 * @param material 材质
	 */
	setSelectedMaterial(material: Mx3dGeMaterial): void;
	/**
	 * 设置当前的显示模式
	 * @param theMode 显示模式
	 */
	setDisplayMode(theMode: MdGe.MxGlobalDisplayMode): void;
	enableDirLightSrc(theToEnabled: boolean): void;
	setCubemapBackground(theRight: string, theLeft: string, theTop: string, theBottom: string, theFront: string, theBack: string): void;
	setManipulatorEnabled(isEnabled: boolean): void;
}
/**
 * 表示颜色对象的类。
 */
export declare class Mx3dGeColor extends Mx3dBaseObject {
	/**
	 * 创建一个颜色对象。
	 */
	constructor();
	/**
	 * 使用颜色名称创建一个颜色对象。
	 * @param theColorName 颜色名称。
	 */
	constructor(theColorName: MdGe.MxNameOfColor);
	/**
	 * 使用 RGB 值和颜色类型创建一个颜色对象。
	 * @param theR 红色分量。
	 * @param theG 绿色分量。
	 * @param theB 蓝色分量。
	 * @param theType 颜色类型。
	 */
	constructor(theR: number, theG: number, theB: number, theType: MdGe.MxTypeOfColor);
	/**
	 * 获取颜色的名称。
	 * @returns 颜色名称。
	 */
	Name(): MdGe.MxNameOfColor;
	/**
	 * 设置颜色的值。
	 * @param theName 颜色名称。
	 */
	SetValues(theName: MdGe.MxNameOfColor): void;
	/**
	 * 设置颜色的值。
	 * @param theC1 红色分量。
	 * @param theC2 绿色分量。
	 * @param theC3 蓝色分量。
	 * @param theType 颜色类型。
	 */
	SetValues(theC1: number, theC2: number, theC3: number, theType: MdGe.MxTypeOfColor): void;
	/**
	 * 获取红色分量的值。
	 * @returns 红色分量。
	 */
	Red(): number;
	/**
	 * 获取绿色分量的值。
	 * @returns 绿色分量。
	 */
	Green(): number;
	/**
	 * 获取蓝色分量的值。
	 * @returns 蓝色分量。
	 */
	Blue(): number;
	/**
	 * 获取色调值。
	 * @returns 色调值。
	 */
	Hue(): number;
	/**
	 * 获取亮度值。
	 * @returns 亮度值。
	 */
	Light(): number;
	/**
	 * 改变颜色的强度。
	 * @param theDelta 强度变化量。
	 */
	ChangeIntensity(theDelta: number): void;
	/**
	 * 获取饱和度值。
	 * @returns 饱和度值。
	 */
	Saturation(): number;
	/**
	 * 改变颜色的对比度。
	 * @param theDelta 对比度变化量。
	 */
	ChangeContrast(theDelta: number): void;
	/**
	 * 判断颜色是否不同。
	 * @param theOther 另一个颜色对象。
	 * @returns 是否不同。
	 */
	IsDifferent(theOther: Mx3dGeColor): boolean;
	/**
	 * 判断颜色是否相同。
	 * @param theOther 另一个颜色对象。
	 * @returns 是否相同。
	 */
	IsEqual(theOther: Mx3dGeColor): boolean;
	/**
	 * 计算颜色之间的距离。
	 * @param theColor 另一个颜色对象。
	 * @returns 颜色距离。
	 */
	Distance(theColor: Mx3dGeColor): number;
	/**
	 * 计算颜色之间的平方距离。
	 * @param theColor 另一个颜色对象。
	 * @returns 颜色平方距离。
	 */
	SquareDistance(theColor: Mx3dGeColor): number;
	/**
	 * 计算颜色之间的 Delta E2000 差异。
	 * @param theOther 另一个颜色对象。
	 * @returns Delta E2000 差异值。
	 */
	DeltaE2000(theOther: Mx3dGeColor): number;
}
/**
 * 表示通用坐标系的类。
 */
export declare class Mx3dGeCSYS extends Mx3dGeObject {
	/**
	 * 创建一个默认的坐标系对象。
	 */
	constructor();
	/**
	 * 使用右手坐标系创建一个坐标系对象。
	 * @param csysr 右手坐标系对象。
	 */
	constructor(csysr: Mx3dGeCSYSR);
	/**
	 * 使用原点和 Z 轴方向创建一个坐标系对象。
	 * @param origin 坐标系的原点。
	 * @param z_axis 坐标系的 Z 轴方向。
	 */
	constructor(origin: Mx3dGePoint, z_axis: Mx3dGeDir);
	/**
	 * 使用原点、Z 轴方向和 X 轴向量创建一个坐标系对象。
	 * @param origin 坐标系的原点。
	 * @param z_axis 坐标系的 Z 轴方向。
	 * @param x_vec 坐标系的 X 轴向量。
	 */
	constructor(origin: Mx3dGePoint, z_axis: Mx3dGeDir, x_vec: Mx3dGeDir);
	/**
	 * 反转 X 轴方向。
	 */
	XReverse(): void;
	/**
	 * 反转 Y 轴方向。
	 */
	YReverse(): void;
	/**
	 * 反转 Z 轴方向。
	 */
	ZReverse(): void;
	/**
	 * 设置坐标系的轴。
	 * @param z_axis 坐标系的 Z 轴。
	 */
	SetAxis(z_axis: Mx3dGeAxis): void;
	/**
	 * 设置坐标系的方向。
	 * @param z_dir 坐标系的 Z 轴方向。
	 */
	SetDirection(z_dir: Mx3dGeDir): void;
	/**
	 * 设置坐标系的原点位置。
	 * @param origin 坐标系的原点。
	 */
	SetLocation(origin: Mx3dGePoint): void;
	/**
	 * 设置坐标系的原点位置。
	 * @param theX 原点的 X 坐标。
	 * @param theY 原点的 Y 坐标。
	 * @param theZ 原点的 Z 坐标。
	 */
	SetLocation(theX: number, theY: number, theZ: number): void;
	/**
	 * 设置坐标系的 X 轴方向。
	 * @param x_dir X 轴方向。
	 */
	SetXDirection(x_dir: Mx3dGeDir): void;
	/**
	 * 设置坐标系的 Y 轴方向。
	 * @param y_dir Y 轴方向。
	 */
	SetYDirection(y_dir: Mx3dGeDir): void;
	/**
	 * 计算与另一个坐标系的角度。
	 * @param other 另一个坐标系。
	 * @returns 两个坐标系之间的角度。
	 */
	Angle(other: Mx3dGeCSYS): number;
	/**
	 * 获取坐标系的轴。
	 * @returns 坐标系的轴。
	 */
	Axis(): Mx3dGeAxis;
	/**
	 * 获取右手坐标系。
	 * @returns 右手坐标系对象。
	 */
	CSYSR(): Mx3dGeCSYSR;
	/**
	 * 获取坐标系的方向。
	 * @returns 坐标系的方向。
	 */
	Direction(): Mx3dGeDir;
	/**
	 * 获取坐标系的原点位置。
	 * @returns 坐标系的原点位置。
	 */
	Location(): Mx3dGePoint;
	/**
	 * 获取坐标系的 X 轴方向。
	 * @returns X 轴方向。
	 */
	XDirection(): Mx3dGeDir;
	/**
	 * 获取坐标系的 Y 轴方向。
	 * @returns Y 轴方向。
	 */
	YDirection(): Mx3dGeDir;
	/**
	 * 判断坐标系是否为直接的。
	 * @returns 是否为直接的。
	 */
	Direct(): boolean;
	/**
	 * 判断坐标系是否与另一个坐标系共面。
	 * @param other 另一个坐标系。
	 * @param linearTolerance 线性公差。
	 * @param angularTolerance 角度公差。
	 * @returns 是否共面。
	 */
	IsCoplanarWithCSYS(other: Mx3dGeCSYS, linearTolerance: number, angularTolerance: number): boolean;
	/**
	 * 判断坐标系是否与一个轴共面。
	 * @param axis 轴对象。
	 * @param linearTolerance 线性公差。
	 * @param angularTolerance 角度公差。
	 * @returns 是否共面。
	 */
	IsCoplanarWithAxis(axis: Mx3dGeAxis, linearTolerance: number, angularTolerance: number): boolean;
	/**
	 * 通过一个点对坐标系进行镜像。
	 * @param point 镜像点。
	 */
	MirrorByPoint(point: Mx3dGePoint): void;
	/**
	 * 通过一个点对坐标系进行镜像，并返回镜像后的坐标系对象。
	 * @param point 镜像点。
	 * @returns 镜像后的坐标系对象。
	 */
	MirroredByPoint(point: Mx3dGePoint): Mx3dGeCSYS;
	/**
	 * 通过一个轴对坐标系进行镜像。
	 * @param axis 镜像轴。
	 */
	MirrorByAxis(axis: Mx3dGeAxis): void;
	/**
	 * 通过一个轴对坐标系进行镜像，并返回镜像后的坐标系对象。
	 * @param axis 镜像轴。
	 * @returns 镜像后的坐标系对象。
	 */
	MirroredByAxis(axis: Mx3dGeAxis): Mx3dGeCSYS;
	/**
	 * 通过右手坐标系对当前坐标系进行镜像。
	 * @param csysr 右手坐标系对象。
	 */
	MirrorByCSYSR(csysr: Mx3dGeCSYSR): void;
	/**
	 * 通过右手坐标系对当前坐标系进行镜像，并返回镜像后的坐标系对象。
	 * @param csysr 右手坐标系对象。
	 * @returns 镜像后的坐标系对象。
	 */
	MirroredByCSYSR(csysr: Mx3dGeCSYSR): Mx3dGeCSYS;
	/**
	 * 绕轴旋转坐标系。
	 * @param axis 旋转轴。
	 * @param ang 旋转角度。
	 */
	Rotate(axis: Mx3dGeAxis, ang: number): void;
	/**
	 * 绕轴旋转坐标系，并返回旋转后的坐标系对象。
	 * @param axis 旋转轴。
	 * @param ang 旋转角度。
	 * @returns 旋转后的坐标系对象。
	 */
	Rotated(axis: Mx3dGeAxis, ang: number): Mx3dGeCSYS;
	/**
	 * 按比例缩放坐标系。
	 * @param point 缩放的基点。
	 * @param s 缩放比例。
	 */
	Scale(point: Mx3dGePoint, s: number): void;
	/**
	 * 按比例缩放坐标系，并返回缩放后的坐标系对象。
	 * @param point 缩放的基点。
	 * @param s 缩放比例。
	 * @returns 缩放后的坐标系对象。
	 */
	Scaled(point: Mx3dGePoint, s: number): Mx3dGeCSYS;
	/**
	 * 变换坐标系。
	 * @param t 变换对象。
	 */
	Transform(t: Mx3dGeTrsf): void;
	/**
	 * 变换坐标系，并返回变换后的坐标系对象。
	 * @param t 变换对象。
	 * @returns 变换后的坐标系对象。
	 */
	Transformed(t: Mx3dGeTrsf): Mx3dGeCSYS;
	/**
	 * 按向量平移坐标系。
	 * @param vec 平移向量。
	 */
	TranslateByVec(vec: Mx3dGeVec): void;
	/**
	 * 按向量平移坐标系，并返回平移后的坐标系对象。
	 * @param vec 平移向量。
	 * @returns 平移后的坐标系对象。
	 */
	TranslatedByVec(vec: Mx3dGeVec): Mx3dGeCSYS;
	/**
	 * 通过两个点平移坐标系。
	 * @param point1 起点。
	 * @param point2 终点。
	 */
	TranslateBy2Points(point1: Mx3dGePoint, point2: Mx3dGePoint): void;
	/**
	 * 通过两个点平移坐标系，并返回平移后的坐标系对象。
	 * @param point1 起点。
	 * @param point2 终点。
	 * @returns 平移后的坐标系对象。
	 */
	TranslatedBy2Points(point1: Mx3dGePoint, point2: Mx3dGePoint): Mx3dGeCSYS;
}
/**
 * 表示右手坐标系的类。
 */
export declare class Mx3dGeCSYSR extends Mx3dGeObject {
	/**
	 * 创建一个默认的右手坐标系对象。
	 */
	constructor();
	/**
	 * 使用原点、Z 轴方向和 X 轴向量创建一个右手坐标系对象。
	 * @param origin 坐标系的原点。
	 * @param z_axis 坐标系的 Z 轴方向。
	 * @param x_vec 坐标系的 X 轴向量。
	 */
	constructor(origin: Mx3dGePoint, z_axis: Mx3dGeDir, x_vec: Mx3dGeDir);
	/**
	 * 使用原点、Z 轴方向创建一个右手坐标系对象，X Y 方向自动确定。
	 * @param origin 坐标系的原点。
	 * @param z_axis 坐标系的 Z 轴方向。
	 */
	constructor(origin: Mx3dGePoint, z_axis: Mx3dGeDir);
	/**
	 * 获取右手坐标系的原点位置。
	 * @returns 原点位置。
	 */
	Location(): Mx3dGePoint;
	/**
	 * 获取右手坐标系的 X 轴方向。
	 * @returns X 轴方向。
	 */
	XDirection(): Mx3dGeDir;
	/**
	 * 获取右手坐标系的 Y 轴方向。
	 * @returns Y 轴方向。
	 */
	YDirection(): Mx3dGeDir;
	/**
	 * 获取右手坐标系的 Z 轴方向。
	 * @returns Z 轴方向。
	 */
	Direction(): Mx3dGeDir;
	/**
	 * 设置右手坐标系的原点位置。
	 * @param origin 坐标系的原点。
	 */
	SetLocation(origin: Mx3dGePoint): void;
	/**
	 * 设置右手坐标系的原点位置。
	 * @param theX 原点的 X 坐标。
	 * @param theY 原点的 Y 坐标。
	 * @param theZ 原点的 Z 坐标。
	 */
	SetLocation(theX: number, theY: number, theZ: number): void;
	/**
	 * 设置右手坐标系的 X 轴方向。
	 * @param x_dir X 轴方向。
	 */
	SetXDirection(x_dir: Mx3dGePoint): void;
	/**
	 * 设置右手坐标系的 Y 轴方向。
	 * @param y_dir Y 轴方向。
	 */
	SetYDirection(y_dir: Mx3dGeDir): void;
	/**
	 * 设置右手坐标系的 Z 轴方向。
	 * @param z_dir Z 轴方向。
	 */
	SetDirection(z_dir: Mx3dGeDir): void;
	/**
	 * 计算与另一个右手坐标系的角度。
	 * @param theOther 另一个右手坐标系。
	 * @returns 两个坐标系之间的角度。
	 */
	Angle(theOther: Mx3dGeCSYSR): number;
	/**
	 * 获取右手坐标系的轴。
	 * @returns 右手坐标系的轴。
	 */
	Axis(): Mx3dGeAxis;
	/**
	 * 判断右手坐标系是否与另一个右手坐标系共面。
	 * @param Other 另一个右手坐标系。
	 * @param LinearTolerance 线性公差。
	 * @param AngularTolerance 角度公差。
	 * @returns 是否共面。
	 */
	IsCoplanarWithCSYSR(Other: Mx3dGeCSYSR, LinearTolerance: number, AngularTolerance: number): boolean;
	/**
	 * 判断右手坐标系是否与一个轴共面。
	 * @param A1 轴对象。
	 * @param LinearTolerance 线性公差。
	 * @param AngularTolerance 角度公差。
	 * @returns 是否共面。
	 */
	IsCoplanarWithAxis(A1: Mx3dGeAxis, LinearTolerance: number, AngularTolerance: number): boolean;
	/**
	 * 通过一个点对右手坐标系进行镜像。
	 * @param P 镜像点。
	 */
	MirrorByPoint(P: Mx3dGePoint): void;
	/**
	 * 通过一个点对右手坐标系进行镜像，并返回镜像后的右手坐标系对象。
	 * @param P 镜像点。
	 * @returns 镜像后的右手坐标系对象。
	 */
	MirroredByPoint(P: Mx3dGePoint): Mx3dGeCSYSR;
	/**
	 * 通过一个轴对右手坐标系进行镜像。
	 * @param A1 镜像轴。
	 */
	MirrorByAxis(A1: Mx3dGeAxis): void;
	/**
	 * 通过一个轴对右手坐标系进行镜像，并返回镜像后的右手坐标系对象。
	 * @param A1 镜像轴。
	 * @returns 镜像后的右手坐标系对象。
	 */
	MirroredByAxis(A1: Mx3dGeAxis): Mx3dGeCSYSR;
	/**
	 * 通过右手坐标系对当前右手坐标系进行镜像。
	 * @param A2 右手坐标系对象。
	 */
	MirrorByCSYSR(A2: Mx3dGeCSYSR): void;
	/**
	 * 通过右手坐标系对当前右手坐标系进行镜像，并返回镜像后的右手坐标系对象。
	 * @param A2 右手坐标系对象。
	 * @returns 镜像后的右手坐标系对象。
	 */
	MirroredByCSYSR(A2: Mx3dGeCSYSR): Mx3dGeCSYSR;
	/**
	 * 绕轴旋转右手坐标系。
	 * @param theA1 旋转轴。
	 * @param theAng 旋转角度。
	 */
	Rotate(theA1: Mx3dGeAxis, theAng: number): void;
	/**
	 * 绕轴旋转右手坐标系，并返回旋转后的右手坐标系对象。
	 * @param theA1 旋转轴。
	 * @param theAng 旋转角度。
	 * @returns 旋转后的右手坐标系对象。
	 */
	Rotated(theA1: Mx3dGeAxis, theAng: number): Mx3dGeCSYSR;
	/**
	 * 对右手坐标系进行缩放。
	 * @param theP 缩放中心点。
	 * @param theS 缩放比例。
	 */
	Scale(theP: Mx3dGePoint, theS: number): void;
	/**
	 * 对右手坐标系进行缩放，并返回缩放后的右手坐标系对象。
	 * @param theP 缩放中心点。
	 * @param theS 缩放比例。
	 * @returns 缩放后的右手坐标系对象。
	 */
	Scaled(theP: Mx3dGePoint, theS: number): Mx3dGeCSYSR;
	/**
	 * 变换右手坐标系。
	 * @param theT 变换矩阵。
	 */
	Transform(theT: Mx3dGeTrsf): void;
	/**
	 * 变换右手坐标系，并返回变换后的右手坐标系对象。
	 * @param theT 变换矩阵。
	 * @returns 变换后的右手坐标系对象。
	 */
	Transformed(theT: Mx3dGeTrsf): Mx3dGeCSYSR;
	/**
	 * 通过向量平移右手坐标系。
	 * @param theV 平移向量。
	 */
	TranslateByVec(theV: Mx3dGeVec): void;
	/**
	 * 通过向量平移右手坐标系，并返回平移后的右手坐标系对象。
	 * @param theV 平移向量。
	 * @returns 平移后的右手坐标系对象。
	 */
	TranslatedByVec(theV: Mx3dGeVec): Mx3dGeCSYSR;
	/**
	 * 通过两个点平移右手坐标系。
	 * @param theP1 起点。
	 * @param theP2 终点。
	 */
	TranslateBy2Points(theP1: Mx3dGePoint, theP2: Mx3dGePoint): void;
	/**
	 * 通过两个点平移右手坐标系，并返回平移后的右手坐标系对象。
	 * @param theP1 起点。
	 * @param theP2 终点。
	 * @returns 平移后的右手坐标系对象。
	 */
	TranslatedBy2Points(theP1: Mx3dGePoint, theP2: Mx3dGePoint): Mx3dGeCSYSR;
}
/**
 * 表示圆柱体的类。
 */
export declare class Mx3dGeCylinder extends Mx3dGeObject {
	/**
	 * 创建一个默认的圆柱体对象。
	 */
	constructor();
	/**
	 * 使用坐标系和半径创建一个圆柱体对象。
	 * @param theA3 坐标系。
	 * @param theRadius 圆柱体的半径。
	 */
	constructor(theA3: Mx3dGeCSYS, theRadius: number);
	/**
	 * 设置圆柱体的轴。
	 * @param theA1 圆柱体的轴。
	 */
	SetAxis(theA1: Mx3dGeAxis): void;
	/**
	 * 设置圆柱体的原点位置。
	 * @param theLoc 原点位置。
	 */
	SetLocation(theLoc: Mx3dGePoint): void;
	/**
	 * 设置圆柱体的位置。
	 * @param theA3 坐标系。
	 */
	SetPosition(theA3: Mx3dGeCSYS): void;
	/**
	 * 设置圆柱体的半径。
	 * @param theR 圆柱体的半径。
	 */
	SetRadius(theR: number): void;
	/**
	 * 反转圆柱体的 U 参数方向。
	 */
	UReverse(): void;
	/**
	 * 反转圆柱体的 V 参数方向。
	 */
	VReverse(): void;
	/**
	 * 检查圆柱体的方向是否为正向。
	 * @returns 是否为正向。
	 */
	Direct(): boolean;
	/**
	 * 获取圆柱体的轴。
	 * @returns 圆柱体的轴。
	 */
	Axis(): Mx3dGeAxis;
	/**
	 * 获取圆柱体的原点位置。
	 * @returns 原点位置。
	 */
	Location(): Mx3dGePoint;
	/**
	 * 获取圆柱体的位置。
	 * @returns 圆柱体的位置。
	 */
	Position(): Mx3dGeCSYS;
	/**
	 * 获取圆柱体的半径。
	 * @returns 圆柱体的半径。
	 */
	Radius(): number;
	/**
	 * 获取圆柱体的 X 轴。
	 * @returns X 轴。
	 */
	XAxis(): Mx3dGeAxis;
	/**
	 * 获取圆柱体的 Y 轴。
	 * @returns Y 轴。
	 */
	YAxis(): Mx3dGeAxis;
	/**
	 * 通过一个点对圆柱体进行镜像。
	 * @param theP 镜像点。
	 */
	MirrorByPoint(theP: Mx3dGePoint): void;
	/**
	 * 通过一个点对圆柱体进行镜像，并返回镜像后的圆柱体对象。
	 * @param theP 镜像点。
	 * @returns 镜像后的圆柱体对象。
	 */
	MirroredByPoint(theP: Mx3dGePoint): Mx3dGeCylinder;
	/**
	 * 通过一个轴对圆柱体进行镜像。
	 * @param theA1 镜像轴。
	 */
	MirrorByAxis(theA1: Mx3dGeAxis): void;
	/**
	 * 通过一个轴对圆柱体进行镜像，并返回镜像后的圆柱体对象。
	 * @param theA1 镜像轴。
	 * @returns 镜像后的圆柱体对象。
	 */
	MirroredByAxis(theA1: Mx3dGeAxis): Mx3dGeCylinder;
	/**
	 * 通过右手坐标系对圆柱体进行镜像。
	 * @param theA2 右手坐标系。
	 */
	MirrorByCSYSR(theA2: Mx3dGeCSYSR): void;
	/**
	 * 通过右手坐标系对圆柱体进行镜像，并返回镜像后的圆柱体对象。
	 * @param theA2 右手坐标系。
	 * @returns 镜像后的圆柱体对象。
	 */
	MirroredByCSYSR(theA2: Mx3dGeCSYSR): Mx3dGeCylinder;
	/**
	 * 绕轴旋转圆柱体。
	 * @param theA1 旋转轴。
	 * @param theAng 旋转角度。
	 */
	Rotate(theA1: Mx3dGeAxis, theAng: number): void;
	/**
	 * 绕轴旋转圆柱体，并返回旋转后的圆柱体对象。
	 * @param theA1 旋转轴。
	 * @param theAng 旋转角度。
	 * @returns 旋转后的圆柱体对象。
	 */
	Rotated(theA1: Mx3dGeAxis, theAng: number): Mx3dGeCylinder;
	/**
	 * 对圆柱体进行缩放。
	 * @param theP 缩放中心点。
	 * @param theS 缩放比例。
	 */
	Scale(theP: Mx3dGePoint, theS: number): void;
	/**
	 * 对圆柱体进行缩放，并返回缩放后的圆柱体对象。
	 * @param theP 缩放中心点。
	 * @param theS 缩放比例。
	 * @returns 缩放后的圆柱体对象。
	 */
	Scaled(theP: Mx3dGePoint, theS: number): Mx3dGeCylinder;
	/**
	 * 变换圆柱体。
	 * @param theT 变换矩阵。
	 */
	Transform(theT: Mx3dGeTrsf): void;
	/**
	 * 变换圆柱体，并返回变换后的圆柱体对象。
	 * @param theT 变换矩阵。
	 * @returns 变换后的圆柱体对象。
	 */
	Transformed(theT: Mx3dGeTrsf): Mx3dGeCylinder;
	/**
	 * 通过向量平移圆柱体。
	 * @param theV 平移向量。
	 */
	TranslateByVec(theV: Mx3dGeVec): void;
	/**
	 * 通过向量平移圆柱体，并返回平移后的圆柱体对象。
	 * @param theV 平移向量。
	 * @returns 平移后的圆柱体对象。
	 */
	TranslatedByVec(theV: Mx3dGeVec): Mx3dGeCylinder;
	/**
	 * 将圆柱体的位置沿着两个点之间的直线进行平移。
	 * @param theP1 - 第一个点，用于确定平移的起点。
	 * @param theP2 - 第二个点，用于确定平移的终点。
	 */
	TranslateBy2Points(theP1: Mx3dGePoint, theP2: Mx3dGePoint): void;
	/**
	 * 创建一个新的圆柱体对象，位置沿着两个点之间的直线进行平移。
	 * @param theP1 - 第一个点，用于确定平移的起点。
	 * @param theP2 - 第二个点，用于确定平移的终点。
	 * @returns 返回一个新的 Mx3dGeCylinder 对象，平移后的圆柱体。
	 */
	TranslatedBy2Points(theP1: Mx3dGePoint, theP2: Mx3dGePoint): Mx3dGeCylinder;
	/**
	 * 创建一个 Mx3dShapeObject 对象，表示圆柱体的形状。
	 * @param H - 圆柱体的高度。
	 * @param Angle - 可选参数，表示圆柱体的角度。
	 * @returns 返回一个新的 Mx3dShapeObject 对象，表示圆柱体的形状。
	 */
	Shape(H: number, Angle?: number): Mx3dShapeObject;
}
/**
 * 文档类，继承自 Mx3dDbObject。
 */
export declare class Mx3dDbDocument extends Mx3dDbObject {
	/**
	 * 构造函数，用于初始化 Mx3dDbDocument 实例。
	 */
	constructor();
	/**
	 * 读取模型文件并解析为文档。
	 * @param theFile - 要读取的文件对象。
	 * @param theFormat - 模型文件格式。
	 * @returns 返回一个 Promise，解析结果为布尔值，表示成功或失败。
	 */
	read(theFile: File, theFormat: MdGe.MxFormat): Promise<boolean>;
	readFile(theFilePath: string, theFormat: MdGe.MxFormat): boolean;
	/**
	 * 获取访问入口标签。
	 * @returns 返回访问入口标签对象。
	 */
	getAccessLabel(): Mx3dDbLabel;
	/**
	 * 获取入口形状标签。
	 * @returns 返回入口形状标签对象。
	 */
	getShapesLabel(): Mx3dDbLabel;
	/**
	 * 获取入口颜色标签。
	 * @returns 返回入口颜色标签对象。
	 */
	getColorsLabel(): Mx3dDbLabel;
	/**
	 * 获取入口图层标签。
	 * @returns 返回入口图层标签对象。
	 */
	getLayersLabel(): Mx3dDbLabel;
	/**
	 * 添加一个新的形状标签。
	 * @returns 返回新增的形状标签对象。
	 */
	addShapeLabel(): Mx3dDbLabel;
	/**
	 * 删除指定的形状标签。
	 * @param theLabel - 要删除的形状标签对象。
	 * @returns 返回布尔值，表示是否成功删除。
	 */
	removeShapeLabel(theLabel: Mx3dDbLabel): boolean;
	/**
	 * 删除指定的组件。
	 * @param theLabel - 要删除的标签对象。
	 */
	removeComponent(theLabel: Mx3dDbLabel): void;
	/**
	 * 获取顶级自由标签列表。
	 * @returns 返回顶级自由标签的数组。
	 */
	getTopFreeLabels(): Mx3dDbLabel[];
	/**
	 * 获取文档名称。
	 * @returns 返回文档名称的字符串。
	 */
	getDocName(): string;
	/**
	 * 获取视图对象。
	 * @returns 返回视图对象。
	 */
	getView(): Mx3dView;
	/**
	 * 添加一个新的颜色标签。
	 * @param theColor - 颜色对象。
	 * @returns 返回新增的颜色标签对象。
	 */
	addColorLabel(theColor: Mx3dGeColor): Mx3dDbLabel;
	/**
	 * 写入文档到指定路径。
	 * @param theFilePath - 文件路径。
	 * @param theFormat - 文件格式。
	 * @returns 返回布尔值，表示是否成功写入。
	 */
	write(theFilePath: string, theFormat: MdGe.MxFormat): boolean;
	/**
	 * 开启一个事务开始。
	 */
	newCommand(): void;
	/**
	 * 中止当前事务。
	 */
	abortCommand(): void;
	/**
	 * 提交当前事务。
	 * @returns 返回布尔值，表示是否成功提交。
	 */
	commitCommand(): boolean;
	/**
	 * 撤销最后一个记录的事务。
	 * @returns 返回布尔值，表示是否成功撤销。
	 */
	undo(): boolean;
	/**
	 * 重做最后一个撤销的事务。
	 * @returns 返回布尔值，表示是否成功重做。
	 */
	redo(): boolean;
}
/**
 * 文档标签类，继承自 Mx3dDbObject，提供对标签的各种操作。
 */
export declare class Mx3dDbLabel extends Mx3dDbObject {
	/**
	 * @internal
	 */
	constructor(p?: object);
	/**
	 * 设置标签的形状。
	 * @param theShape - 形状对象。
	 */
	setShape(theShape: Mx3dShapeObject): void;
	/**
	 * 获取标签的形状。
	 * @returns 返回形状对象。
	 */
	getShape(): Mx3dShapeObject;
	/**
	 * 检查标签是否有子标签。
	 * @returns 返回布尔值，表示是否有子标签。
	 */
	hasChildLabel(): boolean;
	/**
	 * 获取所有子标签。
	 * @returns 返回子标签的数组。
	 */
	getChildLabels(): Mx3dDbLabel[];
	/**
	 * 检查标签是否有父标签。
	 * @returns 返回布尔值，表示是否有父标签。
	 */
	hasParentLabel(): boolean;
	/**
	 * 获取父标签。
	 * @returns 返回父标签对象。
	 */
	getParentLabel(): Mx3dDbLabel;
	/**
	 * 添加一个子标签。
	 * @returns 返回新增的子标签对象。
	 */
	addChildLabel(): Mx3dDbLabel;
	/**
	 * 添加一个子形状。
	 * @param theShape - 形状对象。
	 * @returns 返回新增的子标签对象。
	 */
	addSubShape(theShape: Mx3dShapeObject): Mx3dDbLabel;
	/**
	 * 检查标签是否是引用。
	 * @returns 返回布尔值，表示是否是引用。
	 */
	isReference(): boolean;
	/**
	 * 检查标签是否是装配。
	 * @returns 返回布尔值，表示是否是装配。
	 */
	isAssembly(): boolean;
	/**
	 * 检查标签是否是简单形状。
	 * @returns 返回布尔值，表示是否是简单形状。
	 */
	isSimpleShape(): boolean;
	/**
	 * 检查标签是否是顶级标签。
	 * @returns 返回布尔值，表示是否是顶级标签。
	 */
	isTopLevel(): boolean;
	/**
	 * 检查标签是否是自由标签。
	 * @returns 返回布尔值，表示是否是自由标签。
	 */
	isFree(): boolean;
	/**
	 * 检查标签是否是形状。
	 * @returns 返回布尔值，表示是否是形状。
	 */
	isShape(): boolean;
	/**
	 * 检查标签是否是组件。
	 * @returns 返回布尔值，表示是否是组件。
	 */
	isComponent(): boolean;
	/**
	 * 检查标签是否是复合形状。
	 * @returns 返回布尔值，表示是否是复合形状。
	 */
	isCompound(): boolean;
	/**
	 * 检查标签是否是子形状。
	 * @returns 返回布尔值，表示是否是子形状。
	 */
	isSubShape(): boolean;
	/**
	 * 获取引用的标签。
	 * @returns 返回引用的标签对象。
	 */
	getReferredLabel(): Mx3dDbLabel;
	/**
	 * 获取标签的位置。
	 * @returns 返回位置对象。
	 */
	getLocation(): Mx3dGeLocation;
	/**
	 * 添加一个组件。
	 * @param comp - 组件标签对象。
	 * @param Loc - 位置对象。
	 * @returns 返回添加的组件标签对象。
	 */
	addComponent(comp: Mx3dDbLabel, Loc: Mx3dGeLocation): Mx3dDbLabel;
	/**
	 * 设置标签名称。
	 * @param theName - 标签名称。
	 */
	setName(theName: string): void;
	/**
	 * 检查标签是否有形状。
	 * @returns 返回布尔值，表示是否有形状。
	 */
	hasShape(): boolean;
	/**
	 * 检查标签是否设置了颜色。
	 * @returns 返回布尔值，表示是否设置了颜色。
	 */
	isSetColor(): boolean;
	/**
	 * 设置标签颜色。
	 * @param theColor - 颜色对象。
	 */
	setColor(theColor: Mx3dGeColor): void;
	/**
	 * 获取标签颜色。
	 * @returns 返回颜色对象。
	 */
	getColor(): Mx3dGeColor;
	/**
	 * 获取标签名称。
	 * @returns 返回标签名称的字符串。
	 */
	getName(): string;
	/**
	 * 获取标签条目，是一个唯一的数字字符序列。
	 * @returns 返回标签条目的字符串。
	 */
	getEntry(): string;
	/**
	 * 获取标签属性字符串，JSON字符串。
	 * @returns 返回标签属性字符串。
	 */
	getAttributeStr(): string;
	/**
	 * 设置标签形状的纹理。
	 * @param theFilePath - 纹理文件路径。
	 * @param theScaleU - U 方向缩放比例，默认值为 1。
	 * @param theScaleV - V 方向缩放比例，默认值为 1。
	 * @param theRepeatU - U 方向重复次数，默认值为 1。
	 * @param theRepeatV - V 方向重复次数，默认值为 1。
	 * @param theOriginU - U 方向起始位置，默认值为 0。
	 * @param theOriginV - V 方向起始位置，默认值为 0。
	 */
	setTexture(theFilePath: string, theScaleU?: number, theScaleV?: number, theRepeatU?: number, theRepeatV?: number, theOriginU?: number, theOriginV?: number): void;
	/**
	 * 设置标签形状的材质。
	 * @param theMaterial - 材质对象。
	 */
	setMaterial(theMaterial: Mx3dGeMaterial): void;
}
/**
 * 表示3D几何系统中的位置。
 * 提供了操作3D位置和变换的各种方法。
 */
export declare class Mx3dGeLocation extends Mx3dGeObject {
	/**
	 * 默认构造函数，创建一个单位位置。
	 */
	constructor();
	/**
	 * 构造函数，使用指定的变换初始化位置。
	 * @param theTrsf - 用于初始化位置的变换对象。
	 */
	constructor(theTrsf: Mx3dGeTrsf);
	/**
	 * 检查当前位置是否为单位变换。
	 * @returns 如果当前位置为单位变换，则返回true；否则返回false。
	 */
	IsIdentity(): boolean;
	/**
	 * 将当前位置设置为单位变换。
	 */
	Identity(): void;
	/**
	 * 获取位置的第一幂。
	 * @returns 位置的第一幂值。
	 */
	FirstPower(): number;
	/**
	 * 获取下一个位置对象。
	 * @returns 下一个位置对象。
	 */
	NextLocation(): Mx3dGeLocation;
	/**
	 * 计算当前位置的逆变换。
	 * @returns 逆变换后的位置对象。
	 */
	Inverted(): Mx3dGeLocation;
	/**
	 * 计算当前位置与另一个位置的乘积。
	 * @param theLocation - 另一个位置对象。
	 * @returns 乘积后的位置对象。
	 */
	Multiplied(theLocation: Mx3dGeLocation): Mx3dGeLocation;
	/**
	 * 计算当前位置与另一个位置的除法。
	 * @param Other - 另一个位置对象。
	 * @returns 除法后的位置对象。
	 */
	Divided(Other: Mx3dGeLocation): Mx3dGeLocation;
	/**
	 * 计算当前位置与另一个位置的左除（前除）。
	 * @param Other - 另一个位置对象。
	 * @returns 左除后的位置对象。
	 */
	Predivided(Other: Mx3dGeLocation): Mx3dGeLocation;
	/**
	 * 计算当前位置的幂运算。
	 * @param pwr - 幂的值。
	 * @returns 幂运算后的位置对象。
	 */
	Powered(pwr: number): Mx3dGeLocation;
	/**
	 * 检查当前位置是否与另一个位置相等。
	 * @param Other - 另一个位置对象。
	 * @returns 如果当前位置与另一个位置相等，则返回true；否则返回false。
	 */
	IsEqual(Other: Mx3dGeLocation): boolean;
	/**
	 * 检查当前位置是否与另一个位置不同。
	 * @param Other - 另一个位置对象。
	 * @returns 如果当前位置与另一个位置不同，则返回true；否则返回false。
	 */
	IsDifferent(Other: Mx3dGeLocation): boolean;
	/**
	 * 清除当前位置的变换。
	 */
	Clear(): void;
	/**
	 * 获取位置的缩放精度。
	 * @returns 位置的缩放精度值。
	 */
	ScalePrec(): number;
}
/**
 * 表示3D几何中的平面。
 * 平面对象可通过坐标系、点、方向向量等多种方式定义，并提供了多种几何变换和操作方法。
 */
export declare class Mx3dGePlane extends Mx3dGeObject {
	/**
	 * 默认构造函数，创建一个平面。
	 */
	constructor();
	/**
	 * 构造函数，使用指定坐标系初始化平面。
	 *
	 * @param theA3 - 用于初始化平面的坐标系（CSYS）对象。
	 */
	constructor(theA3: Mx3dGeCSYS);
	/**
	 * 构造函数，使用指定点和向量初始化平面。
	 *
	 * @param theP - 平面上的点。
	 * @param theV - 与平面垂直的向量，用于定义平面的方向。
	 */
	constructor(theP: Mx3dGePoint, theV: Mx3dGeDir);
	/**
	 * 构造函数，使用平面方程的系数初始化平面。
	 *
	 * @param theA - 平面方程中的系数A。
	 * @param theB - 平面方程中的系数B。
	 * @param theC - 平面方程中的系数C。
	 * @param theD - 平面方程中的系数D。
	 */
	constructor(theA: number, theB: number, theC: number, theD: number);
	/**
	 * 设置平面的轴向。
	 *
	 * @param theA1 - 平面轴向对象。
	 */
	SetAxis(theA1: Mx3dGeAxis): void;
	/**
	 * 设置平面的位置。
	 *
	 * @param theLoc - 平面上的一个点，用于定义平面的具体位置。
	 */
	SetLocation(theLoc: Mx3dGePoint): void;
	/**
	 * 设置平面的位置和方向。
	 *
	 * @param theA3 - 用于设置平面位置和方向的坐标系。
	 */
	SetPosition(theA3: Mx3dGeCSYS): void;
	/**
	 * 反转U方向。
	 */
	UReverse(): void;
	/**
	 * 反转V方向。
	 */
	VReverse(): void;
	/**
	 * 检查平面是否是右手坐标系。
	 *
	 * @returns 如果平面是右手坐标系，则返回true；否则返回false。
	 */
	Direct(): boolean;
	/**
	 * 获取平面的法向轴向。
	 *
	 * @returns 平面的法向轴向对象。
	 */
	Axis(): Mx3dGeAxis;
	/**
	 * 获取平面上的位置点。
	 *
	 * @returns 平面上的点对象。
	 */
	Location(): Mx3dGePoint;
	/**
	 * 获取平面的坐标系位置。
	 *
	 * @returns 平面的坐标系对象。
	 */
	Position(): Mx3dGeCSYS;
	/**
	 * 计算点到平面的距离。
	 *
	 * @param theP - 需要计算距离的点。
	 * @returns 点到平面的距离值。
	 */
	DistanceToPoint(theP: Mx3dGePoint): number;
	/**
	 * 计算两个平面之间的距离。
	 *
	 * @param theOther - 另一个平面对象。
	 * @returns 两个平面之间的距离值。
	 */
	DistanceToPlane(theOther: Mx3dGePlane): number;
	/**
	 * 计算点到平面的平方距离。
	 *
	 * @param theP - 需要计算平方距离的点。
	 * @returns 点到平面的平方距离值。
	 */
	SquareDistanceToPoint(theP: Mx3dGePoint): number;
	/**
	 * 计算两个平面之间的平方距离。
	 *
	 * @param theOther - 另一个平面对象。
	 * @returns 两个平面之间的平方距离值。
	 */
	SquareDistanceToPlane(theOther: Mx3dGePlane): number;
	/**
	 * 获取平面X轴的方向。
	 *
	 * @returns 平面X轴的轴向对象。
	 */
	XAxis(): Mx3dGeAxis;
	/**
	 * 获取平面Y轴的方向。
	 *
	 * @returns 平面Y轴的轴向对象。
	 */
	YAxis(): Mx3dGeAxis;
	/**
	 * 检查点是否在平面上。
	 *
	 * @param theP - 需要检查的点。
	 * @param theLinearTolerance - 线性容差，用于判定点是否在平面上。
	 * @returns 如果点在平面上，则返回true；否则返回false。
	 */
	Contains(theP: Mx3dGePoint, theLinearTolerance: number): boolean;
	/**
	 * 将平面通过指定点进行镜像。
	 *
	 * @param theP - 镜像点。
	 */
	MirrorByPoint(theP: Mx3dGePoint): void;
	/**
	 * 返回镜像平面对象（通过指定点）。
	 *
	 * @param theP - 镜像点。
	 * @returns 镜像后的平面对象。
	 */
	MirroredByPoint(theP: Mx3dGePoint): Mx3dGePlane;
	/**
	 * 将平面通过指定轴进行镜像。
	 *
	 * @param theA1 - 镜像轴向。
	 */
	MirrorByAxis(theA1: Mx3dGeAxis): void;
	/**
	 * 返回镜像平面对象（通过指定轴）。
	 *
	 * @param theA1 - 镜像轴向。
	 * @returns 镜像后的平面对象。
	 */
	MirroredByAxis(theA1: Mx3dGeAxis): Mx3dGePlane;
	/**
	 * 将平面通过指定坐标系进行镜像。
	 *
	 * @param theA2 - 镜像坐标系。
	 */
	MirrorByCSYSR(theA2: Mx3dGeCSYSR): void;
	/**
	 * 返回镜像平面对象（通过指定坐标系）。
	 *
	 * @param theA2 - 镜像坐标系。
	 * @returns 镜像后的平面对象。
	 */
	MirroredByCSYSR(theA2: Mx3dGeCSYSR): Mx3dGePlane;
	/**
	 * 将平面绕指定轴旋转。
	 *
	 * @param theA1 - 旋转轴向。
	 * @param theAng - 旋转角度。
	 */
	Rotate(theA1: Mx3dGeAxis, theAng: number): void;
	/**
	 * 返回旋转后的平面对象。
	 *
	 * @param theA1 - 旋转轴向。
	 * @param theAng - 旋转角度。
	 * @returns 旋转后的平面对象。
	 */
	Rotated(theA1: Mx3dGeAxis, theAng: number): Mx3dGePlane;
	/**
	 * 将平面缩放到指定点和比例。
	 *
	 * @param theP - 缩放点。
	 * @param theS - 缩放比例。
	 */
	Scale(theP: Mx3dGePoint, theS: number): void;
	/**
	 * 返回缩放后的平面对象。
	 *
	 * @param theP - 缩放点。
	 * @param theS - 缩放比例。
	 * @returns 缩放后的平面对象。
	 */
	Scaled(theP: Mx3dGePoint, theS: number): Mx3dGePlane;
	/**
	 * 对平面应用变换。
	 *
	 * @param theT - 变换矩阵。
	 */
	Transform(theT: Mx3dGeTrsf): void;
	/**
	 * 返回变换后的平面对象。
	 *
	 * @param theT - 变换矩阵。
	 * @returns 变换后的平面对象。
	 */
	Transformed(theT: Mx3dGeTrsf): Mx3dGePlane;
	/**
	 * 将平面沿指定向量平移。
	 *
	 * @param theV - 平移向量。
	 */
	TranslateByVec(theV: Mx3dGeVec): void;
	/**
	 * 返回平移后的平面对象。
	 *
	 * @param theV - 平移向量。
	 * @returns 平移后的平面对象。
	 */
	TranslatedByVec(theV: Mx3dGeVec): Mx3dGePlane;
	/**
	 * 将平面通过两点平移。
	 *
	 * @param theP1 - 第一个点。
	 * @param theP2 - 第二个点。
	 */
	TranslateBy2Points(theP1: Mx3dGePoint, theP2: Mx3dGePoint): void;
	/**
	 * 返回通过两点平移后的平面对象。
	 *
	 * @param theP1 - 第一个点。
	 * @param theP2 - 第二个点。
	 * @returns 平移后的平面对象。
	 */
	TranslatedBy2Points(theP1: Mx3dGePoint, theP2: Mx3dGePoint): Mx3dGePlane;
	/**
	 * 获取平面的拓扑形状。
	 *
	 * @returns 平面形状对象。
	 */
	Shape(): Mx3dShapeObject;
	/**
	 * 获取平面在指定范围内的拓扑形状。
	 *
	 * @param UMin - U方向的最小值。
	 * @param UMax - U方向的最大值。
	 * @param VMin - V方向的最小值。
	 * @param VMax - V方向的最大值。
	 * @returns 平面形状对象。
	 */
	Shape(UMin: number, UMax: number, VMin: number, VMax: number): Mx3dShapeObject;
}
/**
 * 表示一个文字符号，继承自 Mx3dSymbolObject
 */
export declare class Mx3dSymbolText extends Mx3dSymbolObject {
	/**
	 * 创建一个默认的文字符号对象。
	 */
	constructor();
	/**
	 * 使用文本、高度和位置创建一个文字符号对象。
	 * @param text 文本内容。
	 * @param height 文本高度。
	 * @param position 文本位置。
	 */
	constructor(text: string, height: number, position: Mx3dGePoint);
	/**
	 * 设置文本颜色。
	 * @param theColor 颜色对象。
	 */
	SetColor(theColor: Mx3dGeColor): void;
	/**
	 * 设置文本颜色。
	 * @param theR 红色分量。
	 * @param theG 绿色分量。
	 * @param theB 蓝色分量。
	 */
	SetColor(theR: number, theG: number, theB: number): void;
	/**
	 * 设置文本内容。
	 * @param text 文本内容。
	 */
	SetText(text: string): void;
	/**
	 * 设置文本位置。
	 * @param position 文本位置。
	 */
	SetPositon(position: Mx3dGePoint): void;
	/**
	 * 设置水平对齐方式。
	 * @param theHJust 水平对齐方式。
	 */
	SetHJustification(theHJust: MdGe.MxHorizontalTextAlignment): void;
	/**
	 * 设置垂直对齐方式。
	 * @param theVJust 垂直对齐方式。
	 */
	SetVJustification(theVJust: MdGe.MxVerticalTextAlignment): void;
	/**
	 * 设置文本角度。
	 * @param theAngle 文本角度。
	 */
	SetAngle(theAngle: number): void;
	/**
	 * 设置是否可缩放。
	 * @param theIsZoomable 是否可缩放。
	 */
	SetZoomable(theIsZoomable: boolean): void;
	/**
	 * 设置文本高度。
	 * @param height 文本高度。
	 */
	SetHeight(height: number): void;
	/**
	 * 设置字体样式。
	 * @param theFontAspect 字体样式。
	 */
	SetFontAspect(theFontAspect: MdGe.MxFontAspect): void;
	/**
	 * 设置字体。
	 * @param theFont 字体名称。
	 */
	SetFont(theFont: string): void;
	/**
	 * 设置3D方向。
	 * @param theOrientation 3D方向。
	 */
	SetOrientation3D(theOrientation: Mx3dGeCSYSR): void;
	/**
	 * 取消3D方向设置。
	 */
	UnsetOrientation3D(): void;
	/**
	 * 获取文本位置。
	 * @returns 文本位置。
	 */
	Position(): Mx3dGePoint;
	/**
	 * 获取字体样式。
	 * @returns 字体外观样式。
	 */
	FontAspect(): MdGe.MxFontAspect;
	/**
	 * 获取3D方向。
	 * @returns 3D方向。
	 */
	Orientation3D(): Mx3dGeCSYSR;
	/**
	 * 检查是否有3D方向。
	 * @returns 是否有3D方向。
	 */
	HasOrientation3D(): boolean;
	/**
	 * 设置是否翻转。
	 * @param theIsFlipping 是否翻转。
	 */
	SetFlipping(theIsFlipping: boolean): void;
	/**
	 * 检查是否翻转。
	 * @returns 是否翻转。
	 */
	HasFlipping(): boolean;
	/**
	 * 检查是否有自定义锚点。
	 * @returns 是否有自定义锚点。
	 */
	HasOwnAnchorPoint(): boolean;
	/**
	 * 设置是否有自定义锚点。
	 * @param theOwnAnchorPoint 是否有自定义锚点。
	 */
	SetOwnAnchorPoint(theOwnAnchorPoint: boolean): void;
	/**
	 * 设置显示类型。
	 * @param theDisplayType 显示类型。
	 */
	SetDisplayType(theDisplayType: MdGe.MxTypeOfDisplayText): void;
	/**
	 * 设置副标题颜色。
	 * @param theR 红色分量。
	 * @param theG 绿色分量。
	 * @param theB 蓝色分量。
	 */
	SetColorSubTitle(theR: number, theG: number, theB: number): void;
}
/**
 * 形状对象的向下类型转换接口
 */
export declare class Mx3dShapeDownCast {
	/**
	 * 将 Mx3dShapeObject 对象转换为 Mx3dShapeVertex 对象(Mx3dShapeObject 的实际类型需要是 Mx3dShapeVertex)
	 * @param S 需要转换的形状对象
	 * @returns 转换后的子类形状对象
	 */
	static Vertex(S: Mx3dShapeObject): Mx3dShapeVertex;
	/**
	 * 将 Mx3dShapeObject 对象转换为 Mx3dShapeEdge 对象(Mx3dShapeObject 的实际类型需要是 Mx3dShapeEdge)
	 * @param S 需要转换的形状对象
	 * @returns 转换后的子类形状对象
	 */
	static Edge(S: Mx3dShapeObject): Mx3dShapeEdge;
	/**
	 * 将 Mx3dShapeObject 对象转换为 Mx3dShapeWire 对象(Mx3dShapeObject 的实际类型需要是 Mx3dShapeWire)
	 * @param S 需要转换的形状对象
	 * @returns 转换后的子类形状对象
	 */
	static Wire(S: Mx3dShapeObject): Mx3dShapeWire;
	/**
	 * 将 Mx3dShapeObject 对象转换为 Mx3dShapeFace 对象(Mx3dShapeObject 的实际类型需要是 Mx3dShapeFace)
	 * @param S 需要转换的形状对象
	 * @returns 转换后的子类形状对象
	 */
	static Face(S: Mx3dShapeObject): Mx3dShapeFace;
	/**
	 * 将 Mx3dShapeObject 对象转换为 Mx3dShapeShell 对象(Mx3dShapeObject 的实际类型需要是 Mx3dShapeShell)
	 * @param S 需要转换的形状对象
	 * @returns 转换后的子类形状对象
	 */
	static Shell(S: Mx3dShapeObject): Mx3dShapeShell;
	/**
	 * 将 Mx3dShapeObject 对象转换为 Mx3dShapeSolid 对象(Mx3dShapeObject 的实际类型需要是 Mx3dShapeSolid)
	 * @param S 需要转换的形状对象
	 * @returns 转换后的子类形状对象
	 */
	static Solid(S: Mx3dShapeObject): Mx3dShapeSolid;
	/**
	 * 将 Mx3dShapeObject 对象转换为 Mx3dShapeCompSolid 对象(Mx3dShapeObject 的实际类型需要是 Mx3dShapeCompSolid)
	 * @param S 需要转换的形状对象
	 * @returns 转换后的子类形状对象
	 */
	static CompSolid(S: Mx3dShapeObject): Mx3dShapeCompSolid;
	/**
	 * 将 Mx3dShapeObject 对象转换为 Mx3dShapeCompound 对象(Mx3dShapeObject 的实际类型需要是 Mx3dShapeCompound)
	 * @param S 需要转换的形状对象
	 * @returns 转换后的子类形状对象
	 */
	static Compound(S: Mx3dShapeObject): Mx3dShapeCompound;
}
/**
 * 拓扑转换为参数几何的接口
 */
export declare class Mx3dBrepCastGeom {
	/**
	 * 将拓扑面转换为参数几何曲面
	 * @param F 拓扑面
	 * @returns 参数几何曲面
	 */
	static Surface(F: Mx3dShapeFace): Mx3dGeomSurface;
	/**
	 * 将拓扑边Edge转换为参数几何曲线
	 * @param E 拓扑Edge
	 * @param SEParam 返回转换后曲线的起始参数
	 * @returns 参数几何曲线
	 */
	static Curve(E: Mx3dShapeEdge, SEParam: [
		FirstParam: number,
		LastParam: number
	]): Mx3dGeomCurve;
}
/**
 * 工具类
 */
export declare class Mx3dUtils {
	/**
	 * 从URL地址加载文件到虚拟文件系统
	 * @param theFileUrl 资源URL地址
	 * @param theSaveFileName 文件在虚拟文件系统的完整路径
	 * @returns 成功后返回文件在虚拟文件系统中的绝对路径
	 */
	static LoadFileFromUrl(theFileUrl: string, theSaveFileName: string): Promise<string>;
	/**
	 * 从虚拟文件系统中读取模型文件，返回模型文件中的形状
	 * @param theFilePath 模型文件的完整路径
	 * @param theFormat 模型文件的格式
	 * @returns 模型文件中读取到的形状
	 */
	static LoadShapeFromFile(theFilePath: string, theFormat: MdGe.MxFormat): Mx3dShapeObject[];
	static LoadLocalFile(theFile: File, theFilePath: string): Promise<string>;
}
/**
 * 表示非参数几何直线的类。
 */
export declare class Mx3dGeLine extends Mx3dGeCurve {
	/**
	 * 使用轴创建一条直线。
	 * @param A1 轴对象。
	 */
	constructor(A1: Mx3dGeAxis);
	/**
	 * 使用点和方向创建一条直线。
	 * @param P 起点。
	 * @param V 方向。
	 */
	constructor(P: Mx3dGePoint, V: Mx3dGeDir);
	/**
	 * 设置直线的方向。
	 * @param V 方向对象。
	 */
	SetDirection(V: Mx3dGeDir): void;
	/**
	 * 设置直线的起点。
	 * @param P 点对象。
	 */
	SetLocation(P: Mx3dGePoint): void;
	/**
	 * 设置直线的位置。
	 * @param A1 轴对象。
	 */
	SetPosition(A1: Mx3dGeAxis): void;
	/**
	 * 获取直线的位置。
	 * @returns 轴对象。
	 */
	Position(): Mx3dGeAxis;
	/**
	 * 反转直线的方向。
	 */
	Reverse(): void;
	/**
	 * 获取反转方向后的新直线。
	 * @returns 反转后的新直线对象。
	 */
	Reversed(): Mx3dGeLine;
	/**
	 * 获取反转参数。
	 * @param U 原参数。
	 * @returns 反转后的参数。
	 */
	ReversedParameter(U: number): number;
	/**
	 * 获取直线的起始参数。
	 * @returns 起始参数。
	 */
	FirstParameter(): number;
	/**
	 * 获取直线的终止参数。
	 * @returns 终止参数。
	 */
	LastParameter(): number;
	/**
	 * 检查直线是否闭合。
	 * @returns 是否闭合。
	 */
	IsClosed(): boolean;
	/**
	 * 检查直线是否是周期性的。
	 * @returns 是否周期性。
	 */
	IsPeriodic(): boolean;
	/**
	 * 获取直线的连续性。
	 * @returns 连续性枚举值。
	 */
	Continuity(): MdGe.MxGAShapeEnum;
	/**
	 * 检查直线的连续性等级。
	 * @param N 连续性等级。
	 * @returns 是否达到指定连续性等级。
	 */
	IsCN(N: number): boolean;
	/**
	 * 获取给定参数的点。
	 * @param U 参数值。
	 * @param P 点对象。
	 */
	D0(U: number, P: Mx3dGePoint): void;
	/**
	 * 获取给定参数的点和一阶导数向量。
	 * @param U 参数值。
	 * @param P 点对象。
	 * @param V1 一阶导数向量。
	 */
	D1(U: number, P: Mx3dGePoint, V1: Mx3dGeVec): void;
	/**
	 * 获取给定参数的点、一阶导数向量和二阶导数向量。
	 * @param U 参数值。
	 * @param P 点对象。
	 * @param V1 一阶导数向量。
	 * @param V2 二阶导数向量。
	 */
	D2(U: number, P: Mx3dGePoint, V1: Mx3dGeVec, V2: Mx3dGeVec): void;
	/**
	 * 获取给定参数的点、一阶导数向量、二阶导数向量和三阶导数向量。
	 * @param U 参数值。
	 * @param P 点对象。
	 * @param V1 一阶导数向量。
	 * @param V2 二阶导数向量。
	 * @param V3 三阶导数向量。
	 */
	D3(U: number, P: Mx3dGePoint, V1: Mx3dGeVec, V2: Mx3dGeVec, V3: Mx3dGeVec): void;
	/**
	 * 获取给定参数的N阶导数向量。
	 * @param U 参数值。
	 * @param N 导数阶数。
	 * @returns N阶导数向量。
	 */
	DN(U: number, N: number): Mx3dGeVec;
	/**
	 * 对直线应用变换。
	 * @param T 变换对象。
	 */
	Transform(T: Mx3dGeTrsf): void;
	/**
	 * 获取变换后的参数。
	 * @param U 原参数。
	 * @param T 变换对象。
	 * @returns 变换后的参数。
	 */
	TransformedParameter(U: number, T: Mx3dGeTrsf): number;
	/**
	 * 获取参数变换的结果。
	 * @param T 变换对象。
	 * @returns 参数变换结果。
	 */
	ParametricTransformation(T: Mx3dGeTrsf): number;
	/**
	 * 获取直线的周期。
	 * @returns 周期。
	 */
	Period(): number;
	/**
	 * 获取给定参数对应的点。
	 * @param U 参数值。
	 * @returns 点对象。
	 */
	Value(U: number): Mx3dGePoint;
	/**
	 * 获取指定参数区间内的边界。
	 * @param p1 起始参数。
	 * @param p2 终止参数。
	 * @returns 边界对象。
	 */
	Edge(p1: number, p2: number): Mx3dShapeEdge;
}
export interface Mx3dGeomObject {
	DynCast(theObject: Mx3dGeomObject): this;
}
/**
 * 表示参数几何对象的基类。
 */
export declare class Mx3dGeomObject extends Mx3dBaseObject {
	constructor(p?: object);
	/**
	 * 通过点对几何对象进行镜像变换。
	 * @param P 点对象。
	 */
	MirrorByPoint(P: Mx3dGePoint): void;
	/**
	 * 通过轴对几何对象进行镜像变换。
	 * @param A1 轴对象。
	 */
	MirrorByAxis(A1: Mx3dGeAxis): void;
	/**
	 * 通过右手坐标系对几何对象进行镜像变换。
	 * @param A2 右手坐标系对象。
	 */
	MirrorByCSYSR(A2: Mx3dGeCSYSR): void;
	/**
	 * 旋转几何对象。
	 * @param A1 轴对象。
	 * @param Ang 旋转角度。
	 */
	Rotate(A1: Mx3dGeAxis, Ang: number): void;
	/**
	 * 缩放几何对象。
	 * @param P 点对象。
	 * @param S 缩放比例。
	 */
	Scale(P: Mx3dGePoint, S: number): void;
	/**
	 * 通过向量平移几何对象。
	 * @param V 向量对象。
	 */
	TranslateByVec(V: Mx3dGeVec): void;
	/**
	 * 通过两个点平移几何对象。
	 * @param P1 起始点对象。
	 * @param P2 终止点对象。
	 */
	TranslateBy2Points(P1: Mx3dGePoint, P2: Mx3dGePoint): void;
	/**
	 * 返回通过点镜像变换后的新几何对象。
	 * @param P 点对象。
	 * @returns 新的几何对象。
	 */
	MirroredByPoint(P: Mx3dGePoint): this;
	/**
	 * 返回通过轴镜像变换后的新几何对象。
	 * @param A1 轴对象。
	 * @returns 新的几何对象。
	 */
	MirroredByAxis(A1: Mx3dGeAxis): this;
	/**
	 * 返回通过右手坐标系镜像变换后的新几何对象。
	 * @param A2 右手坐标系对象。
	 * @returns 新的几何对象。
	 */
	MirroredByCSYSR(A2: Mx3dGeCSYSR): this;
	/**
	 * 返回旋转后的新几何对象。
	 * @param A1 轴对象。
	 * @param Ang 旋转角度。
	 * @returns 新的几何对象。
	 */
	Rotated(A1: Mx3dGeAxis, Ang: number): this;
	/**
	 * 返回缩放后的新几何对象。
	 * @param P 点对象。
	 * @param S 缩放比例。
	 * @returns 新的几何对象。
	 */
	Scaled(P: Mx3dGePoint, S: number): this;
	/**
	 * 返回变换后的新几何对象。
	 * @param T 变换对象。
	 * @returns 新的几何对象。
	 */
	Transformed(T: Mx3dGeTrsf): this;
	/**
	 * 返回通过向量平移后的新几何对象。
	 * @param V 向量对象。
	 * @returns 新的几何对象。
	 */
	TranslatedByVec(V: Mx3dGeVec): this;
	/**
	 * 返回通过两个点平移后的新几何对象。
	 * @param P1 起始点对象。
	 * @param P2 终止点对象。
	 * @returns 新的几何对象。
	 */
	TranslatedBy2Points(P1: Mx3dGePoint, P2: Mx3dGePoint): this;
}
/**
 * 表示几何曲线的类，继承自 Mx3dGeomObject。
 */
export declare class Mx3dGeomCurve extends Mx3dGeomObject {
	constructor(p?: object);
	/**
	 * 返回反向后的新几何曲线对象。
	 * @returns 新的几何曲线对象。
	 */
	Reversed(): this;
	/**
	 * 返回曲线的周期。
	 * @returns 曲线的周期。
	 */
	Period(): number;
	/**
	 * 返回给定参数 U 处的点。
	 * @param U 参数值。
	 * @returns 给定参数处的点对象。
	 */
	Value(U: number): Mx3dGePoint;
	/**
	 * 返回对象的动态类型。
	 * @returns 动态类型的字符串。
	 */
	DynamicType(): string;
}
/**
 * 表示几何二次曲线(圆锥曲线)的类，继承自 Mx3dGeomCurve。
 */
export declare class Mx3dGeomConic extends Mx3dGeomCurve {
	constructor(p?: object);
	/**
	 * 设置二次曲线的轴。
	 * @param theA1 轴对象。
	 */
	SetAxis(theA1: Mx3dGeAxis): void;
	/**
	 * 设置二次曲线的位置。
	 * @param theP 点对象。
	 */
	SetLocation(theP: Mx3dGePoint): void;
	/**
	 * 设置二次曲线的右手坐标系。
	 * @param theA2 右手坐标系对象。
	 */
	SetPosition(theA2: Mx3dGeCSYSR): void;
	/**
	 * 获取二次曲线的轴。
	 * @returns 轴对象。
	 */
	Axis(): Mx3dGeAxis;
	/**
	 * 获取二次曲线的位置。
	 * @returns 点对象。
	 */
	Location(): Mx3dGePoint;
	/**
	 * 获取二次曲线的右手坐标系。
	 * @returns 右手坐标系对象。
	 */
	Position(): Mx3dGeCSYSR;
	/**
	 * 获取二次曲线的 X 轴。
	 * @returns X 轴对象。
	 */
	XAxis(): Mx3dGeAxis;
	/**
	 * 获取二次曲线的 Y 轴。
	 * @returns Y 轴对象。
	 */
	YAxis(): Mx3dGeAxis;
	/**
	 * 反转二次曲线的方向。
	 */
	Reverse(): void;
	/**
	 * 获取二次曲线的连续性。
	 * @returns 连续性枚举值。
	 */
	Continuity(): MdGe.MxGAShapeEnum;
	/**
	 * 检查二次曲线是否具有指定阶数的连续性。
	 * @param N 阶数。
	 * @returns 如果具有指定阶数的连续性，则返回 true，否则返回 false。
	 */
	IsCN(N: number): boolean;
	/**
	 * 返回对象的动态类型。
	 * @returns 动态类型的字符串。
	 */
	DynamicType(): string;
}
/**
 * 表示参数几何圆的类，继承自 Mx3dGeomConic。
 */
export declare class Mx3dGeomCircle extends Mx3dGeomConic {
	/**
	 * 构造函数，接受坐标系和半径参数。
	 * @param theCSYSR 坐标系对象。
	 * @param theRadius 圆的半径。
	 */
	constructor(theCSYSR: Mx3dGeCSYSR, theRadius: number);
	/**
	 * 设置圆的半径。
	 * @param R 半径。
	 */
	SetRadius(R: number): void;
	/**
	 * 获取圆的半径。
	 * @returns 圆的半径。
	 */
	Radius(): number;
	/**
	 * 获取反向参数。
	 * @param U 参数值。
	 * @returns 反向参数值。
	 */
	ReversedParameter(U: number): number;
	/**
	 * 获取圆的离心率。
	 * @returns 离心率。
	 */
	Eccentricity(): number;
	/**
	 * 获取圆的第一个参数。
	 * @returns 第一个参数。
	 */
	FirstParameter(): number;
	/**
	 * 获取圆的最后一个参数。
	 * @returns 最后一个参数。
	 */
	LastParameter(): number;
	/**
	 * 检查圆是否闭合。
	 * @returns 如果圆是闭合的，返回 true；否则返回 false。
	 */
	IsClosed(): boolean;
	/**
	 * 检查圆是否周期性。
	 * @returns 如果圆是周期性的，返回 true；否则返回 false。
	 */
	IsPeriodic(): boolean;
	/**
	 * 获取参数 U 处的点坐标。
	 * @param U 参数值。
	 * @param P 点对象。
	 */
	D0(U: number, P: Mx3dGePoint): void;
	/**
	 * 获取参数 U 处的一阶导数。
	 * @param U 参数值。
	 * @param P 点对象。
	 * @param V1 一阶导数向量。
	 */
	D1(U: number, P: Mx3dGePoint, V1: Mx3dGeVec): void;
	/**
	 * 获取参数 U 处的二阶导数。
	 * @param U 参数值。
	 * @param P 点对象。
	 * @param V1 一阶导数向量。
	 * @param V2 二阶导数向量。
	 */
	D2(U: number, P: Mx3dGePoint, V1: Mx3dGeVec, V2: Mx3dGeVec): void;
	/**
	 * 获取参数 U 处的三阶导数。
	 * @param U 参数值。
	 * @param P 点对象。
	 * @param V1 一阶导数向量。
	 * @param V2 二阶导数向量。
	 * @param V3 三阶导数向量。
	 */
	D3(U: number, P: Mx3dGePoint, V1: Mx3dGeVec, V2: Mx3dGeVec, V3: Mx3dGeVec): void;
	/**
	 * 获取参数 U 处的 N 阶导数。
	 * @param U 参数值。
	 * @param N 阶数。
	 * @returns N 阶导数向量。
	 */
	DN(U: number, N: number): Mx3dGeVec;
	/**
	 * 对圆进行变换。
	 * @param T 变换对象。
	 */
	Transform(T: Mx3dGeTrsf): void;
	/**
	 * 复制圆对象。
	 * @returns 复制的圆对象。
	 */
	Copy(): Mx3dGeomObject;
	/**
	 * 获取圆的边。
	 * @param p1 第一个参数。
	 * @param p2 第二个参数。
	 * @returns 圆的边对象。
	 */
	Edge(p1: number, p2: number): Mx3dShapeEdge;
	/**
	 * 获取圆的线。
	 * @returns 圆的线对象。
	 */
	Wire(): Mx3dShapeWire;
	/**
	 * 获取圆的偏移曲线。
	 * @param Offset 偏移值。
	 * @param V 方向向量。
	 * @param isNotCheckC0 是否不检查 C0 连续性。
	 * @returns 圆的偏移曲线。
	 */
	OffsetCurve(Offset: number, V: Mx3dGeDir, isNotCheckC0: boolean): Mx3dShapeEdge;
	/**
	 * 三点画圆弧
	 * @param thePt1 第一个点
	 * @param thePt2 第二个点
	 * @param thePt3 第三个点
	 * @returns 圆弧曲线
	 */
	static MakeArcOfCircle(thePt1: UniPoint, thePt2: UniPoint, thePt3: UniPoint): Mx3dShapeEdge;
	/**
	 * @internal
	 */
	DynCast(theObject: Mx3dGeomObject): this;
	/**
	 * 父类对象转 Mx3dGeomCircle 类对象
	 * @param theObject 父类对象
	 * @returns Mx3dGeomCircle 类对象
	 */
	static DownCast(theObject: Mx3dGeomObject): Mx3dGeomCircle;
	/**
	 * 返回对象的动态类型。
	 * @returns 动态类型的字符串。
	 */
	DynamicType(): string;
}
/**
 * 表示几何直线的类，继承自 Mx3dGeomCurve。
 */
export declare class Mx3dGeomLine extends Mx3dGeomCurve {
	/**
	 * 构造函数，接受一个轴作为参数。
	 * @param A1 轴对象。
	 */
	constructor(A1: Mx3dGeAxis);
	/**
	 * 构造函数，接受一个点和一个方向作为参数。
	 * @param P 点对象。
	 * @param V 方向对象。
	 */
	constructor(P: Mx3dGePoint, V: Mx3dGeDir);
	/**
	 * 设置直线的方向。
	 * @param V 方向对象。
	 */
	SetDirection(V: Mx3dGeDir): void;
	/**
	 * 设置直线的位置。
	 * @param P 点对象。
	 */
	SetLocation(P: Mx3dGePoint): void;
	/**
	 * 设置直线的位置。
	 * @param A1 轴对象。
	 */
	SetPosition(A1: Mx3dGeAxis): void;
	/**
	 * 获取直线的位置。
	 * @returns 轴对象。
	 */
	Position(): Mx3dGeAxis;
	/**
	 * 反转直线的方向。
	 */
	Reverse(): void;
	/**
	 * 获取反向参数。
	 * @param U 参数值。
	 * @returns 反向参数值。
	 */
	ReversedParameter(U: number): number;
	/**
	 * 获取直线的第一个参数。
	 * @returns 第一个参数。
	 */
	FirstParameter(): number;
	/**
	 * 获取直线的最后一个参数。
	 * @returns 最后一个参数。
	 */
	LastParameter(): number;
	/**
	 * 检查直线是否闭合。
	 * @returns 如果直线是闭合的，返回 true；否则返回 false。
	 */
	IsClosed(): boolean;
	/**
	 * 检查直线是否周期性。
	 * @returns 如果直线是周期性的，返回 true；否则返回 false。
	 */
	IsPeriodic(): boolean;
	/**
	 * 获取直线的连续性。
	 * @returns 连续性枚举值。
	 */
	Continuity(): MdGe.MxGAShapeEnum;
	/**
	 * 检查直线是否是 C^N 连续的。
	 * @param N 阶数。
	 * @returns 如果直线是 C^N 连续的，返回 true；否则返回 false。
	 */
	IsCN(N: number): boolean;
	/**
	 * 获取参数 U 处的点坐标。
	 * @param U 参数值。
	 * @param P 点对象。
	 */
	D0(U: number, P: Mx3dGePoint): void;
	/**
	 * 获取参数 U 处的一阶导数。
	 * @param U 参数值。
	 * @param P 点对象。
	 * @param V1 一阶导数向量。
	 */
	D1(U: number, P: Mx3dGePoint, V1: Mx3dGeVec): void;
	/**
	 * 获取参数 U 处的二阶导数。
	 * @param U 参数值。
	 * @param P 点对象。
	 * @param V1 一阶导数向量。
	 * @param V2 二阶导数向量。
	 */
	D2(U: number, P: Mx3dGePoint, V1: Mx3dGeVec, V2: Mx3dGeVec): void;
	/**
	 * 获取参数 U 处的三阶导数。
	 * @param U 参数值。
	 * @param P 点对象。
	 * @param V1 一阶导数向量。
	 * @param V2 二阶导数向量。
	 * @param V3 三阶导数向量。
	 */
	D3(U: number, P: Mx3dGePoint, V1: Mx3dGeVec, V2: Mx3dGeVec, V3: Mx3dGeVec): void;
	/**
	 * 获取参数 U 处的 N 阶导数。
	 * @param U 参数值。
	 * @param N 阶数。
	 * @returns N 阶导数向量。
	 */
	DN(U: number, N: number): Mx3dGeVec;
	/**
	 * 对直线进行变换。
	 * @param T 变换对象。
	 */
	Transform(T: Mx3dGeTrsf): void;
	/**
	 * 获取变换后的参数。
	 * @param U 参数值。
	 * @param T 变换对象。
	 * @returns 变换后的参数值。
	 */
	TransformedParameter(U: number, T: Mx3dGeTrsf): number;
	/**
	 * 获取参数变换。
	 * @param T 变换对象。
	 * @returns 参数变换值。
	 */
	ParametricTransformation(T: Mx3dGeTrsf): number;
	/**
	 * 复制直线对象。
	 * @returns 复制的直线对象。
	 */
	Copy(): Mx3dGeomObject;
	/**
	 * 获取直线的边形状对象。
	 * @param p1 第一个参数。
	 * @param p2 第二个参数。
	 * @returns 直线的边形状对象。
	 */
	Edge(p1: number, p2: number): Mx3dShapeEdge;
	/**
	 * 获取直线的偏移曲线。
	 * @param Offset 偏移值。
	 * @param V 方向向量，与偏移方向垂直。
	 * @param isNotCheckC0 是否不检查 C0 连续性。
	 * @returns 直线的偏移曲线。
	 */
	OffsetCurve(Offset: number, V: Mx3dGeDir, isNotCheckC0: boolean): Mx3dShapeEdge;
	/**
	 * @internal
	 */
	DynCast(theObject: Mx3dGeomObject): this;
	/**
	 * 父类对象转 Mx3dGeomLine 类对象
	 * @param theObject 父类对象
	 * @returns Mx3dGeomLine 类对象
	 */
	static DownCast(theObject: Mx3dGeomObject): Mx3dGeomLine;
	/**
	 * 返回对象的动态类型。
	 * @returns 动态类型的字符串。
	 */
	DynamicType(): string;
}
/**
 * 表示参数几何椭圆的类，继承自 Mx3dGeomConic。
 */
export declare class Mx3dGeomEllipse extends Mx3dGeomConic {
	/**
	 * 构造函数，接受一个坐标系、长轴半径和短轴半径作为参数。
	 * @param A2 坐标系对象。
	 * @param MajorRadius 长轴半径。
	 * @param MinorRadius 短轴半径。
	 */
	constructor(A2: Mx3dGeCSYSR, MajorRadius: number, MinorRadius: number);
	/**
	 * 设置长轴半径。
	 * @param MajorRadius 长轴半径。
	 */
	SetMajorRadius(MajorRadius: number): void;
	/**
	 * 设置短轴半径。
	 * @param MinorRadius 短轴半径。
	 */
	SetMinorRadius(MinorRadius: number): void;
	/**
	 * 获取反向参数。
	 * @param U 参数值。
	 * @returns 反向参数值。
	 */
	ReversedParameter(U: number): number;
	/**
	 * 获取第一个准线。
	 * @returns 准线对象。
	 */
	Directrix1(): Mx3dGeAxis;
	/**
	 * 获取第二个准线。
	 * @returns 准线对象。
	 */
	Directrix2(): Mx3dGeAxis;
	/**
	 * 获取离心率。
	 * @returns 离心率值。
	 */
	Eccentricity(): number;
	/**
	 * 获取焦距。
	 * @returns 焦距值。
	 */
	Focal(): number;
	/**
	 * 获取第一个焦点。
	 * @returns 第一个焦点对象。
	 */
	Focus1(): Mx3dGePoint;
	/**
	 * 获取第二个焦点。
	 * @returns 第二个焦点对象。
	 */
	Focus2(): Mx3dGePoint;
	/**
	 * 获取长轴半径。
	 * @returns 长轴半径值。
	 */
	MajorRadius(): number;
	/**
	 * 获取短轴半径。
	 * @returns 短轴半径值。
	 */
	MinorRadius(): number;
	/**
	 * 获取参数。
	 * @returns 参数值。
	 */
	Parameter(): number;
	/**
	 * 获取椭圆的第一个参数。
	 * @returns 第一个参数。
	 */
	FirstParameter(): number;
	/**
	 * 获取椭圆的最后一个参数。
	 * @returns 最后一个参数。
	 */
	LastParameter(): number;
	/**
	 * 检查椭圆是否闭合。
	 * @returns 如果椭圆是闭合的，返回 true；否则返回 false。
	 */
	IsClosed(): boolean;
	/**
	 * 检查椭圆是否周期性。
	 * @returns 如果椭圆是周期性的，返回 true；否则返回 false。
	 */
	IsPeriodic(): boolean;
	/**
	 * 获取参数 U 处的点坐标。
	 * @param U 参数值。
	 * @param P 点对象。
	 */
	D0(U: number, P: Mx3dGePoint): void;
	/**
	 * 获取参数 U 处的一阶导数。
	 * @param U 参数值。
	 * @param P 点对象。
	 * @param V1 一阶导数向量。
	 */
	D1(U: number, P: Mx3dGePoint, V1: Mx3dGeVec): void;
	/**
	 * 获取参数 U 处的二阶导数。
	 * @param U 参数值。
	 * @param P 点对象。
	 * @param V1 一阶导数向量。
	 * @param V2 二阶导数向量。
	 */
	D2(U: number, P: Mx3dGePoint, V1: Mx3dGeVec, V2: Mx3dGeVec): void;
	/**
	 * 获取参数 U 处的三阶导数。
	 * @param U 参数值。
	 * @param P 点对象。
	 * @param V1 一阶导数向量。
	 * @param V2 二阶导数向量。
	 * @param V3 三阶导数向量。
	 */
	D3(U: number, P: Mx3dGePoint, V1: Mx3dGeVec, V2: Mx3dGeVec, V3: Mx3dGeVec): void;
	/**
	 * 获取参数 U 处的 N 阶导数。
	 * @param U 参数值。
	 * @param N 阶数。
	 * @returns N 阶导数向量。
	 */
	DN(U: number, N: number): Mx3dGeVec;
	/**
	 * 对椭圆进行变换。
	 * @param T 变换对象。
	 */
	Transform(T: Mx3dGeTrsf): void;
	/**
	 * 复制椭圆对象。
	 * @returns 复制的椭圆对象。
	 */
	Copy(): Mx3dGeomObject;
	/**
	 * 获取椭圆的边形状对象。
	 * @param p1 第一个参数。
	 * @param p2 第二个参数。
	 * @returns 椭圆的边形状对象。
	 */
	Edge(p1: number, p2: number): Mx3dShapeEdge;
	/**
	 * 获取椭圆的Wire形状对象。
	 * @returns 椭圆的Wire形状对象。
	 */
	Wire(): Mx3dShapeWire;
	/**
	 * 获取椭圆的偏移曲线。
	 * @param Offset 偏移值。
	 * @param V 方向向量，与偏移方向垂直。
	 * @param isNotCheckC0 是否不检查 C0 连续性。
	 * @returns 椭圆的偏移曲线。
	 */
	OffsetCurve(Offset: number, V: Mx3dGeDir, isNotCheckC0: boolean): Mx3dShapeEdge;
	/**
	 * @internal
	 */
	DynCast(theObject: Mx3dGeomObject): this;
	/**
	 * 父类对象转 Mx3dGeomEllipse 类对象
	 * @param theObject 父类对象
	 * @returns Mx3dGeomEllipse 类对象
	 */
	static DownCast(theObject: Mx3dGeomObject): Mx3dGeomEllipse;
	/**
	 * 返回对象的动态类型。
	 * @returns 动态类型的字符串。
	 */
	DynamicType(): string;
}
/**
 * 表示参数几何双曲线的类，继承自 Mx3dGeomConic。
 */
export declare class Mx3dGeomHyperbola extends Mx3dGeomConic {
	/**
	 * 构造函数，接受一个坐标系、长轴半径和短轴半径作为参数。
	 * @param A2 坐标系对象。
	 * @param MajorRadius 长轴半径。
	 * @param MinorRadius 短轴半径。
	 */
	constructor(A2: Mx3dGeCSYSR, MajorRadius: number, MinorRadius: number);
	/**
	 * 设置长轴半径。
	 * @param MajorRadius 长轴半径。
	 */
	SetMajorRadius(MajorRadius: number): void;
	/**
	 * 设置短轴半径。
	 * @param MinorRadius 短轴半径。
	 */
	SetMinorRadius(MinorRadius: number): void;
	/**
	 * 获取反向参数。
	 * @param U 参数值。
	 * @returns 反向参数值。
	 */
	ReversedParameter(U: number): number;
	/**
	 * 获取双曲线的第一个参数。
	 * @returns 第一个参数。
	 */
	FirstParameter(): number;
	/**
	 * 获取双曲线的最后一个参数。
	 * @returns 最后一个参数。
	 */
	LastParameter(): number;
	/**
	 * 检查双曲线是否闭合。
	 * @returns 如果双曲线是闭合的，返回 true；否则返回 false。
	 */
	IsClosed(): boolean;
	/**
	 * 检查双曲线是否周期性。
	 * @returns 如果双曲线是周期性的，返回 true；否则返回 false。
	 */
	IsPeriodic(): boolean;
	/**
	 * 获取第一个渐近线。
	 * @returns 渐近线对象。
	 */
	Asymptote1(): Mx3dGeAxis;
	/**
	 * 获取第二个渐近线。
	 * @returns 渐近线对象。
	 */
	Asymptote2(): Mx3dGeAxis;
	/**
	 * 获取第一个共轭支。
	 * @returns 第一个共轭支对象。
	 */
	ConjugateBranch1(): Mx3dGeomHyperbola;
	/**
	 * 获取第二个共轭支。
	 * @returns 第二个共轭支对象。
	 */
	ConjugateBranch2(): Mx3dGeomHyperbola;
	/**
	 * 获取第一个准线。
	 * @returns 准线对象。
	 */
	Directrix1(): Mx3dGeAxis;
	/**
	 * 获取第二个准线。
	 * @returns 准线对象。
	 */
	Directrix2(): Mx3dGeAxis;
	/**
	 * 获取离心率。
	 * @returns 离心率值。
	 */
	Eccentricity(): number;
	/**
	 * 获取焦距。
	 * @returns 焦距值。
	 */
	Focal(): number;
	/**
	 * 获取第一个焦点。
	 * @returns 第一个焦点对象。
	 */
	Focus1(): Mx3dGePoint;
	/**
	 * 获取第二个焦点。
	 * @returns 第二个焦点对象。
	 */
	Focus2(): Mx3dGePoint;
	/**
	 * 获取长轴半径。
	 * @returns 长轴半径值。
	 */
	MajorRadius(): number;
	/**
	 * 获取短轴半径。
	 * @returns 短轴半径值。
	 */
	MinorRadius(): number;
	/**
	 * 获取另一支双曲线。
	 * @returns 另一支双曲线对象。
	 */
	OtherBranch(): Mx3dGeomHyperbola;
	/**
	 * 获取参数。
	 * @returns 参数值。
	 */
	Parameter(): number;
	/**
	 * 获取参数 U 处的点坐标。
	 * @param U 参数值。
	 * @param P 点对象。
	 */
	D0(U: number, P: Mx3dGePoint): void;
	/**
	 * 获取参数 U 处的一阶导数。
	 * @param U 参数值。
	 * @param P 点对象。
	 * @param V1 一阶导数向量。
	 */
	D1(U: number, P: Mx3dGePoint, V1: Mx3dGeVec): void;
	/**
	 * 获取参数 U 处的二阶导数。
	 * @param U 参数值。
	 * @param P 点对象。
	 * @param V1 一阶导数向量。
	 * @param V2 二阶导数向量。
	 */
	D2(U: number, P: Mx3dGePoint, V1: Mx3dGeVec, V2: Mx3dGeVec): void;
	/**
	 * 获取参数 U 处的三阶导数。
	 * @param U 参数值。
	 * @param P 点对象。
	 * @param V1 一阶导数向量。
	 * @param V2 二阶导数向量。
	 * @param V3 三阶导数向量。
	 */
	D3(U: number, P: Mx3dGePoint, V1: Mx3dGeVec, V2: Mx3dGeVec, V3: Mx3dGeVec): void;
	/**
	 * 获取参数 U 处的 N 阶导数。
	 * @param U 参数值。
	 * @param N 阶数。
	 * @returns N 阶导数向量。
	 */
	DN(U: number, N: number): Mx3dGeVec;
	/**
	 * 对双曲线进行变换。
	 * @param T 变换对象。
	 */
	Transform(T: Mx3dGeTrsf): void;
	/**
	 * 复制双曲线对象。
	 * @returns 复制的双曲线对象。
	 */
	Copy(): Mx3dGeomObject;
	/**
	 * 获取双曲线的边。
	 * @param p1 第一个参数。
	 * @param p2 第二个参数。
	 * @returns 双曲线的边对象。
	 */
	Edge(p1: number, p2: number): Mx3dShapeEdge;
	/**
	 * 获取双曲线的偏移曲线。
	 * @param Offset 偏移量。
	 * @param V 方向向量，与偏移方向垂直。
	 * @param isNotCheckC0 是否检查 C0 连续性。
	 * @returns 偏移曲线的边对象。
	 */
	OffsetCurve(Offset: number, V: Mx3dGeDir, isNotCheckC0: boolean): Mx3dShapeEdge;
	/**
	 * @internal
	 */
	DynCast(theObject: Mx3dGeomObject): this;
	/**
	 * 父类对象转 Mx3dGeomHyperbola 类对象
	 * @param theObject 父类对象
	 * @returns Mx3dGeomHyperbola 类对象
	 */
	static DownCast(theObject: Mx3dGeomObject): Mx3dGeomHyperbola;
	/**
	 * 返回对象的动态类型。
	 * @returns 动态类型的字符串。
	 */
	DynamicType(): string;
}
export declare class Mx3dGeomParabola extends Mx3dGeomConic {
	/**
	 * 构造函数，接受一个坐标系和焦距作为参数。
	 * @param A2 坐标系对象。
	 * @param Focal 焦距。
	 */
	constructor(A2: Mx3dGeCSYSR, Focal: number);
	/**
	 * 设置焦距。
	 * @param Focal 焦距。
	 */
	SetFocal(Focal: number): void;
	/**
	 * 获取反向参数。
	 * @param U 参数值。
	 * @returns 反向参数值。
	 */
	ReversedParameter(U: number): number;
	/**
	 * 获取抛物线的第一个参数。
	 * @returns 第一个参数。
	 */
	FirstParameter(): number;
	/**
	 * 获取抛物线的最后一个参数。
	 * @returns 最后一个参数。
	 */
	LastParameter(): number;
	/**
	 * 检查抛物线是否闭合。
	 * @returns 如果抛物线是闭合的，返回 true；否则返回 false。
	 */
	IsClosed(): boolean;
	/**
	 * 检查抛物线是否周期性。
	 * @returns 如果抛物线是周期性的，返回 true；否则返回 false。
	 */
	IsPeriodic(): boolean;
	/**
	 * 获取准线。
	 * @returns 准线所在轴对象。
	 */
	Directrix(): Mx3dGeAxis;
	/**
	 * 获取离心率。
	 * @returns 离心率值。
	 */
	Eccentricity(): number;
	/**
	 * 获取焦点。
	 * @returns 焦点对象。
	 */
	Focus(): Mx3dGePoint;
	/**
	 * 获取焦距。
	 * @returns 焦距值。
	 */
	Focal(): number;
	/**
	 * 获取参数。
	 * @returns 参数值。
	 */
	Parameter(): number;
	/**
	 * 获取参数 U 处的点坐标。
	 * @param U 参数值。
	 * @param P 点对象。
	 */
	D0(U: number, P: Mx3dGePoint): void;
	/**
	 * 获取参数 U 处的一阶导数。
	 * @param U 参数值。
	 * @param P 点对象。
	 * @param V1 一阶导数向量。
	 */
	D1(U: number, P: Mx3dGePoint, V1: Mx3dGeVec): void;
	/**
	 * 获取参数 U 处的二阶导数。
	 * @param U 参数值。
	 * @param P 点对象。
	 * @param V1 一阶导数向量。
	 * @param V2 二阶导数向量。
	 */
	D2(U: number, P: Mx3dGePoint, V1: Mx3dGeVec, V2: Mx3dGeVec): void;
	/**
	 * 获取参数 U 处的三阶导数。
	 * @param U 参数值。
	 * @param P 点对象。
	 * @param V1 一阶导数向量。
	 * @param V2 二阶导数向量。
	 * @param V3 三阶导数向量。
	 */
	D3(U: number, P: Mx3dGePoint, V1: Mx3dGeVec, V2: Mx3dGeVec, V3: Mx3dGeVec): void;
	/**
	 * 获取参数 U 处的 N 阶导数。
	 * @param U 参数值。
	 * @param N 阶数。
	 * @returns N 阶导数向量。
	 */
	DN(U: number, N: number): Mx3dGeVec;
	/**
	 * 对抛物线进行变换。
	 * @param T 变换对象。
	 */
	Transform(T: Mx3dGeTrsf): void;
	/**
	 * 获取变换后的参数。
	 * @param U 参数值。
	 * @param T 变换对象。
	 * @returns 变换后的参数值。
	 */
	TransformedParameter(U: number, T: Mx3dGeTrsf): number;
	/**
	 * 获取参数变换。
	 * @param T 变换对象。
	 * @returns 参数变换值。
	 */
	ParametricTransformation(T: Mx3dGeTrsf): number;
	/**
	 * 复制抛物线对象。
	 * @returns 复制的抛物线对象。
	 */
	Copy(): Mx3dGeomObject;
	/**
	 * 获取抛物线的边。
	 * @param p1 第一个参数。
	 * @param p2 第二个参数。
	 * @returns 抛物线的边对象。
	 */
	Edge(p1: number, p2: number): Mx3dShapeEdge;
	/**
	 * 获取抛物线的偏移曲线。
	 * @param Offset 偏移量。
	 * @param V 方向向量，与偏移方向垂直。
	 * @param isNotCheckC0 是否检查 C0 连续性。
	 * @returns 偏移曲线的边对象。
	 */
	OffsetCurve(Offset: number, V: Mx3dGeDir, isNotCheckC0: boolean): Mx3dShapeEdge;
	/**
	 * @internal
	 */
	DynCast(theObject: Mx3dGeomObject): this;
	/**
	 * 父类对象转 Mx3dGeomParabola 类对象
	 * @param theObject 父类对象
	 * @returns Mx3dGeomParabola 类对象
	 */
	static DownCast(theObject: Mx3dGeomObject): Mx3dGeomParabola;
	/**
	 * 返回对象的动态类型。
	 * @returns 动态类型的字符串。
	 */
	DynamicType(): string;
}
/**
 * 基础几何建模基类，继承自 Mx3dBaseObject
 */
export declare class Mx3dMkObject extends Mx3dBaseObject {
	/**
	 * @internal
	 */
	constructor(p?: object);
}
/**
 * 表示建模长方体的类，继承自 Mx3dMkObject
 */
export declare class Mx3dMkBox extends Mx3dMkObject {
	/**
	 * 构造函数，接受长方体的两个对角点作为参数。
	 * @param thePnt1 第一个对角点。
	 * @param thePnt2 第二个对角点。
	 */
	constructor(thePnt1: UniPoint, thePnt2: UniPoint);
	/**
	 * 构造函数，以世界坐标系的(0, 0, 0)点作为第一个角点，接受三个数值(theDX, theDY, theDZ)作为第二个角点参数。
	 * @param theDX 第二个角点X方向分量。
	 * @param theDY 第二个角点Y方向分量。
	 * @param theDZ 第二个角点Z方向分量。
	 */
	constructor(theDX: number, theDY: number, theDZ: number);
	/**
	 * 构造函数，以 theAxes 坐标系的(0, 0, 0)点作为第一个角点，接受三个数值(theDX, theDY, theDZ)作为第二个角点参数。
	 * @param theAxes 坐标系对象。
	 * @param theDX 第二个角点X方向分量。
	 * @param theDY 第二个角点Y方向分量。
	 * @param theDZ 第二个角点Z方向分量。
	 */
	constructor(theAxes: Mx3dGeCSYSR, theDX: number, theDY: number, theDZ: number);
	/**
	 * 执行长方体的建模算法。
	 */
	Build(): void;
	/**
	 * 获取长方体的拓扑形状。
	 * @returns 拓扑形状。
	 */
	Shape(): Mx3dShapeObject;
	/**
	 * 获取长方体的拓扑外壳形状。
	 * @returns 拓扑壳形状。
	 */
	Shell(): Mx3dShapeShell;
	/**
	 * 获取长方体的拓扑实体形状。
	 * @returns 拓扑实体形状。
	 */
	Solid(): Mx3dShapeSolid;
	/**
	 * 获取长方体的底面拓扑面形状。
	 * @returns 拓扑面形状。
	 */
	BottomFace(): Mx3dShapeFace;
	/**
	 * 获取长方体的背面拓扑面形状。
	 * @returns 拓扑面形状。
	 */
	BackFace(): Mx3dShapeFace;
	/**
	 * 获取长方体的前面拓扑面形状。
	 * @returns 拓扑面形状。
	 */
	FrontFace(): Mx3dShapeFace;
	/**
	 * 获取长方体的左面拓扑面形状。
	 * @returns 拓扑面形状。
	 */
	LeftFace(): Mx3dShapeFace;
	/**
	 * 获取长方体的右面拓扑面形状。
	 * @returns 拓扑面形状。
	 */
	RightFace(): Mx3dShapeFace;
	/**
	 * 获取长方体的顶面拓扑面形状。
	 * @returns 拓扑面形状。
	 */
	TopFace(): Mx3dShapeFace;
	/**
	 * 检查建模算法是否执行完成。
	 * @returns 建模算法执行是否完成的标志，true 完成，false 失败。
	 */
	IsDone(): boolean;
}
/**
 * 表示建模圆锥的类，继承自 Mx3dMkObject
 */
export declare class Mx3dMkCone extends Mx3dMkObject {
	/**
	 * 构造函数，接受圆锥的坐标系、底面半径、顶面半径、高度，以及可选的角度参数。
	 * @param Axes 坐标系对象。
	 * @param R1 底面半径。
	 * @param R2 顶面半径。
	 * @param H 高度。
	 * @param angle （可选）角度。
	 */
	constructor(Axes: Mx3dGeCSYSR, R1: number, R2: number, H: number, angle?: number);
	/**
	 * 执行圆锥的建模算法。
	 */
	Build(): void;
	/**
	 * 获取圆锥的拓扑形状。
	 * @returns 拓扑形状。
	 */
	Shape(): Mx3dShapeObject;
	/**
	 * 获取圆锥的拓扑面形状。
	 * @returns 拓扑面形状。
	 */
	Face(): Mx3dShapeFace;
	/**
	 * 获取圆锥的拓扑外壳形状。
	 * @returns 拓扑壳形状。
	 */
	Shell(): Mx3dShapeShell;
	/**
	 * 获取圆锥的拓扑实体形状。
	 * @returns 拓扑实体形状。
	 */
	Solid(): Mx3dShapeSolid;
	/**
	 * 检查建模算法是否执行完成。
	 * @returns 建模算法执行是否完成的标志，true 完成，false 失败。
	 */
	IsDone(): boolean;
}
/**
 * 表示建模圆柱的类，继承自 Mx3dMkObject
 */
export declare class Mx3dMkCylinder extends Mx3dMkObject {
	/**
	 * 构造函数，接受圆柱的坐标系、半径、高度，以及可选的角度参数。
	 * @param Axes 坐标系对象。
	 * @param R 半径。
	 * @param H 高度。
	 * @param Angle （可选）角度。
	 */
	constructor(Axes: Mx3dGeCSYSR, R: number, H: number, Angle?: number);
	/**
	 * 执行圆柱的建模算法。
	 */
	Build(): void;
	/**
	 * 获取圆柱的拓扑形状。
	 * @returns 拓扑形状。
	 */
	Shape(): Mx3dShapeObject;
	/**
	 * 获取圆柱的拓扑面形状。
	 * @returns 拓扑面形状。
	 */
	Face(): Mx3dShapeFace;
	/**
	 * 获取圆柱的拓扑外壳形状。
	 * @returns 拓扑壳形状。
	 */
	Shell(): Mx3dShapeShell;
	/**
	 * 获取圆柱的拓扑实体形状。
	 * @returns 拓扑实体形状。
	 */
	Solid(): Mx3dShapeSolid;
	/**
	 * 检查建模算法是否执行完成。
	 * @returns 建模算法执行是否完成的标志，true 完成，false 失败。
	 */
	IsDone(): boolean;
}
/**
 * 表示旋转体建模的类，继承自 Mx3dMkObject
 */
export declare class Mx3dMkRevol extends Mx3dMkObject {
	/**
	 * 构造函数，接受一个形状对象、旋转轴和可选的旋转角度参数。
	 * @param S 形状对象。
	 * @param A 旋转轴。
	 * @param D （可选）旋转角度。
	 */
	constructor(S: Mx3dShapeObject, A: Mx3dGeAxis, D?: number);
	/**
	 * 执行旋转体的建模算法。
	 */
	Build(): void;
	/**
	 * 获取旋转体的拓扑形状。
	 * @returns 拓扑形状。
	 */
	Shape(): Mx3dShapeObject;
	/**
	 * 检查建模算法是否执行完成。
	 * @returns 建模算法执行是否完成的标志，true 完成，false 失败。
	 */
	IsDone(): boolean;
}
/**
 * 表示建模球体的类，继承自 Mx3dMkObject
 */
export declare class Mx3dMkSphere extends Mx3dMkObject {
	/**
	 * 构造函数，接受坐标系对象和球体半径作为参数。
	 * @param Axes 坐标系对象。
	 * @param R 球体半径。
	 */
	constructor(Axes: Mx3dGeCSYSR, R: number);
	/**
	 * 构造函数，接受坐标系对象、球体半径和一个角度参数。
	 * @param Axes 坐标系对象。
	 * @param R 球体半径。
	 * @param angle 角度参数。
	 */
	constructor(Axes: Mx3dGeCSYSR, R: number, angle: number);
	/**
	 * 构造函数，接受坐标系对象、球体半径和两个角度参数。
	 * @param Axes 坐标系对象。
	 * @param R 球体半径。
	 * @param angle1 第一个角度参数。
	 * @param angle2 第二个角度参数。
	 */
	constructor(Axes: Mx3dGeCSYSR, R: number, angle1: number, angle2: number);
	/**
	 * 构造函数，接受坐标系对象、球体半径和三个角度参数。
	 * @param Axes 坐标系对象。
	 * @param R 球体半径。
	 * @param angle1 第一个角度参数。
	 * @param angle2 第二个角度参数。
	 * @param angle3 第三个角度参数。
	 */
	constructor(Axes: Mx3dGeCSYSR, R: number, angle1: number, angle2: number, angle3: number);
	/**
	 * 执行球体的建模算法。
	 */
	Build(): void;
	/**
	 * 获取球体的拓扑形状。
	 * @returns 拓扑形状。
	 */
	Shape(): Mx3dShapeObject;
	/**
	 * 获取球体的拓扑面形状。
	 * @returns 拓扑面形状。
	 */
	Face(): Mx3dShapeFace;
	/**
	 * 获取球体的拓扑外壳形状。
	 * @returns 拓扑壳形状。
	 */
	Shell(): Mx3dShapeShell;
	/**
	 * 获取球体的拓扑实体形状。
	 * @returns 拓扑实体形状。
	 */
	Solid(): Mx3dShapeSolid;
	/**
	 * 检查建模算法是否执行完成。
	 * @returns 建模算法执行是否完成的标志，true 完成，false 失败。
	 */
	IsDone(): boolean;
}
/**
 * 表示建模圆环体的类，继承自 Mx3dMkObject
 */
export declare class Mx3dMkTorus extends Mx3dMkObject {
	/**
	 * 构造函数，接受坐标系对象、圆环体主半径和次半径作为参数。
	 * @param Axes 坐标系对象。
	 * @param R1 圆环体主半径。
	 * @param R2 圆环体次半径。
	 */
	constructor(Axes: Mx3dGeCSYSR, R1: number, R2: number);
	/**
	 * 构造函数，接受坐标系对象、圆环体主半径、次半径和一个角度参数。
	 * @param Axes 坐标系对象。
	 * @param R1 圆环体主半径。
	 * @param R2 圆环体次半径。
	 * @param angle 角度参数。
	 */
	constructor(Axes: Mx3dGeCSYSR, R1: number, R2: number, angle: number);
	/**
	 * 构造函数，接受坐标系对象、圆环体主半径、次半径和两个角度参数。
	 * @param Axes 坐标系对象。
	 * @param R1 圆环体主半径。
	 * @param R2 圆环体次半径。
	 * @param angle1 第一个角度参数。
	 * @param angle2 第二个角度参数。
	 */
	constructor(Axes: Mx3dGeCSYSR, R1: number, R2: number, angle1: number, angle2: number);
	/**
	 * 构造函数，接受坐标系对象、圆环体主半径、次半径和三个角度参数。
	 * @param Axes 坐标系对象。
	 * @param R1 圆环体主半径。
	 * @param R2 圆环体次半径。
	 * @param angle1 第一个角度参数。
	 * @param angle2 第二个角度参数。
	 * @param angle3 第三个角度参数。
	 */
	constructor(Axes: Mx3dGeCSYSR, R1: number, R2: number, angle1: number, angle2: number, angle: number);
	/**
	 * 执行圆环体的建模算法。
	 */
	Build(): void;
	/**
	 * 获取圆环体的拓扑形状。
	 * @returns 拓扑形状。
	 */
	Shape(): Mx3dShapeObject;
	/**
	 * 获取圆环体的拓扑面形状。
	 * @returns 拓扑面形状。
	 */
	Face(): Mx3dShapeFace;
	/**
	 * 获取圆环体的拓扑外壳形状。
	 * @returns 拓扑壳形状。
	 */
	Shell(): Mx3dShapeShell;
	/**
	 * 获取圆环体的拓扑实体形状。
	 * @returns 拓扑实体形状。
	 */
	Solid(): Mx3dShapeSolid;
	/**
	 * 检查建模算法是否执行完成。
	 * @returns 建模算法执行是否完成的标志，true 完成，false 失败。
	 */
	IsDone(): boolean;
}
/**
 * 表示建模路径扫掠体的类，继承自 Mx3dMkObject
 */
export declare class Mx3dMkPipe extends Mx3dMkObject {
	/**
	 * 构造函数，接受一条路径和一个截面形状来创建扫掠体。
	 * @param Spine 路径线。
	 * @param Profile 截面形状。
	 */
	constructor(Spine: Mx3dShapeWire, Profile: Mx3dShapeObject);
	/**
	 * 构造函数，接受一条路径、一个截面形状、一个模式和一个布尔值来创建扫掠体。
	 * @param Spine 路径线。
	 * @param Profile 截面形状。
	 * @param aMode 模式。
	 * @param ForceApproxC1 强制近似C1连续性。
	 */
	constructor(Spine: Mx3dShapeWire, Profile: Mx3dShapeObject, aMode: MdGe.MxGFTrihedron, ForceApproxC1: boolean);
	/**
	 * 执行路径扫掠体的建模算法。
	 */
	Build(): void;
	/**
	 * 获取路径扫掠体的拓扑形状。
	 * @returns 拓扑形状。
	 */
	Shape(): Mx3dShapeObject;
	/**
	 * 检查建模算法是否执行完成。
	 * @returns 建模算法执行是否完成的标志，true 完成，false 失败。
	 */
	IsDone(): boolean;
}
/**
 *
 */
export declare class Mx3dMkPipeShell extends Mx3dMkObject {
	constructor(Spine: Mx3dShapeWire);
	SetTransitionMode(Mode: MdGe.MxTransitionMode): void;
	Add(Profile: Mx3dShapeObject): void;
	Build(): void;
	MakeSolid(): boolean;
	Shape(): Mx3dShapeObject;
	IsDone(): boolean;
}
/**
 * 表示建模拉伸扫掠体的类，继承自 Mx3dMkObject。
 */
export declare class Mx3dMkPrism extends Mx3dMkObject {
	/**
	 * 构造函数，接受一个拓扑形状和一个向量来创建拉伸扫掠体。
	 * @param S 拓扑形状对象。
	 * @param V 拉伸方向向量。
	 */
	constructor(S: Mx3dShapeObject, V: Mx3dGeVec);
	/**
	 * 构造函数，接受一个拓扑形状和一个方向来创建拉伸扫掠体。
	 * @param S 拓扑形状对象。
	 * @param D 拉伸方向。
	 */
	constructor(S: Mx3dShapeObject, D: Mx3dGeDir);
	/**
	 * 执行拉伸扫掠体的建模算法。
	 */
	Build(): void;
	/**
	 * 获取拉伸扫掠体的形状。
	 * @returns 拉伸扫掠体的形状对象。
	 */
	Shape(): Mx3dShapeObject;
	/**
	 * 检查建模算法是否执行完成。
	 * @returns 建模算法执行是否完成的标志，true 完成，false 失败。
	 */
	IsDone(): boolean;
}
/**
 * 表示建模楔形体的类，继承自 Mx3dMkObject。
 */
export declare class Mx3dMkWedge extends Mx3dMkObject {
	/**
	 * 构造函数，接受三个尺寸参数和一个长度参数来创建楔形体。
	 * @param dx 楔形体的宽度沿x轴方向的尺寸。
	 * @param dy 楔形体的宽度沿y轴方向的尺寸。
	 * @param dz 楔形体的高度沿z轴方向的尺寸。
	 * @param ltx 楔形体的长度参数。
	 */
	constructor(dx: number, dy: number, dz: number, ltx: number);
	/**
	 * 构造函数，接受坐标系和尺寸参数来创建楔形体。
	 * @param Axes 坐标系对象。
	 * @param dx 楔形体的宽度沿x轴方向的尺寸。
	 * @param dy 楔形体的宽度沿y轴方向的尺寸。
	 * @param dz 楔形体的高度沿z轴方向的尺寸。
	 * @param ltx 楔形体的长度参数。
	 */
	constructor(Axes: Mx3dGeCSYSR, dx: number, dy: number, dz: number, ltx: number);
	/**
	 * 构造函数，接受尺寸参数和两个边界值来创建楔形体。
	 * @param dx 楔形体的宽度沿x轴方向的尺寸。
	 * @param dy 楔形体的宽度沿y轴方向的尺寸。
	 * @param dz 楔形体的高度沿z轴方向的尺寸。
	 * @param xmin 楔形体在x轴方向的最小边界值。
	 * @param zmin 楔形体在z轴方向的最小边界值。
	 * @param xmax 楔形体在x轴方向的最大边界值。
	 * @param zmax 楔形体在z轴方向的最大边界值。
	 */
	constructor(dx: number, dy: number, dz: number, xmin: number, zmin: number, xmax: number, zmax: number);
	/**
	 * 构造函数，接受坐标系、尺寸参数和边界值来创建楔形体。
	 * @param Axes 坐标系对象。
	 * @param dx 楔形体的宽度沿x轴方向的尺寸。
	 * @param dy 楔形体的宽度沿y轴方向的尺寸。
	 * @param dz 楔形体的高度沿z轴方向的尺寸。
	 * @param xmin 楔形体在x轴方向的最小边界值。
	 * @param zmin 楔形体在z轴方向的最小边界值。
	 * @param xmax 楔形体在x轴方向的最大边界值。
	 * @param zmax 楔形体在z轴方向的最大边界值。
	 */
	constructor(Axes: Mx3dGeCSYSR, dx: number, dy: number, dz: number, xmin: number, zmin: number, xmax: number, zmax: number);
	/**
	 * 执行楔形体的建模算法。
	 */
	Build(): void;
	/**
	 * 获取楔形体的拓扑形状。
	 * @returns 拓扑形状对象。
	 */
	Shape(): Mx3dShapeObject;
	/**
	 * 获取楔形体的壳体形状。
	 * @returns 壳体形状对象。
	 */
	Shell(): Mx3dShapeShell;
	/**
	 * 获取楔形体的实体形状。
	 * @returns 实体形状对象。
	 */
	Solid(): Mx3dShapeSolid;
	/**
	 * 检查建模算法是否执行完成。
	 * @returns 建模算法执行是否完成的标志，true 完成，false 失败。
	 */
	IsDone(): boolean;
}
/**
 * 表示建模放样体的类，继承自 Mx3dMkObject。
 */
export declare class Mx3dMkLoft extends Mx3dMkObject {
	/**
	 * 构造函数，初始化放样体对象。
	 * @param isSolid 是否创建实体放样体，默认为 false。
	 * @param ruled 是否使用规则放样，默认为 false。
	 * @param pres3d 放样体的平面分辨率，默认为 0。
	 */
	constructor(isSolid?: boolean, ruled?: boolean, pres3d?: number);
	/**
	 * 添加一个Wire到放样体。
	 * @param wire 要添加的Wire对象。
	 */
	AddWire(wire: Mx3dShapeWire): void;
	/**
	 * 添加一个顶点到放样体。
	 * @param aVertex 要添加的顶点对象。
	 */
	AddVertex(aVertex: Mx3dShapeVertex): void;
	/**
	 * 设置是否使用平滑处理。
	 * @param UseSmoothing 使用平滑处理的标志。
	 */
	SetSmoothing(UseSmoothing: boolean): void;
	/**
	 * 设置放样体的连续性。
	 * @param C 形状的连续性枚举值。
	 */
	SetContinuity(C: MdGe.MxGAShapeEnum): void;
	/**
	 * 获取放样体的连续性。
	 * @returns 当前放样体的连续性枚举值。
	 */
	Continuity(): MdGe.MxGAShapeEnum;
	/**
	 * 检查是否使用平滑处理。
	 * @returns 平滑处理的使用状态，true 为使用，false 为不使用。
	 */
	UseSmoothing(): boolean;
	/**
	 * 执行放样体的建模算法。
	 */
	Build(): void;
	/**
	 * 获取放样体的形状。
	 * @returns 放样体的形状对象。
	 */
	Shape(): Mx3dShapeObject;
	/**
	 * 检查建模算法是否执行完成。
	 * @returns 建模算法执行是否完成的标志，true 完成，false 失败。
	 */
	IsDone(): boolean;
}
/**
 * 表示建模多段线的类，继承自 Mx3dMkObject。
 */
export declare class Mx3dMkPolygon extends Mx3dMkObject {
	/**
	 * 构造函数，初始化多段线对象。
	 */
	constructor();
	/**
	 * 添加一个顶点到多段线。
	 * @param P 要添加的点对象。
	 */
	Add(P: Mx3dGePoint): void;
	/**
	 * 检查最后添加的顶点是否与前一个顶点重合。
	 * @returns 如果最后一个添加的顶点与前一个顶点不重合，则返回 true；否则返回 false。
	 */
	Added(): boolean;
	/**
	 * 闭合多段线，形成一个闭合的图形。
	 */
	Close(): void;
	/**
	 * 获取多段线的第一个顶点。
	 * @returns 第一个顶点对象。
	 */
	FirstVertex(): Mx3dShapeVertex;
	/**
	 * 获取多段线的最后一个顶点。
	 * @returns 最后一个顶点对象。
	 */
	LastVertex(): Mx3dShapeVertex;
	/**
	 * 执行多段线的建模算法。
	 */
	Build(): void;
	/**
	 * 获取多段线的形状。
	 * @returns 多段线的形状对象。
	 */
	Shape(): Mx3dShapeObject;
	/**
	 * 检查建模算法是否执行完成。
	 * @returns 建模算法执行是否完成的标志，true 完成，false 失败。
	 */
	IsDone(): boolean;
	/**
	 * 获取多段线的Edge对象。
	 * @returns 多段线的Edge对象。
	 */
	Edge(): Mx3dShapeEdge;
	/**
	 * 获取多段线的Wire对象。
	 * @returns 多段线的Wire对象。
	 */
	Wire(): Mx3dShapeWire;
}
/**
 * 表示建模面的类，继承自 Mx3dMkObject。
 */
export declare class Mx3dMkFace extends Mx3dMkObject {
	/**
	 * 构造函数，接受一个Wire对象和一个布尔值来初始化面对象。
	 * @param theWire 要使用的线条对象 或 面形状对象(可添加Wire，形成Hole)。
	 * @param OnlyPlane 是否仅限于平面构建，默认为 false。
	 */
	constructor(theWire: Mx3dShapeWire | Mx3dShapeFace, OnlyPlane?: boolean);
	/**
	 * 执行面的建模算法。
	 */
	Build(): void;
	/**
	 * 获取面的形状对象。
	 * @returns 面的形状对象。
	 */
	Shape(): Mx3dShapeObject;
	/**
	 * 获取面的具体对象。
	 * @returns 面的具体对象。
	 */
	Face(): Mx3dShapeFace;
	/**
	 * 检查建模算法是否执行完成。
	 * @returns 建模算法执行是否完成的标志，true 完成，false 失败。
	 */
	IsDone(): boolean;
	Add(W: Mx3dShapeWire): void;
}
/**
 * 表示建模厚壁固体的类，继承自 Mx3dMkObject。
 */
export declare class Mx3dMkThickSolid extends Mx3dMkObject {
	/**
	 * 构造函数，初始化厚壁固体对象。
	 */
	constructor();
	/**
	 * 使用简单算法构建厚壁固体。
	 * 该方法基于一个固体和一个偏移值来创建厚壁固体。此算法不支持面移除。
	 * @param theS 要使用的初始固体对象。
	 * @param theOffsetValue 厚度值，定义壁的厚度。
	 */
	MakeThickSolidBySimple(theS: Mx3dShapeObject, theOffsetValue: number): void;
	/**
	 * 使用连接算法构建厚壁固体。
	 * 该方法基于一个固体和一组闭合面来创建厚壁固体。
	 * @param S 要使用的初始固体对象。
	 * @param ClosingFaces 要移除的面对象数组。
	 * @param Offset 厚度值，定义壁的厚度。正值表示外侧，负值表示内侧。
	 * @param Tol 公差值，定义生成形状的重合度标准。
	 * @param Mode 构造模式，默认为 BRepOffset_Skin，定义自由边的平行线构造方式。
	 * @param Intersection 是否计算交集，默认不计算。
	 * @param SelfInter 是否消除自交，默认不消除。
	 * @param Join 连接类型，默认为 GeomAbs_Arc，用于填充平行线之间的空隙。
	 * @param RemoveIntEdges 是否移除内部边，默认不移除。
	 */
	MakeThickSolidByJoin(S: Mx3dShapeObject, ClosingFaces: Mx3dShapeObject[], Offset: number, Tol: number, Mode?: MdGe.MxOffsetModeEnum, Intersection?: boolean, SelfInter?: boolean, Join?: MdGe.MxGAJoinTypeEnum, RemoveIntEdges?: boolean): void;
	/**
	 * 执行厚壁固体的建模算法。
	 * 此方法完成厚壁固体的构建过程。
	 */
	Build(): void;
	/**
	 * 获取厚壁固体的形状对象。
	 * @returns 厚壁固体的形状对象。
	 */
	Shape(): Mx3dShapeObject;
	/**
	 * 检查建模算法是否执行完成。
	 * @returns 如果建模算法执行完成，则返回 true；否则返回 false。
	 */
	IsDone(): boolean;
}
/**
 * 处理 Wire 的接口
 */
export declare class Mx3dWireTool {
	/**
	 * 将一组边连接成最大长度的线条（线）。连接的标准是边的端点间的距离应小于给定的容差。
	 * 该方法将输入的边集合转换为最大长度的线条集合。
	 *
	 * @param edges - 要连接的边对象数组。
	 * @param toler - 边连接时的容差值。
	 * @param shared - 如果为 true，则仅在相邻边共享相同顶点时连接；如果为 false，则在相邻边的端点距离小于容差时连接。
	 * @returns 一个新的线条对象数组，包含连接后的最大长度的线条。
	 */
	static ConnectEdgesToWires(edges: Mx3dShapeObject[], toler?: number, shared?: boolean): Mx3dShapeObject[];
	/**
	 * 将一组线条连接成最大长度的线条（线）。连接的标准是线条的端点间的距离应小于给定的容差。
	 * 该方法将输入的线条集合转换为最大长度的线条集合。
	 *
	 * @param wires - 要连接的线条对象数组。
	 * @param toler - 线条连接时的容差值。
	 * @param shared - 如果为 true，则仅在相邻线条共享相同顶点时连接；如果为 false，则在相邻线条的端点距离小于容差时连接。
	 * @returns 一个新的线条对象数组，包含连接后的最大长度的线条。
	 */
	static ConnectWiresToWires(wires: Mx3dShapeObject[], toler?: number, shared?: boolean): Mx3dShapeObject[]; /**
	 * Edge 转换为 Wire
	 * @param theEdge 待转换的 Edge
	 * @returns 转换后的 Wire
	 */
	static EdgeToWire(theEdge: Mx3dShapeEdge): Mx3dShapeWire;
}
/**
 * 表示有限范围的曲线的基类
 */
export declare class Mx3dGeomBoundedCurve extends Mx3dGeomCurve {
	/**
	 * @internal
	 */
	constructor(p?: object);
	/**
	 * 返回对象的动态类型。
	 * @returns 动态类型的字符串。
	 */
	DynamicType(): string;
}
/**
 * 代表一个B样条曲线。
 * 该类继承自Mx3dGeomBoundedCurve并封装了B样条曲线的操作和属性。
 */
export declare class Mx3dGeomBSplineCurve extends Mx3dGeomBoundedCurve {
	/**
	 * 构造函数用于创建一个B样条曲线。
	 * @param Poles 控制点的数组。
	 * @param Knots 节点序列的数组。
	 * @param Multiplicities 节点的多重性。
	 * @param Degree 曲线的阶数。
	 */
	constructor(Poles: Mx3dGePoint[], Knots: number[], Multiplicities: number[], Degree: number);
	/**
   * 构造函数用于创建一个带权重的B样条曲线。
   * @param Poles 控制点的数组。
   * @param Weights 控制点的权重数组。
   * @param Knots 节点序列的数组。
   * @param Multiplicities 节点的多重性。
   * @param Degree 曲线的阶数。
   */
	constructor(Poles: Mx3dGePoint[], Weights: number[], Knots: number[], Multiplicities: number[], Degree: number);
	/**
	 * 提高曲线的阶数。
	 * @param Degree 新的阶数。
	 */
	IncreaseDegree(Degree: number): void;
	/**
	 * 提高指定索引处的节点多重性。
	 * @param Index 节点的索引。
	 * @param M 新的多重性。
	 */
	IncreaseMultiplicity(Index: number, M: number): void;
	/**
	 * 提高指定范围内的节点多重性。
	 * @param I1 范围起始索引。
	 * @param I2 范围结束索引。
	 * @param M 新的多重性。
	 */
	IncreaseMultiplicity(I1: number, I2: number, M: number): void;
	/**
	 * 增量提高指定范围内的节点多重性。
	 * @param I1 起始索引。
	 * @param I2 结束索引。
	 * @param M 增加的多重性值。
	 */
	IncrementMultiplicity(I1: number, I2: number, M: number): void;
	/**
	 * 插入一个新的节点。
	 * @param U 新节点的位置。
	 * @param M 新节点的多重性（可选）。
	 * @param ParametricTolerance 参数容差（可选）。
	 * @param Add 是否添加节点而不是替换（可选）。
	 */
	InsertKnot(U: number, M?: number, ParametricTolerance?: number, Add?: boolean): void;
	/**
	 * 插入多个新的节点。
	 * @param Knots 新节点的位置数组。
	 * @param Mults 新节点的多重性数组。
	 * @param ParametricTolerance 参数容差（可选）。
	 * @param Add 是否添加节点而不是替换（可选）。
	 */
	InsertKnots(Knots: number[], Mults: number[], ParametricTolerance?: number, Add?: boolean): void;
	/**
	 * 移除一个节点。
	 * @param Index 节点的索引。
	 * @param M 节点的多重性。
	 * @param Tolerance 容差。
	 * @returns 是否成功移除节点。
	 */
	RemoveKnot(Index: number, M: number, Tolerance: number): boolean;
	/**
	 * 反转曲线。
	 */
	Reverse(): void;
	/**
	 * 获取反转参数值。
	 * @param U 原参数值。
	 * @returns 反转后的参数值。
	 */
	ReversedParameter(U: number): number;
	/**
	 * 截取曲线的一个段。
	 * @param U1 段的起始参数值。
	 * @param U2 段的结束参数值。
	 */
	Segment(U1: number, U2: number): void;
	/**
	 * 设置节点。
	 * @param Index 节点索引。
	 * @param K 新的节点值。
	 */
	SetKnot(Index: number, K: number): void;
	/**
	 * 设置节点并指定其多重性。
	 * @param Index 节点索引。
	 * @param K 新的节点值。
	 * @param M 节点的多重性。
	 */
	SetKnot(Index: number, K: number, M: number): void;
	/**
	 * 设置所有节点。
	 * @param dK 节点值数组。
	 */
	SetKnots(dK: number[]): void;
	/**
	 * 设置曲线为周期性。
	 */
	SetPeriodic(): void;
	/**
	 * 设置原点。
	 * @param Index 原点索引。
	 */
	SetOrigin(Index: number): void;
	/**
	 * 设置原点并指定容差。
	 * @param U 原点参数值。
	 * @param Tol 容差。
	 */
	SetOrigin(U: number, Tol: number): void;
	/**
	 * 设置曲线为非周期性。
	 */
	SetNotPeriodic(): void;
	/**
	 * 设置指定索引处的控制点。
	 * @param Index 控制点的索引。
	 * @param P 控制点。
	 */
	SetPole(Index: number, P: UniPoint): void;
	/**
	 * 设置指定索引处的控制点和权重。
	 * @param Index 控制点的索引。
	 * @param P 控制点。
	 * @param Weight 权重。
	 */
	SetPole(Index: number, P: UniPoint, Weight: number): void;
	/**
	 * 设置指定索引处的权重。
	 * @param Index 权重的索引。
	 * @param Weight 权重。
	 */
	SetWeight(Index: number, Weight: number): void;
	/**
	 * 检查曲线在指定阶数下是否连续。
	 * @param N 阶数。
	 * @returns 如果曲线在指定阶数下是连续的，则返回true；否则返回false。
	 */
	IsCN(N: number): boolean;
	/**
	 * 检查曲线在指定范围内是否满足G1连续性。
	 * @param theTf 起始参数。
	 * @param theTl 结束参数。
	 * @param theAngTol 角度公差。
	 * @returns 如果曲线在指定范围内满足G1连续性，则返回true；否则返回false。
	 */
	IsG1(theTf: number, theTl: number, theAngTol: number): boolean;
	/**
	 * 检查曲线是否闭合。
	 * @returns 如果曲线闭合，则返回true；否则返回false。
	 */
	IsClosed(): boolean;
	/**
	 * 检查曲线是否周期性。
	 * @returns 如果曲线是周期性的，则返回true；否则返回false。
	 */
	IsPeriodic(): boolean;
	/**
	 * 检查曲线是否是有理的。
	 * @returns 如果曲线是有理的，则返回true；否则返回false。
	 */
	IsRational(): boolean;
	/**
	 * 获取曲线的连续性。
	 * @returns 曲线的连续性。
	 */
	Continuity(): MdGe.MxGAShapeEnum;
	/**
	 * 获取曲线的阶数。
	 * @returns 曲线的阶数。
	 */
	Degree(): number;
	/**
	 * 在给定参数处计算曲线的点。
	 * @param U 参数。
	 * @param P 结果点。
	 */
	D0(U: number, P: Mx3dGePoint): void;
	/**
	 * 在给定参数处计算曲线的点和一阶导数。
	 * @param U 参数。
	 * @param P 结果点。
	 * @param V1 一阶导数。
	 */
	D1(U: number, P: Mx3dGePoint, V1: Mx3dGeVec): void;
	/**
	 * 在给定参数处计算曲线的点、一阶导数和二阶导数。
	 * @param U 参数。
	 * @param P 结果点。
	 * @param V1 一阶导数。
	 * @param V2 二阶导数。
	 */
	D2(U: number, P: Mx3dGePoint, V1: Mx3dGeVec, V2: Mx3dGeVec): void;
	/**
	 * 在给定参数处计算曲线的点、一阶导数、二阶导数和三阶导数。
	 * @param U 参数。
	 * @param P 结果点。
	 * @param V1 一阶导数。
	 * @param V2 二阶导数。
	 * @param V3 三阶导数。
	 */
	D3(U: number, P: Mx3dGePoint, V1: Mx3dGeVec, V2: Mx3dGeVec, V3: Mx3dGeVec): void;
	/**
	 * 在给定参数处计算曲线的N阶导数。
	 * @param U 参数。
	 * @param N 阶数。
	 * @returns N阶导数。
	 */
	DN(U: number, N: number): Mx3dGeVec;
	/**
	 * 在指定范围内计算局部参数的点。
	 * @param U 参数。
	 * @param FromK1 起始节点索引。
	 * @param ToK2 结束节点索引。
	 * @returns 局部参数的点。
	 */
	LocalValue(U: number, FromK1: number, ToK2: number): Mx3dGePoint;
	/**
	 * 在指定范围内计算局部参数的点。
	 * @param U 参数。
	 * @param FromK1 起始节点索引。
	 * @param ToK2 结束节点索引。
	 * @param P 结果点。
	 */
	LocalD0(U: number, FromK1: number, ToK2: number, P: Mx3dGePoint): void;
	/**
	 * 在指定范围内计算局部参数的点和一阶导数。
	 * @param U 参数。
	 * @param FromK1 起始节点索引。
	 * @param ToK2 结束节点索引。
	 * @param P 结果点。
	 * @param V1 一阶导数。
	 */
	LocalD1(U: number, FromK1: number, ToK2: number, P: Mx3dGePoint, V1: Mx3dGeVec): void;
	/**
	 * 在指定范围内计算局部参数的点、一阶导数和二阶导数。
	 * @param U 参数。
	 * @param FromK1 起始节点索引。
	 * @param ToK2 结束节点索引。
	 * @param P 结果点。
	 * @param V1 一阶导数。
	 * @param V2 二阶导数。
	 */
	LocalD2(U: number, FromK1: number, ToK2: number, P: Mx3dGePoint, V1: Mx3dGeVec, V2: Mx3dGeVec): void;
	/**
	 * 在指定范围内计算局部参数的点、一阶导数、二阶导数和三阶导数。
	 * @param U 参数。
	 * @param FromK1 起始节点索引。
	 * @param ToK2 结束节点索引。
	 * @param P 结果点。
	 * @param V1 一阶导数。
	 * @param V2 二阶导数。
	 * @param V3 三阶导数。
	 */
	LocalD3(U: number, FromK1: number, ToK2: number, P: Mx3dGePoint, V1: Mx3dGeVec, V2: Mx3dGeVec, V3: Mx3dGeVec): void;
	/**
	 * 在指定范围内计算局部参数的N阶导数。
	 * @param U 参数。
	 * @param FromK1 起始节点索引。
	 * @param ToK2 结束节点索引。
	 * @param N 阶数。
	 * @returns N阶导数。
	 */
	LocalDN(U: number, FromK1: number, ToK2: number, N: number): Mx3dGeVec;
	/**
	 * 获取曲线的终点。
	 * @returns 曲线的终点。
	 */
	EndPoint(): Mx3dGePoint;
	/**
	 * 获取曲线的第一个节点索引。
	 * @returns 第一个节点索引。
	 */
	FirstUKnotIndex(): number;
	/**
	 * 返回曲线的第一个参数值。
	 * 通常用于确定曲线的起始点。
	 * @returns 第一个参数值。
	 */
	FirstParameter(): number;
	/**
	 * 获取曲线在指定索引处的节点。
	 * @param Index 节点的索引。
	 * @returns 节点。
	 */
	Knot(Index: number): number;
	/**
	 * 获取曲线的节点序列。
	 * @returns 节点序列的数组。
	 */
	Knots(): number[];
	/**
	 * 获取曲线的最后一个节点索引。
	 * @returns 最后一个节点索引。
	 */
	LastUKnotIndex(): number;
	/**
	 * 返回曲线的最后一个参数值。
	 * 通常用于确定曲线的终点。
	 * @returns 最后一个参数值。
	 */
	LastParameter(): number;
	/**
	 * 获取指定索引处的节点多重性。
	 * 节点多重性用于定义曲线在特定参数值处的重复程度。
	 * @param Index 节点索引。
	 * @returns 节点的多重性值。
	 */
	Multiplicity(Index: number): number;
	/**
	 * 返回曲线的所有节点多重性值。
	 * 节点多重性用于定义曲线在特定参数值处的重复程度。
	 * @returns 节点多重性值的数组。
	 */
	Multiplicities(): number[];
	/**
	 * 获取曲线的节点数。
	 * @returns 节点数。
	 */
	NbKnots(): number;
	/**
	 * 获取曲线的控制点数。
	 * @returns 控制点数。
	 */
	NbPoles(): number;
	/**
	 * 获取指定索引处的控制点。
	 * 控制点定义了曲线的形状和位置。
	 * @param Index 控制点的索引。
	 * @returns 指定索引处的控制点对象。
	 */
	Pole(Index: number): Mx3dGePoint;
	/**
	 * 获取曲线的控制点序列。
	 * @returns 控制点序列的数组。
	 */
	Poles(): Mx3dGePoint[];
	/**
	 * 获取曲线的起点。
	 * @returns 曲线的起点。
	 */
	StartPoint(): Mx3dGePoint;
	/**
	 * 获取指定索引处的权重值。
	 * 权重值用于定义B样条曲线的局部形状和重要性。
	 * @param Index 权重值的索引。
	 * @returns 指定索引处的权重值。
	 */
	Weight(Index: number): number;
	/**
	 * 获取曲线的权重序列。
	 * @returns 权重序列的数组。
	 */
	Weights(): number[];
	/**
	 * 应用给定的变换矩阵变换曲线。
	 * @param T 变换矩阵。
	 */
	Transform(T: Mx3dGeTrsf): void;
	/**
	 * 创建当前B样条曲线的副本。
	 * @returns 返回一个新的B样条曲线对象。
	 */
	Copy(): Mx3dGeomObject;
	/**
	 * 获取曲线的边。
	 * @param p1 边的起始点参数。
	 * @param p2 边的终止点参数。
	 * @returns 返回指定参数范围内的曲线边。
	 */
	Edge(p1: number, p2: number): Mx3dShapeEdge;
	/**
	 * 获取曲线的Wire。
	 * @returns 返回表示曲线的Wire对象。
	 */
	Wire(): Mx3dShapeWire;
	/**
	 * 创建曲线的偏移副本。
	 * @param Offset 偏移量。
	 * @param V 偏移方向，与偏移方向垂直。
	 * @param isNotCheckC0 是否不检查C0连续性。
	 * @returns 返回偏移后的曲线边对象。
	 */
	OffsetCurve(Offset: number, V: UniDir, isNotCheckC0: boolean): Mx3dShapeEdge;
	/**
	 * 比较当前曲线与另一条曲线的相等性。
	 * @param theOther 另一个B样条曲线对象。
	 * @param thePreci 比较精度。
	 * @returns 如果两条曲线在指定精度下相等，返回true；否则返回false。
	 */
	IsEqual(theOther: Mx3dGeomBSplineCurve, thePreci: number): boolean;
	/**
	 * @internal
	 */
	DynCast(theObject: Mx3dGeomObject): this;
	/**
	 * 父类对象转 Mx3dGeomBSplineCurve 类对象
	 * @param theObject 父类对象
	 * @returns Mx3dGeomBSplineCurve 类对象
	 */
	static DownCast(theObject: Mx3dGeomObject): Mx3dGeomBSplineCurve;
	/**
	 * 返回对象的动态类型。
	 * @returns 动态类型的字符串。
	 */
	DynamicType(): string;
}
/**
 * Mx3dGeomBezierCurve 表示Bezier曲线，提供了一系列方法来操作和查询Bezier曲线的属性。
 */
export declare class Mx3dGeomBezierCurve extends Mx3dGeomBoundedCurve {
	/**
	   * 构造函数，创建一个Bezier曲线。
	   * @param CurvePoles - 控制点数组。
	   * @param PoleWeights - 控制点权重数组（可选）。
	   */
	constructor(CurvePoles: Mx3dGePoint[], PoleWeights?: number[]);
	/**
	   * 提高Bezier曲线的阶数。
	   * @param Degree - 新的阶数。
	   */
	Increase(Degree: number): void;
	/**
	   * 在指定索引之后插入一个控制点。
	   * @param Index - 插入点的索引。
	   * @param P - 新的控制点。
	   * @param Weight - 新的控制点的权重（可选）。
	   */
	InsertPoleAfter(Index: number, P: Mx3dGePoint, Weight?: number): void;
	/**
	   * 在指定索引之前插入一个控制点。
	   * @param Index - 插入点的索引。
	   * @param P - 新的控制点。
	   * @param Weight - 新的控制点的权重（可选）。
	   */
	InsertPoleBefore(Index: number, P: Mx3dGePoint, Weight?: number): void;
	/**
	   * 删除指定索引的控制点。
	   * @param Index - 要删除的控制点的索引。
	   */
	RemovePole(Index: number): void;
	/**
	   * 反转Bezier曲线的参数方向。
	   */
	Reverse(): void;
	/**
	   * 获取反转后的参数值。
	   * @param U - 原参数值。
	   * @returns 反转后的参数值。
	   */
	ReversedParameter(U: number): number;
	/**
	   * 截取Bezier曲线的一部分。
	   * @param U1 - 起始参数值。
	   * @param U2 - 结束参数值。
	   */
	Segment(U1: number, U2: number): void;
	/**
	   * 设置指定索引的控制点。
	   * @param Index - 要设置的控制点的索引。
	   * @param P - 新的控制点。
	   * @param Weight - 新的控制点的权重（可选）。
	   */
	SetPole(Index: number, P: Mx3dGePoint, Weight?: number): void;
	/**
	   * 设置指定索引的控制点权重。
	   * @param Index - 要设置的控制点的索引。
	   * @param Weight - 新的权重值。
	   */
	SetWeight(Index: number, Weight: number): void;
	/**
	   * 检查曲线是否闭合。
	   * @returns 曲线是否闭合。
	   */
	IsClosed(): boolean;
	/**
	   * 检查曲线的连续性。
	   * @param N - 连续性的阶数。
	   * @returns 曲线是否具有指定阶数的连续性。
	   */
	IsCN(N: number): boolean;
	/**
	   * 检查曲线的参数化是否周期性。
	   * @returns 曲线是否周期性。
	   */
	IsPeriodic(): boolean;
	/**
	   * 检查曲线是否是有理Bezier曲线。
	   * @returns 曲线是否是有理的。
	   */
	IsRational(): boolean;
	/**
	   * 获取曲线的连续性类型。
	   * @returns 曲线的连续性类型。
	   */
	Continuity(): MdGe.MxGAShapeEnum;
	/**
	   * 获取曲线的阶数。
	   * @returns 曲线的阶数。
	   */
	Degree(): number;
	/**
	   * 计算曲线在指定参数值处的点。
	   * @param U - 参数值。
	   * @param P - 计算得到的点。
	   */
	D0(U: number, P: Mx3dGePoint): void;
	/**
	   * 计算曲线在指定参数值处的点及其一阶导数。
	   * @param U - 参数值。
	   * @param P - 计算得到的点。
	   * @param V1 - 计算得到的一阶导数。
	   */
	D1(U: number, P: Mx3dGePoint, V1: Mx3dGeVec): void;
	/**
	   * 计算曲线在指定参数值处的点及其一阶和二阶导数。
	   * @param U - 参数值。
	   * @param P - 计算得到的点。
	   * @param V1 - 计算得到的一阶导数。
	   * @param V2 - 计算得到的二阶导数。
	   */
	D2(U: number, P: Mx3dGePoint, V1: Mx3dGeVec, V2: Mx3dGeVec): void;
	/**
	   * 计算曲线在指定参数值处的点及其一阶、二阶和三阶导数。
	   * @param U - 参数值。
	   * @param P - 计算得到的点。
	   * @param V1 - 计算得到的一阶导数。
	   * @param V2 - 计算得到的二阶导数。
	   * @param V3 - 计算得到的三阶导数。
	   */
	D3(U: number, P: Mx3dGePoint, V1: Mx3dGeVec, V2: Mx3dGeVec, V3: Mx3dGeVec): void;
	/**
	   * 计算曲线在指定参数值处的N阶导数。
	   * @param U - 参数值。
	   * @param N - 导数的阶数。
	   * @returns 计算得到的N阶导数。
	   */
	DN(U: number, N: number): Mx3dGeVec;
	/**
	   * 获取曲线的起始点。
	   * @returns 曲线的起始点。
	   */
	StartPoint(): Mx3dGePoint;
	/**
	   * 获取曲线的终点。
	   * @returns 曲线的终点。
	   */
	EndPoint(): Mx3dGePoint;
	/**
	   * 获取曲线的第一个参数值。
	   * @returns 曲线的第一个参数值。
	   */
	FirstParameter(): number;
	/**
	   * 获取曲线的最后一个参数值。
	   * @returns 曲线的最后一个参数值。
	   */
	LastParameter(): number;
	/**
	   * 获取曲线的控制点数量。
	   * @returns 曲线的控制点数量。
	   */
	NbPoles(): number;
	/**
	   * 获取指定索引的控制点。
	   * @param Index - 控制点的索引。
	   * @returns 指定的控制点。
	   */
	Pole(Index: number): Mx3dGePoint;
	/**
	   * 获取所有控制点。
	   * @returns 所有控制点的数组。
	   */
	Poles(): Mx3dGePoint[];
	/**
	   * 获取指定索引的控制点权重。
	   * @param Index - 控制点的索引。
	   * @returns 指定的控制点权重。
	   */
	Weight(Index: number): number;
	/**
	   * 获取所有控制点的权重。
	   * @returns 所有控制点权重的数组。
	   */
	Weights(): number[];
	/**
	   * 对曲线应用变换。
	   * @param T - 变换矩阵。
	   */
	Transform(T: Mx3dGeTrsf): void;
	/**
	   * 复制曲线对象。
	   * @returns 复制的曲线对象。
	   */
	Copy(): Mx3dGeomObject;
	/**
	   * 创建一条边。
	   * @param p1 - 边的起点参数。
	   * @param p2 - 边的终点参数。
	   * @returns 创建的边对象。
	   */
	Edge(p1: number, p2: number): Mx3dShapeEdge;
	/**
	   * 创建一条线。
	   * @returns 创建的线对象。
	   */
	Wire(): Mx3dShapeWire;
	/**
	   * 创建偏移曲线。
	   * @param Offset - 偏移量。
	   * @param V - 偏移方向，与偏移方向垂直。
	   * @param isNotCheckC0 - 是否检查C0连续性。
	   * @returns 创建的偏移曲线。
	   */
	OffsetCurve(Offset: number, V: UniDir, isNotCheckC0: boolean): Mx3dShapeEdge;
	/**
	 * @internal
	 */
	DynCast(theObject: Mx3dGeomObject): this;
	/**
	 * 父类对象转 Mx3dGeomBezierCurve 类对象
	 * @param theObject 父类对象
	 * @returns Mx3dGeomBezierCurve 类对象
	 */
	static DownCast(theObject: Mx3dGeomObject): Mx3dGeomBezierCurve;
	/**
	 * 返回对象的动态类型。
	 * @returns 动态类型的字符串。
	 */
	DynamicType(): string;
}
/**
 * Mx3dGeomSurface 类，提供了 3D 表面操作的方法。
 */
export declare class Mx3dGeomSurface extends Mx3dGeomObject {
	/**
	   * @internal
	   */
	constructor(p?: object);
	/**
	   * 反转 U 方向的参数化。
	   * @returns 返回当前对象以实现链式调用。
	   */
	UReversed(): this;
	/**
	   * 反转 V 方向的参数化。
	   * @returns 返回当前对象以实现链式调用。
	   */
	VReversed(): this;
	/**
	   * 根据给定的变换矩阵 T 变换表面参数。
	   * @param UV 参数数组，包含 U 和 V 的值。
	   * @param T 变换矩阵。
	   */
	TransformParameters(UV: [
		dU: number,
		dV: number
	], T: Mx3dGeTrsf): void;
	/**
	   * 返回表面在 U 方向的周期。
	   * @returns 表面在 U 方向的周期。
	   */
	UPeriod(): number;
	/**
	   * 返回表面在 V 方向的周期。
	   * @returns 表面在 V 方向的周期。
	   */
	VPeriod(): number;
	/**
	   * 计算参数 (U, V) 对应的表面上的点。
	   * @param U 表面参数 U。
	   * @param V 表面参数 V。
	   * @returns 对应的点。
	   */
	Value(U: number, V: number): Mx3dGePoint;
	/**
	   * 返回对象的动态类型。
	   * @returns 动态类型的字符串表示。
	   */
	DynamicType(): string;
}
/**
 * Mx3dGeomElementarySurface 类是对几何基础表面（Elementary Surface）类的封装，提供了对简单参数方程表面的操作接口。
 * 这些表面包括平面、圆柱、圆锥、球体等。该类继承自 Mx3dGeomSurface，并扩展了相关的几何操作功能。
 */
export declare class Mx3dGeomElementarySurface extends Mx3dGeomSurface {
	/**
	 * @internal
	 */
	constructor(p?: object);
	/**
	 * 设置表面的主轴（Z轴）。
	 * @param theA1 表面的主轴定义。
	 */
	SetAxis(theA1: Mx3dGeAxis): void;
	/**
	 * 设置表面局部坐标系的位置点。
	 * @param theLoc 新的位置点。
	 */
	SetLocation(theLoc: Mx3dGePoint): void;
	/**
	 * 设置表面的局部坐标系。
	 * @param theAx3 新的坐标系，包含位置和方向。
	 */
	SetPosition(theAx3: Mx3dGeCSYSR): void;
	/**
	 * 获取表面的主轴（Z轴）。
	 * @returns 表面的主轴定义。
	 */
	Axis(): Mx3dGeAxis;
	/**
	 * 获取表面局部坐标系的位置点。
	 * @returns 表面位置点。
	 */
	Location(): Mx3dGePoint;
	/**
	 * 获取表面的局部坐标系。
	 * @returns 表面的局部坐标系。
	 */
	Position(): Mx3dGeCSYSR;
	/**
	 * 反转表面在 U 参数方向上的参数化方向。
	 */
	UReverse(): void;
	/**
	 * 反转表面在 V 参数方向上的参数化方向。
	 */
	VReverse(): void;
	/**
	 * 返回表面在全局上的连续性（MxGAShapeEnum）。
	 * @returns 表面在全局上的连续性。
	 */
	Continuity(): MdGe.MxGAShapeEnum;
	/**
	 * 检查表面在 U 参数方向上的连续性是否达到指定的等级。
	 * @param N 要检查的连续性等级。
	 * @returns 如果连续性等级满足条件，则返回 true；否则返回 false。
	 */
	IsCNu(N: number): boolean;
	/**
	 * 检查表面在 V 参数方向上的连续性是否达到指定的等级。
	 * @param N 要检查的连续性等级。
	 * @returns 如果连续性等级满足条件，则返回 true；否则返回 false。
	 */
	IsCNv(N: number): boolean;
	/**
	 * 返回对象的动态类型名称。
	 * @returns 对象的类型名称字符串。
	 */
	DynamicType(): string;
}
/**
 * Mx3dGeomPlane 类，提供描述和操作3D空间中平面的功能。
 * 一个平面由坐标系 (Mx3dGeCSYSR) 定义，可以通过其法向量、原点和参数方向来描述。
 */
export declare class Mx3dGeomPlane extends Mx3dGeomElementarySurface {
	/**
	   * 根据指定的轴向位置构造一个位于3D空间中的平面。
	   * @param A3 - 定义平面位置和方向的坐标系 (Mx3dGeCSYSR)。
	   */
	constructor(A3: Mx3dGeCSYSR);
	/**
	   * 根据一个点和法向量构造一个平面。
	   * @param P - 平面的原点。
	   * @param V - 法向量，指向平面的方向。
	   */
	constructor(P: UniPoint, V: UniDir);
	/**
	   * 根据平面方程的系数构造一个平面。
	   * @param A - 方程 Ax + By + Cz + D = 0 的系数 A。
	   * @param B - 方程 Ax + By + Cz + D = 0 的系数 B。
	   * @param C - 方程 Ax + By + Cz + D = 0 的系数 C。
	   * @param D - 方程 Ax + By + Cz + D = 0 的系数 D。
	   */
	constructor(A: number, B: number, C: number, D: number);
	/**
	   * 翻转平面在 U 参数方向上的方向。
	   */
	UReverse(): void;
	/**
	 * 计算在平面翻转 U 参数方向后的 U 参数值。
	 * @param U - 原始的 U 参数。
	 * @returns 翻转后的 U 参数。
	 */
	UReversedParameter(U: number): number;
	/**
	   * 翻转平面在 V 参数方向上的方向。
	   */
	VReverse(): void;
	/**
	   * 计算在平面翻转 V 参数方向后的 V 参数值。
	   * @param V - 原始的 V 参数。
	   * @returns 翻转后的 V 参数。
	   */
	VReversedParameter(V: number): number;
	/**
	   * 将 U 和 V 参数以及变换 T 应用于平面。
	   * @param UV - 参数值数组 [dU, dV]。
	   * @param T - 变换 (Mx3dGeTrsf)。
	   */
	TransformParameters(UV: [
		dU: number,
		dV: number
	], T: Mx3dGeTrsf): void;
	/**
	   * 计算平面的参数范围。
	   * @param U1U2V1V2 - 参数范围数组 [dU1, dU2, dV1, dV2]。
	   */
	Bounds(U1U2V1V2: [
		dU1: number,
		dU2: number,
		dV1: number,
		dV2: number
	]): void;
	/**
	   * 计算平面方程的系数。
	   * @param ABCD - 系数数组 [dA, dB, dC, dD]。
	   */
	Coefficients(ABCD: [
		dA: number,
		dB: number,
		dC: number,
		dD: number
	]): void;
	/**
	   * 判断平面在 U 方向上是否闭合。
	   * @returns 返回 false。
	   */
	IsUClosed(): boolean;
	/**
	   * 判断平面在 V 方向上是否闭合。
	   * @returns 返回 false。
	   */
	IsVClosed(): boolean;
	/**
	   * 判断平面在 U 方向上是否周期性。
	   * @returns 返回 false。
	   */
	IsUPeriodic(): boolean;
	/**
	   * 判断平面在 V 方向上是否周期性。
	   * @returns 返回 false。
	   */
	IsVPeriodic(): boolean;
	/**
	 * 计算在指定的 U 和 V 参数值处的点。
	 * @param U - U 参数值。
	 * @param V - V 参数值。
	 * @param P - 用于存储计算点的目标对象 (Mx3dGePoint)。
	 * 计算公式为 P = O + U * XDir + V * YDir，
	 * 其中 O 为平面的原点，XDir 和 YDir 分别是 U 和 V 参数方向的基向量。
	 */
	D0(U: number, V: number, P: Mx3dGePoint): void;
	/**
	 * 计算在指定的 U 和 V 参数值处的点及其一阶导数。
	 * @param U - U 参数值。
	 * @param V - V 参数值。
	 * @param P - 用于存储计算点的目标对象 (Mx3dGePoint)。
	 * @param D1U - 用于存储 U 方向第一导数的目标对象 (Mx3dGeVec)。
	 * @param D1V - 用于存储 V 方向第一导数的目标对象 (Mx3dGeVec)。
	 * 计算公式为：
	 * - 点：P = O + U * XDir + V * YDir。
	 * - 第一导数：D1U 和 D1V 分别为 XDir 和 YDir 的偏导数。
	 */
	D1(U: number, V: number, P: Mx3dGePoint, D1U: Mx3dGeVec, D1V: Mx3dGeVec): void;
	/**
	 * 计算在指定的 U 和 V 参数值处的点、第一阶和第二阶导数。
	 * @param U - U 参数值。
	 * @param V - V 参数值。
	 * @param P - 用于存储计算点的目标对象 (Mx3dGePoint)。
	 * @param D1U - 用于存储 U 方向第一导数的目标对象 (Mx3dGeVec)。
	 * @param D1V - 用于存储 V 方向第一导数的目标对象 (Mx3dGeVec)。
	 * @param D2U - 用于存储 U 方向第二导数的目标对象 (Mx3dGeVec)。
	 * @param D2V - 用于存储 V 方向第二导数的目标对象 (Mx3dGeVec)。
	 * @param D2UV - 用于存储 UV 方向第二导数的目标对象 (Mx3dGeVec)。
	 * 计算公式为：
	 * - 点：P = O + U * XDir + V * YDir。
	 * - 第一导数：D1U 和 D1V 分别为 XDir 和 YDir 的偏导数。
	 * - 第二导数：D2U、D2V 和 D2UV 为二阶偏导数。
	 */
	D2(U: number, V: number, P: Mx3dGePoint, D1U: Mx3dGeVec, D1V: Mx3dGeVec, D2U: Mx3dGeVec, D2V: Mx3dGeVec, D2UV: Mx3dGeVec): void;
	/**
	 * 计算在指定的 U 和 V 参数值处的点、第一、第二和第三阶导数。
	 * @param U - U 参数值。
	 * @param V - V 参数值。
	 * @param P - 用于存储计算点的目标对象 (Mx3dGePoint)。
	 * @param D1U - 用于存储 U 方向第一导数的目标对象 (Mx3dGeVec)。
	 * @param D1V - 用于存储 V 方向第一导数的目标对象 (Mx3dGeVec)。
	 * @param D2U - 用于存储 U 方向第二导数的目标对象 (Mx3dGeVec)。
	 * @param D2V - 用于存储 V 方向第二导数的目标对象 (Mx3dGeVec)。
	 * @param D2UV - 用于存储 UV 方向第二导数的目标对象 (Mx3dGeVec)。
	 * @param D3U - 用于存储 U 方向第三导数的目标对象 (Mx3dGeVec)。
	 * @param D3V - 用于存储 V 方向第三导数的目标对象 (Mx3dGeVec)。
	 * @param D3UUV - 用于存储 UUU 方向第三导数的目标对象 (Mx3dGeVec)。
	 * @param D3UVV - 用于存储 UVV 方向第三导数的目标对象 (Mx3dGeVec)。
	 * 计算公式为：
	 * - 点：P = O + U * XDir + V * YDir。
	 * - 第一导数：D1U 和 D1V 分别为 XDir 和 YDir 的偏导数。
	 * - 第二导数：D2U、D2V 和 D2UV 为二阶偏导数。
	 * - 第三导数：D3U、D3V、D3UUV 和 D3UVV 为三阶偏导数。
	 */
	D3(U: number, V: number, P: Mx3dGePoint, D1U: Mx3dGeVec, D1V: Mx3dGeVec, D2U: Mx3dGeVec, D2V: Mx3dGeVec, D2UV: Mx3dGeVec, D3U: Mx3dGeVec, D3V: Mx3dGeVec, D3UUV: Mx3dGeVec, D3UVV: Mx3dGeVec): void;
	/**
	 * 计算在指定的 U 和 V 参数值处的指定阶数的导数。
	 * @param U - U 参数值。
	 * @param V - V 参数值。
	 * @param Nu - U 方向的导数阶数。
	 * @param Nv - V 方向的导数阶数。
	 * @returns 返回计算的向量对象 (Mx3dGeVec)。
	 * @throws 错误：如果 Nu + Nv < 1 或 Nu < 0 或 Nv < 0，则抛出异常。
	 * 计算公式为计算指定阶数的偏导数，返回对应的向量。
	 */
	DN(U: number, V: number, Nu: number, Nv: number): Mx3dGeVec;
	/**
	 * 应用变换 T 到平面上。
	 * @param T - 变换 (Mx3dGeTrsf)。
	 */
	Transform(T: Mx3dGeTrsf): void;
	/**
	 * 创建一个新的对象，作为该平面的副本。
	 * @returns 返回新的平面对象 (Mx3dGeomObject)。
	 */
	Copy(): Mx3dGeomObject;
	/**
	 * 返回对象的动态类型字符串。
	 * @returns 类型名称字符串。
	 */
	DynamicType(): string;
	/**
	 * @internal
	 */
	DynCast(theObject: Mx3dGeomObject): this;
	/**
	 * 父类对象转 Mx3dGeomPlane 类对象
	 * @param theObject 父类对象
	 * @returns Mx3dGeomPlane 类对象
	 */
	static DownCast(theObject: Mx3dGeomObject): Mx3dGeomPlane;
	/**
	 * 根据公差生成一个平面面。
	 * @param TolDegen - 公差值。
	 * @returns 生成的平面面 (Mx3dShapeFace)。
	 */
	Face(TolDegen: number): Mx3dShapeFace;
	/**
	 * 根据给定的轮廓线和是否在内部生成一个平面面。
	 * @param W - 轮廓线 (Mx3dShapeWire)。
	 * @param Inside - 是否在内部。
	 * @returns 生成的平面面 (Mx3dShapeFace)。
	 */
	Face(W: Mx3dShapeWire, Inside: boolean): Mx3dShapeFace;
	/**
	 * 根据 U 和 V 范围以及公差生成一个平面面。
	 * @param UMin - U 方向的最小值。
	 * @param UMax - U 方向的最大值。
	 * @param VMin - V 方向的最小值。
	 * @param VMax - V 方向的最大值。
	 * @param TolDegen - 公差值。
	 * @returns 生成的平面面 (Mx3dShapeFace)。
	 */
	Face(UMin: number, UMax: number, VMin: number, VMax: number, TolDegen: number): Mx3dShapeFace;
}
/**
 * 表示三维空间中的圆锥曲面。
 * 圆锥曲面由其顶点的半角、参考半径和坐标系定义。
 */
export declare class Mx3dGeomConicalSurface extends Mx3dGeomElementarySurface {
	/**
	 * 构造一个具有指定坐标系、半角和半径的圆锥曲面。
	 * @param A3 - 圆锥曲面的局部坐标系。
	 * @param Ang - 圆锥曲面的半角。其绝对值应在 [0, PI/2] 范围内。
	 * @param Radius - 圆锥曲面参考平面上的圆的半径。
	 */
	constructor(A3: Mx3dGeCSYSR, Ang: number, Radius: number);
	/**
	 * 设置放置平面中的圆锥曲面的半径。
	 * @param R - 新的半径。必须为非负值。
	 */
	SetRadius(R: number): void;
	/**
	 * 设置圆锥曲面的半角。
	 * @param Ang - 新的半角。其绝对值应在 ]0, PI/2[ 范围内。
	 */
	SetSemiAngle(Ang: number): void;
	/**
	 * 返回反转后的U参数。
	 * @param U - 原始U参数。
	 * @returns 反转后的U参数。
	 */
	UReversedParameter(U: number): number;
	/**
	 * 返回反转后的V参数。
	 * @param V - 原始V参数。
	 * @returns 反转后的V参数。
	 */
	VReversedParameter(V: number): number;
	/**
	 * 反转V参数方向。
	 */
	VReverse(): void;
	/**
	 * 变换参数。
	 * @param UV - 参数数组 [dU, dV]。
	 * @param T - 变换。
	 */
	TransformParameters(UV: [
		dU: number,
		dV: number
	], T: Mx3dGeTrsf): void;
	/**
	 * 计算并返回圆锥的顶点。顶点在圆锥的旋转轴的负侧（半角为正）或正侧（半角为负）。
	 * @returns 圆锥的顶点。
	 */
	Apex(): Mx3dGePoint;
	/**
	 * 返回圆锥曲面的参数范围。
	 * @param U1U2V1V2 - 参数范围数组 [dU1, dU2, dV1, dV2]。
	 */
	Bounds(U1U2V1V2: [
		dU1: number,
		dU2: number,
		dV1: number,
		dV2: number
	]): void;
	/**
	 * 返回圆锥曲面的隐式方程的系数。
	 * 方程形式：A1.X^2 + A2.Y^2 + A3.Z^2 + 2*(B1.X.Y + B2.X.Z + B3.Y.Z) + 2*(C1.X + C2.Y + C3.Z) + D = 0
	 * @param A1A2A3B1B2B3C1C2C3D - 系数数组 [A1, A2, A3, B1, B2, B3, C1, C2, C3, D]。
	 */
	Coefficients(A1A2A3B1B2B3C1C2C3D: [
		A1: number,
		A2: number,
		A3: number,
		B1: number,
		B2: number,
		B3: number,
		C1: number,
		C2: number,
		C3: number,
		D: number
	]): void;
	/**
	 * 返回圆锥曲面的参考半径。
	 * @returns 参考半径。
	 */
	RefRadius(): number;
	/**
	 * 返回圆锥顶点的半角。
	 * @returns 圆锥的半角。
	 */
	SemiAngle(): number;
	/**
	 * 检查U参数是否闭合。
	 * @returns 总是返回 true。
	 */
	IsUClosed(): boolean;
	/**
	 * 检查V参数是否闭合。
	 * @returns 总是返回 false。
	 */
	IsVClosed(): boolean;
	/**
	 * 检查U参数是否周期性。
	 * @returns 总是返回 true。
	 */
	IsUPeriodic(): boolean;
	/**
	 * 检查V参数是否周期性。
	 * @returns 总是返回 false。
	 */
	IsVPeriodic(): boolean;
	/**
	 * 计算并返回曲面上给定参数 (U, V) 处的点。
	 * @param U - U参数。
	 * @param V - V参数。
	 * @param P - 结果点。
	 */
	D0(U: number, V: number, P: Mx3dGePoint): void;
	/**
	 * 计算并返回曲面上给定参数 (U, V) 处的点及其在U和V方向的第一导数。
	 * @param U - U参数。
	 * @param V - V参数。
	 * @param P - 结果点。
	 * @param D1U - U方向的第一导数。
	 * @param D1V - V方向的第一导数。
	 */
	D1(U: number, V: number, P: Mx3dGePoint, D1U: Mx3dGeVec, D1V: Mx3dGeVec): void;
	/**
	 * 计算并返回曲面上给定参数 (U, V) 处的点及其在U和V方向的第一和第二导数。
	 * @param U - U参数。
	 * @param V - V参数。
	 * @param P - 结果点。
	 * @param D1U - U方向的第一导数。
	 * @param D1V - V方向的第一导数。
	 * @param D2U - U方向的第二导数。
	 * @param D2V - V方向的第二导数。
	 * @param D2UV - UV方向的混合导数。
	 */
	D2(U: number, V: number, P: Mx3dGePoint, D1U: Mx3dGeVec, D1V: Mx3dGeVec, D2U: Mx3dGeVec, D2V: Mx3dGeVec, D2UV: Mx3dGeVec): void;
	/**
	 * 计算并返回曲面上给定参数 (U, V) 处的点及其在U和V方向的第一、第二和第三导数。
	 * @param U - U参数。
	 * @param V - V参数。
	 * @param P - 结果点。
	 * @param D1U - U方向的第一导数。
	 * @param D1V - V方向的第一导数。
	 * @param D2U - U方向的第二导数。
	 * @param D2V - V方向的第二导数。
	 * @param D2UV - UV方向的混合导数。
	 * @param D3U - U方向的第三导数。
	 * @param D3V - V方向的第三导数。
	 * @param D3UUV - UU方向的混合导数。
	 * @param D3UVV - UV方向的混合导数。
	 */
	D3(U: number, V: number, P: Mx3dGePoint, D1U: Mx3dGeVec, D1V: Mx3dGeVec, D2U: Mx3dGeVec, D2V: Mx3dGeVec, D2UV: Mx3dGeVec, D3U: Mx3dGeVec, D3V: Mx3dGeVec, D3UUV: Mx3dGeVec, D3UVV: Mx3dGeVec): void;
	/**
	 * 计算并返回给定参数 (U, V) 处的指定阶数的导数。
	 * @param U - U参数。
	 * @param V - V参数。
	 * @param Nu - U方向的导数阶数。
	 * @param Nv - V方向的导数阶数。
	 * @returns 指定阶数的导数向量。
	 * @throws 如果Nu + Nv小于1，或Nu或Nv为负，则抛出异常。
	 */
	DN(U: number, V: number, Nu: number, Nv: number): Mx3dGeVec;
	/**
	 * 对圆锥曲面应用变换。
	 * @param T - 变换。
	 */
	Transform(T: Mx3dGeTrsf): void;
	/**
	 * 创建并返回一个此圆锥曲面的副本。
	 * @returns 圆锥曲面的副本。
	 */
	Copy(): Mx3dGeomObject;
	/**
	 * 返回对象的动态类型。
	 * @returns 动态类型的字符串表示。
	 */
	DynamicType(): string;
	/**
	 * @internal
	 */
	DynCast(theObject: Mx3dGeomObject): this;
	/**
	 * 父类对象转 Mx3dGeomConicalSurface 类对象
	 * @param theObject 父类对象
	 * @returns Mx3dGeomConicalSurface 类对象
	 */
	static DownCast(theObject: Mx3dGeomObject): Mx3dGeomConicalSurface;
	/**
	 * 根据圆锥曲面创建一个面。
	 * @param TolDegen - 简化面容差。
	 * @returns 创建的面对象。
	 */
	Face(TolDegen: number): Mx3dShapeFace;
	/**
	 * 根据给定的线和方向创建一个面。
	 * @param W - 给定的线。
	 * @param Inside - 内部方向标志。
	 * @returns 创建的面对象。
	 */
	Face(W: Mx3dShapeWire, Inside: boolean): Mx3dShapeFace;
	/**
	 * 根据指定的参数范围创建一个面。
	 * @param UMin - U参数的最小值。
	 * @param UMax - U参数的最大值。
	 * @param VMin - V参数的最小值。
	 * @param VMax - V参数的最大值。
	 * @param TolDegen - 简化面容差。
	 * @returns 创建的面对象。
	 */
	Face(UMin: number, UMax: number, VMin: number, VMax: number, TolDegen: number): Mx3dShapeFace;
}
/**
 * Mx3dGeomCylindricalSurface 类封装了圆柱面几何的功能，继承自 Mx3dGeomElementarySurface。
 */
export declare class Mx3dGeomCylindricalSurface extends Mx3dGeomElementarySurface {
	/**
	 * 构造函数，创建一个新的圆柱面对象。
	 * @param A3 圆柱面的局部坐标系。
	 * @param Radius 圆柱面的半径。
	 */
	constructor(A3: Mx3dGeCSYSR, Radius: number);
	/**
	 * 设置圆柱面的半径。
	 * @param R 新的半径值。
	 */
	SetRadius(R: number): void;
	/**
	 * 返回参数 U 在反向圆柱面上的对应参数值。
	 * @param U 参数 U。
	 * @returns 反向参数值。
	 */
	UReversedParameter(U: number): number;
	/**
	 * 返回参数 V 在反向圆柱面上的对应参数值。
	 * @param V 参数 V。
	 * @returns 反向参数值。
	 */
	VReversedParameter(V: number): number;
	/**
	 * 变换参数 U 和 V。
	 * @param UV 原始参数 [dU, dV]。
	 * @param T 变换矩阵。
	 */
	TransformParameters(UV: [
		dU: number,
		dV: number
	], T: Mx3dGeTrsf): void;
	/**
	 * 获取圆柱面的参数范围。
	 * @param U1U2V1V2 参数范围 [dU1, dU2, dV1, dV2]。
	 */
	Bounds(U1U2V1V2: [
		dU1: number,
		dU2: number,
		dV1: number,
		dV2: number
	]): void;
	/**
	 * 获取圆柱面方程的系数。
	 * @param A1A2A3B1B2B3C1C2C3D 方程系数 [A1, A2, A3, B1, B2, B3, C1, C2, C3, D]。
	 */
	Coefficients(A1A2A3B1B2B3C1C2C3D: [
		A1: number,
		A2: number,
		A3: number,
		B1: number,
		B2: number,
		B3: number,
		C1: number,
		C2: number,
		C3: number,
		D: number
	]): void;
	/**
	 * 返回圆柱面的半径。
	 * @returns 半径值。
	 */
	Radius(): number;
	/**
	 * 判断圆柱面在 U 方向是否闭合。
	 * @returns 如果是闭合的，返回 true，否则返回 false。
	 */
	IsUClosed(): boolean;
	/**
	 * 判断圆柱面在 V 方向是否闭合。
	 * @returns 如果是闭合的，返回 true，否则返回 false。
	 */
	IsVClosed(): boolean;
	/**
	 * 判断圆柱面在 U 方向是否周期性。
	 * @returns 如果是周期性的，返回 true，否则返回 false。
	 */
	IsUPeriodic(): boolean;
	/**
	 * 判断圆柱面在 V 方向是否周期性。
	 * @returns 如果是周期性的，返回 true，否则返回 false。
	 */
	IsVPeriodic(): boolean;
	/**
	 * 计算当前点在圆柱面上的位置及其法向量。
	 * @param U 参数 U。
	 * @param V 参数 V。
	 * @param P 存储点的位置。
	 */
	D0(U: number, V: number, P: Mx3dGePoint): void;
	/**
	 * 计算当前点在圆柱面上的位置及其一阶导数。
	 * @param U 参数 U。
	 * @param V 参数 V。
	 * @param P 存储点的位置。
	 * @param D1U 存储 U 方向的一阶导数。
	 * @param D1V 存储 V 方向的一阶导数。
	 */
	D1(U: number, V: number, P: Mx3dGePoint, D1U: Mx3dGeVec, D1V: Mx3dGeVec): void;
	/**
	 * 计算当前点在圆柱面上的位置及其一阶、二阶导数。
	 * @param U 参数 U。
	 * @param V 参数 V。
	 * @param P 存储点的位置。
	 * @param D1U 存储 U 方向的一阶导数。
	 * @param D1V 存储 V 方向的一阶导数。
	 * @param D2U 存储 U 方向的二阶导数。
	 * @param D2V 存储 V 方向的二阶导数。
	 * @param D2UV 存储 U 和 V 方向的混合二阶导数。
	 */
	D2(U: number, V: number, P: Mx3dGePoint, D1U: Mx3dGeVec, D1V: Mx3dGeVec, D2U: Mx3dGeVec, D2V: Mx3dGeVec, D2UV: Mx3dGeVec): void;
	/**
	 * 计算当前点在圆柱面上的位置及其一阶、二阶、三阶导数。
	 * @param U 参数 U。
	 * @param V 参数 V。
	 * @param P 存储点的位置。
	 * @param D1U 存储 U 方向的一阶导数。
	 * @param D1V 存储 V 方向的一阶导数。
	 * @param D2U 存储 U 方向的二阶导数。
	 * @param D2V 存储 V 方向的二阶导数。
	 * @param D2UV 存储 U 和 V 方向的混合二阶导数。
	 * @param D3U 存储 U 方向的三阶导数。
	 * @param D3V 存储 V 方向的三阶导数。
	 * @param D3UUV 存储 U 和 U 方向的混合三阶导数。
	 * @param D3UVV 存储 U 和 V 方向的混合三阶导数。
	 */
	D3(U: number, V: number, P: Mx3dGePoint, D1U: Mx3dGeVec, D1V: Mx3dGeVec, D2U: Mx3dGeVec, D2V: Mx3dGeVec, D2UV: Mx3dGeVec, D3U: Mx3dGeVec, D3V: Mx3dGeVec, D3UUV: Mx3dGeVec, D3UVV: Mx3dGeVec): void;
	/**
	 * 计算指定阶数的导数向量。
	 * @param U 参数 U。
	 * @param V 参数 V。
	 * @param Nu 导数阶数在 U 方向。
	 * @param Nv 导数阶数在 V 方向。
	 * @returns 导数向量。
	 */
	DN(U: number, V: number, Nu: number, Nv: number): Mx3dGeVec;
	/**
	 * 应用变换 T 到圆柱面。
	 * @param T 变换矩阵。
	 */
	Transform(T: Mx3dGeTrsf): void;
	/**
	 * 创建当前圆柱面的副本。
	 * @returns 圆柱面的副本。
	 */
	Copy(): Mx3dGeomObject;
	/**
	 * 获取当前对象的动态类型信息。
	 * @returns 对象的类型字符串。
	 */
	DynamicType(): string;
	/**
	 * @internal
	 */
	DynCast(theObject: Mx3dGeomObject): this;
	/**
	 * 父类对象转 Mx3dGeomCylindricalSurface 类对象
	 * @param theObject 父类对象
	 * @returns Mx3dGeomCylindricalSurface 类对象
	 */
	static DownCast(theObject: Mx3dGeomObject): Mx3dGeomCylindricalSurface;
	/**
	 * 创建圆柱面的面对象。
	 * @param TolDegen 面的退化容差。
	 * @returns 面对象。
	 */
	Face(TolDegen: number): Mx3dShapeFace;
	/**
	 * 创建圆柱面的面对象，指定是否包含内部区域。
	 * @param W 轮廓线。
	 * @param Inside 是否包含内部区域。
	 * @returns 面对象。
	 */
	Face(W: Mx3dShapeWire, Inside: boolean): Mx3dShapeFace;
	/**
	 * 创建圆柱面的面对象，指定参数范围。
	 * @param UMin 参数 U 的最小值。
	 * @param UMax 参数 U 的最大值。
	 * @param VMin 参数 V 的最小值。
	 * @param VMax 参数 V 的最大值。
	 * @param TolDegen 面的退化容差。
	 * @returns 面对象。
	 */
	Face(UMin: number, UMax: number, VMin: number, VMax: number, TolDegen: number): Mx3dShapeFace;
}
/**
 * 表示三维空间中的球面。
 * 此类封装了操作球面属性和方法的功能。
 */
export declare class Mx3dGeomSphericalSurface extends Mx3dGeomElementarySurface {
	/**
	 * 构造一个具有给定坐标系统和半径的球面。
	 * @param A3 表面局部坐标系统（Mx3dGeCSYSR）。
	 * @param Radius 球的半径。
	 */
	constructor(A3: Mx3dGeCSYSR, Radius: number);
	/**
	 * 设置球面半径。
	 * @param R 新的球面半径。必须为非负数。
	 */
	SetRadius(R: number): void;
	/**
	 * 计算在给定点上U参数方向反转后的U参数值。
	 * @param U 原始的U参数。
	 * @returns 反转后的U参数值。
	 */
	UReversedParameter(U: number): number;
	/**
	 * 计算在给定点上V参数方向反转后的V参数值。
	 * @param V 原始的V参数。
	 * @returns 反转后的V参数值。
	 */
	VReversedParameter(V: number): number;
	/**
	 * 计算球面面积。
	 * @returns 表面面积。
	 */
	Area(): number;
	/**
	 * 检索参数域的边界。
	 * @param U1U2V1V2 包含边界的数组：[dU1, dU2, dV1, dV2]。
	 */
	Bounds(U1U2V1V2: [
		dU1: number,
		dU2: number,
		dV1: number,
		dV2: number
	]): void;
	/**
	 * 设置球面隐式方程的系数。
	 * @param A1A2A3B1B2B3C1C2C3D 系数数组：[A1, A2, A3, B1, B2, B3, C1, C2, C3, D]。
	 */
	Coefficients(A1A2A3B1B2B3C1C2C3D: [
		A1: number,
		A2: number,
		A3: number,
		B1: number,
		B2: number,
		B3: number,
		C1: number,
		C2: number,
		C3: number,
		D: number
	]): void;
	/**
	 * 返回球面半径。
	 * @returns 球的半径。
	 */
	Radius(): number;
	/**
	 * 计算球面体积。
	 * @returns 表面体积。
	 */
	Volume(): number;
	/**
	 * 检查表面在U方向是否闭合。
	 * @returns 如果U方向闭合则为True，否则为False。
	 */
	IsUClosed(): boolean;
	/**
	 * 检查表面在V方向是否闭合。
	 * @returns 如果V方向闭合则为True，否则为False。
	 */
	IsVClosed(): boolean;
	/**
	 * 检查表面在U方向是否周期性。
	 * @returns 如果U方向周期性则为True，否则为False。
	 */
	IsUPeriodic(): boolean;
	/**
	 * 检查表面在V方向是否周期性。
	 * @returns 如果V方向周期性则为True，否则为False。
	 */
	IsVPeriodic(): boolean;
	/**
	 * 计算给定U和V参数的表面点。
	 * @param U U参数。
	 * @param V V参数。
	 * @param P 表面上的点。
	 */
	D0(U: number, V: number, P: Mx3dGePoint): void;
	/**
	 * 计算给定U和V参数的点及其一阶导数。
	 * @param U U参数。
	 * @param V V参数。
	 * @param P 表面上的点。
	 * @param D1U U方向的导数。
	 * @param D1V V方向的导数。
	 */
	D1(U: number, V: number, P: Mx3dGePoint, D1U: Mx3dGeVec, D1V: Mx3dGeVec): void;
	/**
	 * 计算给定U和V参数的点、一阶和二阶导数。
	 * @param U U参数。
	 * @param V V参数。
	 * @param P 表面上的点。
	 * @param D1U U方向的一阶导数。
	 * @param D1V V方向的一阶导数。
	 * @param D2U U方向的二阶导数。
	 * @param D2V V方向的二阶导数。
	 * @param D2UV 二阶混合导数。
	 */
	D2(U: number, V: number, P: Mx3dGePoint, D1U: Mx3dGeVec, D1V: Mx3dGeVec, D2U: Mx3dGeVec, D2V: Mx3dGeVec, D2UV: Mx3dGeVec): void;
	/**
	 * 计算给定U和V参数的点、一阶、二阶和三阶导数。
	 * @param U U参数。
	 * @param V V参数。
	 * @param P 表面上的点。
	 * @param D1U U方向的一阶导数。
	 * @param D1V V方向的一阶导数。
	 * @param D2U U方向的二阶导数。
	 * @param D2V V方向的二阶导数。
	 * @param D2UV 二阶混合导数。
	 * @param D3U U方向的三阶导数。
	 * @param D3V V方向的三阶导数。
	 * @param D3UUV 三阶混合导数（U和U）。
	 * @param D3UVV 三阶混合导数（U和V）。
	 */
	D3(U: number, V: number, P: Mx3dGePoint, D1U: Mx3dGeVec, D1V: Mx3dGeVec, D2U: Mx3dGeVec, D2V: Mx3dGeVec, D2UV: Mx3dGeVec, D3U: Mx3dGeVec, D3V: Mx3dGeVec, D3UUV: Mx3dGeVec, D3UVV: Mx3dGeVec): void;
	/**
	 * 计算在U和V方向上的指定阶数导数。
	 * @param U U参数。
	 * @param V V参数。
	 * @param Nu U方向上的导数阶数。
	 * @param Nv V方向上的导数阶数。
	 * @returns 第N阶导数向量。
	 */
	DN(U: number, V: number, Nu: number, Nv: number): Mx3dGeVec;
	/**
	 * 应用变换到球面。
	 * @param T 要应用的变换。
	 */
	Transform(T: Mx3dGeTrsf): void;
	/**
	 * 创建球面的副本。
	 * @returns 球面的新实例。
	 */
	Copy(): Mx3dGeomObject;
	/**
	 * 返回对象的动态类型。
	 * @returns 动态类型的字符串。
	 */
	DynamicType(): string;
	/**
	 * @internal
	 */
	DynCast(theObject: Mx3dGeomObject): this;
	/**
	 * 父类对象转 Mx3dGeomSphericalSurface 类对象
	 * @param theObject 父类对象
	 * @returns Mx3dGeomSphericalSurface 类对象
	 */
	static DownCast(theObject: Mx3dGeomObject): Mx3dGeomSphericalSurface;
	/**
	 * 使用退化容差生成表面的面。
	 * @param TolDegen 退化容差。
	 * @returns 表面表示的面。
	 */
	Face(TolDegen: number): Mx3dShapeFace;
	/**
	 * 使用线框和内部标志生成表面的面。
	 * @param W 定义边界的线框。
	 * @param Inside 布尔值，表示面是否在线框内。
	 * @returns 表面表示的面。
	 */
	Face(W: Mx3dShapeWire, Inside: boolean): Mx3dShapeFace;
	/**
	 * 使用指定的参数范围和退化容差生成表面的面。
	 * @param UMin 参数范围的最小U值。
	 * @param UMax 参数范围的最大U值。
	 * @param VMin 参数范围的最小V值。
	 * @param VMax 参数范围的最大V值。
	 * @param TolDegen 退化容差，用于处理几何退化情况。
	 * @returns 表面表示的面，通常是一个闭合的曲面片段。
	 */
	Face(UMin: number, UMax: number, VMin: number, VMax: number, TolDegen: number): Mx3dShapeFace;
}
/**
 * 表示三维空间中的环面（Toroidal Surface）。
 * 此类封装了操作环面属性和方法的功能。
 */
export declare class Mx3dGeomToroidalSurface extends Mx3dGeomElementarySurface {
	/**
	 * 构造一个具有给定坐标系统和主要、次要半径的环面。
	 * @param A3 表面局部坐标系统（Mx3dGeCSYSR）。
	 * @param MajorRadius 环面的主要半径。
	 * @param MinorRadius 环面的次要半径。
	 */
	constructor(A3: Mx3dGeCSYSR, MajorRadius: number, MinorRadius: number);
	/**
	 * 设置环面主要半径。
	 * @param MajorRadius 新的主要半径。必须为非负数。
	 */
	SetMajorRadius(MajorRadius: number): void;
	/**
	 * 设置环面次要半径。
	 * @param MinorRadius 新的次要半径。必须为非负数。
	 */
	SetMinorRadius(MinorRadius: number): void;
	/**
	 * 计算在给定U参数上的环面U方向反转后的参数值。
	 * @param U 原始的U参数。
	 * @returns 反转后的U参数值。
	 */
	UReversedParameter(U: number): number;
	/**
	 * 计算在给定V参数上的环面V方向反转后的参数值。
	 * @param V 原始的V参数。
	 * @returns 反转后的V参数值。
	 */
	VReversedParameter(V: number): number;
	/**
	 * 计算并返回环面的表面积。
	 * @returns 表面积。
	 */
	Area(): number;
	/**
	 * 设置参数范围的边界。
	 * @param U1U2V1V2 参数范围[U1, U2, V1, V2]。
	 */
	Bounds(U1U2V1V2: [
		dU1: number,
		dU2: number,
		dV1: number,
		dV2: number
	]): void;
	/**
	 * 获取隐式方程系数。
	 * @param Coef 系数数组，长度至少为31。
	 */
	Coefficients(Coef: number[]): void;
	/**
	 * 返回环面的主要半径。
	 * @returns 主要半径。
	 */
	MajorRadius(): number;
	/**
	 * 返回环面的次要半径。
	 * @returns 次要半径。
	 */
	MinorRadius(): number;
	/**
	 * 计算并返回环面的体积。
	 * @returns 体积。
	 */
	Volume(): number;
	/**
	 * 检查环面U方向是否闭合。
	 * @returns 如果U方向闭合则返回true，否则返回false。
	 */
	IsUClosed(): boolean;
	/**
	 * 检查环面V方向是否闭合。
	 * @returns 如果V方向闭合则返回true，否则返回false。
	 */
	IsVClosed(): boolean;
	/**
	 * 检查环面U方向是否周期性。
	 * @returns 如果U方向周期性则返回true，否则返回false。
	 */
	IsUPeriodic(): boolean;
	/**
	 * 检查环面V方向是否周期性。
	 * @returns 如果V方向周期性则返回true，否则返回false。
	 */
	IsVPeriodic(): boolean;
	/**
	 * 计算并返回指定U和V参数处的点。
	 * @param U 参数U。
	 * @param V 参数V。
	 * @param P 输出点（Mx3dGePoint）。
	 */
	D0(U: number, V: number, P: Mx3dGePoint): void;
	/**
	 * 计算当前点和U、V方向的一阶导数。
	 * @param U 参数U。
	 * @param V 参数V。
	 * @param P 输出点（Mx3dGePoint）。
	 * @param D1U 输出U方向的一阶导数（Mx3dGeVec）。
	 * @param D1V 输出V方向的一阶导数（Mx3dGeVec）。
	 */
	D1(U: number, V: number, P: Mx3dGePoint, D1U: Mx3dGeVec, D1V: Mx3dGeVec): void;
	/**
	 * 计算当前点、一阶和二阶导数。
	 * @param U 参数U。
	 * @param V 参数V。
	 * @param P 输出点（Mx3dGePoint）。
	 * @param D1U 输出U方向的一阶导数（Mx3dGeVec）。
	 * @param D1V 输出V方向的一阶导数（Mx3dGeVec）。
	 * @param D2U 输出U方向的二阶导数（Mx3dGeVec）。
	 * @param D2V 输出V方向的二阶导数（Mx3dGeVec）。
	 * @param D2UV 输出U,V方向的二阶混合导数（Mx3dGeVec）。
	 */
	D2(U: number, V: number, P: Mx3dGePoint, D1U: Mx3dGeVec, D1V: Mx3dGeVec, D2U: Mx3dGeVec, D2V: Mx3dGeVec, D2UV: Mx3dGeVec): void;
	/**
	 * 计算当前点、一阶、二阶和三阶导数。
	 * @param U 参数U。
	 * @param V 参数V。
	 * @param P 输出点（Mx3dGePoint）。
	 * @param D1U 输出U方向的一阶导数（Mx3dGeVec）。
	 * @param D1V 输出V方向的一阶导数（Mx3dGeVec）。
	 * @param D2U 输出U方向的二阶导数（Mx3dGeVec）。
	 * @param D2V 输出V方向的二阶导数（Mx3dGeVec）。
	 * @param D2UV 输出U,V方向的二阶混合导数（Mx3dGeVec）。
	 * @param D3U 输出U方向的三阶导数（Mx3dGeVec）。
	 * @param D3V 输出V方向的三阶导数（Mx3dGeVec）。
	 * @param D3UUV 输出U方向的二阶混合三阶导数（Mx3dGeVec）。
	 * @param D3UVV 输出V方向的二阶混合三阶导数（Mx3dGeVec）。
	 */
	D3(U: number, V: number, P: Mx3dGePoint, D1U: Mx3dGeVec, D1V: Mx3dGeVec, D2U: Mx3dGeVec, D2V: Mx3dGeVec, D2UV: Mx3dGeVec, D3U: Mx3dGeVec, D3V: Mx3dGeVec, D3UUV: Mx3dGeVec, D3UVV: Mx3dGeVec): void;
	/**
	 * 计算指定参数(U, V)处的高阶导数。
	 * @param U 参数U。
	 * @param V 参数V。
	 * @param Nu 高阶导数的U方向阶数。
	 * @param Nv 高阶导数的V方向阶数。
	 * @returns 高阶导数（Mx3dGeVec）。
	 */
	DN(U: number, V: number, Nu: number, Nv: number): Mx3dGeVec;
	/**
	 * 应用变换T到环面。
	 * @param T 变换（Mx3dGeTrsf）。
	 */
	Transform(T: Mx3dGeTrsf): void;
	/**
	 * 创建一个新的对象，它是此环面的副本。
	 * @returns 环面的副本（Mx3dGeomObject）。
	 */
	Copy(): Mx3dGeomObject;
	/**
	 * 返回对象的动态类型字符串。
	 * @returns 动态类型字符串。
	 */
	DynamicType(): string;
	/**
	 * @internal
	 */
	DynCast(theObject: Mx3dGeomObject): this;
	/**
	 * 父类对象转 Mx3dGeomToroidalSurface 类对象
	 * @param theObject 父类对象
	 * @returns Mx3dGeomToroidalSurface 类对象
	 */
	static DownCast(theObject: Mx3dGeomObject): Mx3dGeomToroidalSurface;
	/**
	 * 创建一个表示环面的平面（由面容表示）。
	 * @param TolDegen 退化容差。
	 * @returns 平面（Mx3dShapeFace）。
	 */
	Face(TolDegen: number): Mx3dShapeFace;
	/**
	 * 创建一个表示环面的平面（由线条表示）。
	 * @param W 线条（Mx3dShapeWire）。
	 * @param Inside 表示环面是否在内部。
	 * @returns 平面（Mx3dShapeFace）。
	 */
	Face(W: Mx3dShapeWire, Inside: boolean): Mx3dShapeFace;
	/**
	 * 创建一个表示环面的平面（指定U, V范围）。
	 * @param UMin 最小U参数。
	 * @param UMax 最大U参数。
	 * @param VMin 最小V参数。
	 * @param VMax 最大V参数。
	 * @param TolDegen 退化容差。
	 * @returns 平面（Mx3dShapeFace）。
	 */
	Face(UMin: number, UMax: number, VMin: number, VMax: number, TolDegen: number): Mx3dShapeFace;
}
/**
 * 表示一定范围内曲面的基类。
 */
export declare class Mx3dGeomBoundedSurface extends Mx3dGeomSurface {
	/**
	 * @internal
	 */
	constructor(p?: object);
	/**
	 * 返回对象的动态类型字符串。
	 * @returns 动态类型字符串。
	 */
	DynamicType(): string;
}
/**
 * 表示一个B样条曲面，继承自Mx3dGeomBoundedSurface。
 * 提供多种操作和查询方法来处理B样条曲面。
 */
export declare class Mx3dGeomBSplineSurface extends Mx3dGeomBoundedSurface {
	/**
	 * 构造函数用于创建一个B样条曲面。
	 * @param Poles 控制点数组，二维数组表示U方向和V方向的控制点。
	 * @param dUKnots U方向的节点序列。
	 * @param dVKnots V方向的节点序列。
	 * @param iUMults U方向节点的多重性。
	 * @param iVMults V方向节点的多重性。
	 * @param UDegree U方向的曲线阶数。
	 * @param VDegree V方向的曲线阶数。
	 * @param UPeriodic U方向是否为周期性。
	 * @param VPeriodic V方向是否为周期性。
	 */
	constructor(Poles: Mx3dGePoint[][], dUKnots: number[], dVKnots: number[], iUMults: number[], iVMults: number[], UDegree: number, VDegree: number, UPeriodic: boolean, VPeriodic: boolean);
	/**
   * 构造函数用于创建一个带权的B样条曲面。
   * @param Poles 控制点数组，二维数组表示U方向和V方向的控制点。
   * @param dWeights 控制点权重的二维数组。
   * @param dUKnots U方向的节点序列。
   * @param dVKnots V方向的节点序列。
   * @param iUMults U方向节点的多重性。
   * @param iVMults V方向节点的多重性。
   * @param UDegree U方向的曲线阶数。
   * @param VDegree V方向的曲线阶数。
   * @param UPeriodic U方向是否为周期性。
   * @param VPeriodic V方向是否为周期性。
   */
	constructor(Poles: Mx3dGePoint[][], dWeights: number[][], dUKnots: number[], dVKnots: number[], iUMults: number[], iVMults: number[], UDegree: number, VDegree: number, UPeriodic: boolean, VPeriodic: boolean);
	/**
	 * 交换U和V方向的节点序列。
	 */
	ExchangeUV(): void;
	/**
	 * 设置U方向为周期性。
	 */
	SetUPeriodic(): void;
	/**
	 * 设置V方向为周期性。
	 */
	SetVPeriodic(): void;
	/**
	 * 对节点序列进行周期化规范化。
	 * @param UV 代表U和V方向的参数。
	 */
	PeriodicNormalization(UV: [
		dU: number,
		dV: number
	]): void;
	/**
	 * 设置U方向的原点索引。
	 * @param Index 原点索引。
	 */
	SetUOrigin(Index: number): void;
	/**
	 * 设置V方向的原点索引。
	 * @param Index 原点索引。
	 */
	SetVOrigin(Index: number): void;
	/**
	 * 设置U方向为非周期性。
	 */
	SetUNotPeriodic(): void;
	/**
	 * 设置V方向为非周期性。
	 */
	SetVNotPeriodic(): void;
	/**
	 * 反转U方向节点序列。
	 */
	UReverse(): void;
	/**
	 * 反转V方向节点序列。
	 */
	VReverse(): void;
	/**
	 * 计算U方向反向参数。
	 * @param U 参数值。
	 * @returns 返回反向后的参数值。
	 */
	UReversedParameter(U: number): number;
	/**
	 * 计算V方向反向参数。
	 * @param V 参数值。
	 * @returns 返回反向后的参数值。
	 */
	VReversedParameter(V: number): number;
	/**
	 * 提高曲面的U和V方向阶数。
	 * @param UDegree 提高后的U方向阶数。
	 * @param VDegree 提高后的V方向阶数。
	 */
	IncreaseDegree(UDegree: number, VDegree: number): void;
	/**
	 * 插入U方向节点。
	 * @param dKnots 节点值数组。
	 * @param iMults 节点多重性数组。
	 * @param dParametricTolerance 参数容差。
	 * @param Add 是否添加到曲面中。
	 */
	InsertUKnots(dKnots: number[], iMults: number[], dParametricTolerance: number, Add: boolean): void;
	/**
	 * 插入V方向节点。
	 * @param dKnots 节点值数组。
	 * @param iMults 节点多重性数组。
	 * @param dParametricTolerance 参数容差。
	 * @param Add 是否添加到曲面中。
	 */
	InsertVKnots(dKnots: number[], iMults: number[], dParametricTolerance: number, Add: boolean): void;
	/**
	 * 移除U方向节点。
	 * @param iIndex 节点索引。
	 * @param iM 多重性。
	 * @param dTolerance 容差值。
	 * @returns 返回是否成功移除。
	 */
	RemoveUKnot(iIndex: number, iM: number, dTolerance: number): boolean;
	/**
	 * 移除V方向节点。
	 * @param iIndex 节点索引。
	 * @param iM 多重性。
	 * @param dTolerance 容差值。
	 * @returns 返回是否成功移除。
	 */
	RemoveVKnot(iIndex: number, iM: number, dTolerance: number): boolean;
	/**
	 * 增加U方向节点的多重性。
	 * @param UIndex 节点索引。
	 * @param M 多重性增量。
	 */
	IncreaseUMultiplicity(UIndex: number, M: number): void;
	/**
	 * 增加U方向节点多重性在指定区间内。
	 * @param FromI1 起始索引。
	 * @param ToI2 结束索引。
	 * @param M 多重性增量。
	 */
	IncreaseUMultiplicity(FromI1: number, ToI2: number, M: number): void;
	/**
	 * 增加U方向节点多重性在指定区间内，按步骤增加。
	 * @param FromI1 起始索引。
	 * @param ToI2 结束索引。
	 * @param Step 增量步骤。
	 */
	IncrementUMultiplicity(FromI1: number, ToI2: number, Step: number): void;
	/**
	 * 增加V方向节点的多重性。
	 * @param VIndex 节点索引。
	 * @param M 多重性增量。
	 */
	IncreaseVMultiplicity(VIndex: number, M: number): void;
	/**
	 * 增加V方向节点多重性在指定区间内。
	 * @param FromI1 起始索引。
	 * @param ToI2 结束索引。
	 * @param M 多重性增量。
	 */
	IncreaseVMultiplicity(FromI1: number, ToI2: number, M: number): void;
	/**
	 * 增加V方向节点多重性在指定区间内，按步骤增加。
	 * @param FromI1 起始索引。
	 * @param ToI2 结束索引。
	 * @param Step 增量步骤。
	 */
	IncrementVMultiplicity(FromI1: number, ToI2: number, Step: number): void;
	/**
	 * 插入U方向节点。
	 * @param U 节点值。
	 * @param M 多重性。
	 * @param ParametricTolerance 参数容差。
	 * @param Add 是否添加到曲面中。
	 */
	InsertUKnot(U: number, M: number, ParametricTolerance: number, Add: boolean): void;
	/**
	 * 插入V方向节点。
	 * @param V 节点值。
	 * @param M 多重性。
	 * @param ParametricTolerance 参数容差。
	 * @param Add 是否添加到曲面中。
	 */
	InsertVKnot(V: number, M: number, ParametricTolerance: number, Add: boolean): void;
	/**
	 * 获取指定U和V范围内的曲面片段。
	 * @param U1 起始U参数。
	 * @param U2 结束U参数。
	 * @param V1 起始V参数。
	 * @param V2 结束V参数。
	 */
	Segment(U1: number, U2: number, V1: number, V2: number): void;
	/**
	 * 检查并获取指定U和V范围内的曲面片段。
	 * @param U1 起始U参数。
	 * @param U2 结束U参数。
	 * @param V1 起始V参数。
	 * @param V2 结束V参数。
	 */
	CheckAndSegment(U1: number, U2: number, V1: number, V2: number): void;
	/**
	 * 设置U方向的节点值。
	 * @param UIndex 节点索引。
	 * @param K 新节点值。
	 */
	SetUKnot(UIndex: number, K: number): void;
	/**
	 * 设置U方向的节点值，包含多重性。
	 * @param UIndex 节点索引。
	 * @param K 新节点值。
	 * @param M 多重性。
	 */
	SetUKnot(UIndex: number, K: number, M: number): void;
	/**
	 * 设置V方向的节点值。
	 * @param VIndex 节点索引。
	 * @param K 新节点值。
	 */
	SetVKnot(VIndex: number, K: number): void;
	/**
	 * 设置V方向的节点值，包含多重性。
	 * @param VIndex 节点索引。
	 * @param K 新节点值。
	 * @param M 多重性。
	 */
	SetVKnot(VIndex: number, K: number, M: number): void;
	/**
	 * 设置U方向节点序列。
	 * @param dUK 新的U方向节点序列。
	 */
	SetUKnots(dUK: number[]): void;
	/**
	 * 设置V方向节点序列。
	 * @param dVK 新的V方向节点序列。
	 */
	SetVKnots(dVK: number[]): void;
	/**
	 * 定位U方向的节点。
	 * @param U 参数值。
	 * @param ParametricTolerance 参数容差。
	 * @param I1I2 返回的起始和结束节点索引。
	 * @param WithKnotRepetition 是否包含节点重复。
	 */
	LocateU(U: number, ParametricTolerance: number, I1I2: [
		iI1: number,
		iI2: number
	], WithKnotRepetition: boolean): void;
	/**
	 * 定位V方向的节点。
	 * @param V 参数值。
	 * @param ParametricTolerance 参数容差。
	 * @param I1I2 返回的起始和结束节点索引。
	 * @param WithKnotRepetition 是否包含节点重复。
	 */
	LocateV(V: number, ParametricTolerance: number, I1I2: [
		iI1: number,
		iI2: number
	], WithKnotRepetition: boolean): void;
	/**
	 * 设置指定U和V索引的控制点。
	 * @param UIndex U方向索引。
	 * @param VIndex V方向索引。
	 * @param P 控制点。
	 */
	SetPole(UIndex: number, VIndex: number, P: Mx3dGePoint): void;
	/**
	 * 设置指定U和V索引的控制点及权重。
	 * @param UIndex U方向索引。
	 * @param VIndex V方向索引。
	 * @param P 控制点。
	 * @param Weight 权重值。
	 */
	SetPole(UIndex: number, VIndex: number, P: Mx3dGePoint, Weight: number): void;
	/**
	 * 设置指定V方向索引的控制点列。
	 * @param VIndex V方向索引。
	 * @param CPoles 控制点数组。
	 */
	SetPoleCol(VIndex: number, CPoles: Mx3dGePoint[]): void;
	/**
	 * 设置指定V方向索引的控制点列及权重。
	 * @param VIndex V方向索引。
	 * @param CPoles 控制点数组。
	 * @param dCPoleWeights 控制点权重数组。
	 */
	SetPoleCol(VIndex: number, CPoles: Mx3dGePoint[], dCPoleWeights: number[]): void;
	/**
	 * 设置指定U方向索引的控制点行。
	 * @param UIndex U方向索引。
	 * @param CPoles 控制点数组。
	 */
	SetPoleRow(UIndex: number, CPoles: Mx3dGePoint[]): void;
	/**
	 * 设置指定U方向索引的控制点行及权重。
	 * @param UIndex U方向索引。
	 * @param CPoles 控制点数组。
	 * @param dCPoleWeights 控制点权重数组。
	 */
	SetPoleRow(UIndex: number, CPoles: Mx3dGePoint[], dCPoleWeights: number[]): void;
	/**
	 * 设置指定U和V索引的权重值。
	 * @param UIndex U方向索引。
	 * @param VIndex V方向索引。
	 * @param Weight 权重值。
	 */
	SetWeight(UIndex: number, VIndex: number, Weight: number): void;
	/**
	 * 设置指定V方向索引的权重列。
	 * @param VIndex V方向索引。
	 * @param dCPoleWeights 权重数组。
	 */
	SetWeightCol(VIndex: number, dCPoleWeights: number[]): void;
	/**
	 * 设置指定U方向索引的权重行。
	 * @param UIndex U方向索引。
	 * @param dCPoleWeights 权重数组。
	 */
	SetWeightRow(UIndex: number, dCPoleWeights: number[]): void;
	/**
	 * 移动指定U和V索引的控制点。
	 * @param U U参数值。
	 * @param V V参数值。
	 * @param P 新的控制点。
	 * @param UIndex1 U方向起始索引。
	 * @param UIndex2 U方向结束索引。
	 * @param VIndex1 V方向起始索引。
	 * @param VIndex2 V方向结束索引。
	 * @param UFULVFVL 索引数组。
	 */
	MovePoint(U: number, V: number, P: Mx3dGePoint, UIndex1: number, UIndex2: number, VIndex1: number, VIndex2: number, UFULVFVL: [
		iUF: number,
		iUL: number,
		iVF: number,
		iVL: number
	]): void;
	/**
	 * 检查U方向是否为周期性。
	 * @returns 返回是否为周期性。
	 */
	IsUClosed(): boolean;
	/**
	 * 检查V方向是否为周期性。
	 * @returns 返回是否为周期性。
	 */
	IsVClosed(): boolean;
	/**
	 * 检查U方向是否为连续N阶。
	 * @param N 连续阶数。
	 * @returns 返回是否为连续N阶。
	 */
	IsCNu(N: number): boolean;
	/**
	 * 检查V方向是否为连续N阶。
	 * @param N 连续阶数。
	 * @returns 返回是否为连续N阶。
	 */
	IsCNv(N: number): boolean;
	/**
	 * 检查U方向是否为周期性。
	 * @returns 返回是否为周期性。
	 */
	IsUPeriodic(): boolean;
	/**
	 * 检查U方向是否为有理。
	 * @returns 返回是否为有理。
	 */
	IsURational(): boolean;
	/**
	 * 检查V方向是否为周期性。
	 * @returns 返回是否为周期性。
	 */
	IsVPeriodic(): boolean;
	/**
	 * 检查V方向是否为有理。
	 * @returns 返回是否为有理。
	 */
	IsVRational(): boolean;
	/**
	 * 获取曲面的边界。
	 * @param U1U2V1V2 边界参数。
	 */
	Bounds(U1U2V1V2: [
		dU1: number,
		dU2: number,
		dV1: number,
		dV2: number
	]): void;
	/**
	 * 获取曲面的连续性。
	 * @returns 返回曲面的连续性类型。
	 */
	Continuity(): MdGe.MxGAShapeEnum;
	/**
	 * 获取U方向的第一个节点索引。
	 * @returns 返回第一个节点索引。
	 */
	FirstUKnotIndex(): number;
	/**
	 * 获取V方向的第一个节点索引。
	 * @returns 返回第一个节点索引。
	 */
	FirstVKnotIndex(): number;
	/**
	 * 获取U方向的最后一个节点索引。
	 * @returns 返回最后一个节点索引。
	 */
	LastUKnotIndex(): number;
	/**
	 * 获取V方向的最后一个节点索引。
	 * @returns 返回最后一个节点索引。
	 */
	LastVKnotIndex(): number;
	/**
	 * 获取U方向节点数目。
	 * @returns 返回节点数目。
	 */
	NbUKnots(): number;
	/**
	 * 获取U方向控制点数目。
	 * @returns 返回控制点数目。
	 */
	NbUPoles(): number;
	/**
	 * 获取V方向节点数目。
	 * @returns 返回节点数目。
	 */
	NbVKnots(): number;
	/**
	 * 获取V方向控制点数目。
	 * @returns 返回控制点数目。
	 */
	NbVPoles(): number;
	/**
	 * 获取指定U和V索引的控制点。
	 * @param UIndex U方向索引。
	 * @param VIndex V方向索引。
	 * @returns 返回控制点。
	 */
	Pole(UIndex: number, VIndex: number): Mx3dGePoint;
	/**
	 * 获取所有控制点。
	 * @returns 返回控制点数组。
	 */
	Poles(): Mx3dGePoint[][];
	/**
	 * 获取U方向的阶数。
	 * @returns 返回U方向的阶数。
	 */
	UDegree(): number;
	/**
	 * 获取指定U方向的节点值。
	 * @param UIndex 节点索引。
	 * @returns 返回节点值。
	 */
	UKnot(UIndex: number): number;
	/**
	 * 获取U方向节点数组。
	 * @returns 返回节点数组。
	 */
	UKnots(): number[];
	/**
	 * 获取U方向节点序列。
	 * @returns 返回节点序列。
	 */
	UKnotSequence(): number[];
	/**
	 * 获取U方向节点多重性。
	 * @param UIndex 节点索引。
	 * @returns 返回节点多重性。
	 */
	UMultiplicity(UIndex: number): number;
	/**
	 * 获取U方向节点多重性数组。
	 * @returns 返回节点多重性数组。
	 */
	UMultiplicities(): number[];
	/**
	 * 获取V方向的阶数。
	 * @returns 返回V方向的阶数。
	 */
	VDegree(): number;
	/**
	 * 获取指定V方向的节点值。
	 * @param VIndex 节点索引。
	 * @returns 返回节点值。
	 */
	VKnot(VIndex: number): number;
	/**
	 * 获取V方向节点数组。
	 * @returns 返回节点数组。
	 */
	VKnots(): number[];
	/**
	 * 获取V方向节点序列。
	 * @returns 返回节点序列。
	 */
	VKnotSequence(): number[];
	/**
	 * 获取V方向节点多重性。
	 * @param VIndex 节点索引。
	 * @returns 返回节点多重性。
	 */
	VMultiplicity(VIndex: number): number;
	/**
	 * 获取V方向节点多重性数组。
	 * @returns 返回节点多重性数组。
	 */
	VMultiplicities(): number[];
	/**
	 * 获取指定U和V索引的权重值。
	 * @param UIndex U方向索引。
	 * @param VIndex V方向索引。
	 * @returns 返回权重值。
	 */
	Weight(UIndex: number, VIndex: number): number;
	/**
	 * 获取所有权重数组。
	 * @returns 返回权重数组。
	 */
	Weights(): number[][];
	/**
	 * 计算指定参数点的零阶导数。
	 * @param U 参数U值。
	 * @param V 参数V值。
	 * @param P 返回的点。
	 */
	D0(U: number, V: number, P: Mx3dGePoint): void;
	/**
	 * 计算指定参数点的一阶导数。
	 * @param U 参数U值。
	 * @param V 参数V值。
	 * @param P 返回的点。
	 * @param D1U U方向的一阶导数。
	 * @param D1V V方向的一阶导数。
	 */
	D1(U: number, V: number, P: Mx3dGePoint, D1U: Mx3dGeVec, D1V: Mx3dGeVec): void;
	/**
	 * 计算指定参数点的二阶导数。
	 * @param U 参数U值。
	 * @param V 参数V值。
	 * @param P 返回的点。
	 * @param D1U U方向的一阶导数。
	 * @param D1V V方向的一阶导数。
	 * @param D2U U方向的二阶导数。
	 * @param D2V V方向的二阶导数。
	 * @param D2UV U和V方向的混合二阶导数。
	 */
	D2(U: number, V: number, P: Mx3dGePoint, D1U: Mx3dGeVec, D1V: Mx3dGeVec, D2U: Mx3dGeVec, D2V: Mx3dGeVec, D2UV: Mx3dGeVec): void;
	/**
	 * 计算指定参数点的三阶导数。
	 * @param U 参数U值。
	 * @param V 参数V值。
	 * @param P 返回的点。
	 * @param D1U U方向的一阶导数。
	 * @param D1V V方向的一阶导数。
	 * @param D2U U方向的二阶导数。
	 * @param D2V V方向的二阶导数。
	 * @param D2UV U和V方向的混合二阶导数。
	 * @param D3U U方向的三阶导数。
	 * @param D3V V方向的三阶导数。
	 * @param D3UUV U和U方向的混合三阶导数。
	 * @param D3UVV U和V方向的混合三阶导数。
	 */
	D3(U: number, V: number, P: Mx3dGePoint, D1U: Mx3dGeVec, D1V: Mx3dGeVec, D2U: Mx3dGeVec, D2V: Mx3dGeVec, D2UV: Mx3dGeVec, D3U: Mx3dGeVec, D3V: Mx3dGeVec, D3UUV: Mx3dGeVec, D3UVV: Mx3dGeVec): void;
	/**
	 * 计算指定参数点的N阶导数。
	 * @param U 参数U值。
	 * @param V 参数V值。
	 * @param Nu 导数阶数U。
	 * @param Nv 导数阶数V。
	 * @returns 返回导数向量。
	 */
	DN(U: number, V: number, Nu: number, Nv: number): Mx3dGeVec;
	/**
	 * 计算局部参数点的零阶导数。
	 * @param U 参数U值。
	 * @param V 参数V值。
	 * @param FromUK1 从U方向的起始节点。
	 * @param ToUK2 到U方向的结束节点。
	 * @param FromVK1 从V方向的起始节点。
	 * @param ToVK2 到V方向的结束节点。
	 * @param P 返回的点。
	 */
	LocalD0(U: number, V: number, FromUK1: number, ToUK2: number, FromVK1: number, ToVK2: number, P: Mx3dGePoint): void;
	/**
	 * 计算局部参数点的一阶导数。
	 * @param U 参数U值。
	 * @param V 参数V值。
	 * @param FromUK1 从U方向的起始节点。
	 * @param ToUK2 到U方向的结束节点。
	 * @param FromVK1 从V方向的起始节点。
	 * @param ToVK2 到V方向的结束节点。
	 * @param P 返回的点。
	 * @param D1U U方向的一阶导数。
	 * @param D1V V方向的一阶导数。
	 */
	LocalD1(U: number, V: number, FromUK1: number, ToUK2: number, FromVK1: number, ToVK2: number, P: Mx3dGePoint, D1U: Mx3dGeVec, D1V: Mx3dGeVec): void;
	/**
	 * 计算局部参数点的二阶导数。
	 * @param U 参数U值。
	 * @param V 参数V值。
	 * @param FromUK1 从U方向的起始节点。
	 * @param ToUK2 到U方向的结束节点。
	 * @param FromVK1 从V方向的起始节点。
	 * @param ToVK2 到V方向的结束节点。
	 * @param P 返回的点。
	 * @param D1U U方向的一阶导数。
	 * @param D1V V方向的一阶导数。
	 * @param D2U U方向的二阶导数。
	 * @param D2V V方向的二阶导数。
	 * @param D2UV U和V方向的混合二阶导数。
	 */
	LocalD2(U: number, V: number, FromUK1: number, ToUK2: number, FromVK1: number, ToVK2: number, P: Mx3dGePoint, D1U: Mx3dGeVec, D1V: Mx3dGeVec, D2U: Mx3dGeVec, D2V: Mx3dGeVec, D2UV: Mx3dGeVec): void;
	/**
	 * 计算局部参数点的三阶导数。
	 * @param U 参数U值。
	 * @param V 参数V值。
	 * @param FromUK1 从U方向的起始节点。
	 * @param ToUK2 到U方向的结束节点。
	 * @param FromVK1 从V方向的起始节点。
	 * @param ToVK2 到V方向的结束节点。
	 * @param P 返回的点。
	 * @param D1U U方向的一阶导数。
	 * @param D1V V方向的一阶导数。
	 * @param D2U U方向的二阶导数。
	 * @param D2V V方向的二阶导数。
	 * @param D2UV U和V方向的混合二阶导数。
	 * @param D3U U方向的三阶导数。
	 * @param D3V V方向的三阶导数。
	 * @param D3UUV U和U方向的混合三阶导数。
	 * @param D3UVV U和V方向的混合三阶导数。
	 */
	LocalD3(U: number, V: number, FromUK1: number, ToUK2: number, FromVK1: number, ToVK2: number, P: Mx3dGePoint, D1U: Mx3dGeVec, D1V: Mx3dGeVec, D2U: Mx3dGeVec, D2V: Mx3dGeVec, D2UV: Mx3dGeVec, D3U: Mx3dGeVec, D3V: Mx3dGeVec, D3UUV: Mx3dGeVec, D3UVV: Mx3dGeVec): void;
	/**
	 * 计算局部参数点的N阶导数。
	 * @param U 参数U值。
	 * @param V 参数V值。
	 * @param FromUK1 从U方向的起始节点。
	 * @param ToUK2 到U方向的结束节点。
	 * @param FromVK1 从V方向的起始节点。
	 * @param ToVK2 到V方向的结束节点。
	 * @param Nu 导数阶数U。
	 * @param Nv 导数阶数V。
	 * @returns 返回导数向量。
	 */
	LocalDN(U: number, V: number, FromUK1: number, ToUK2: number, FromVK1: number, ToVK2: number, Nu: number, Nv: number): Mx3dGeVec;
	/**
	 * 在局部范围内计算曲面上的点。
	 * @param U 参数U值。
	 * @param V 参数V值。
	 * @param FromUK1 U方向起始索引。
	 * @param ToUK2 U方向结束索引。
	 * @param FromVK1 V方向起始索引。
	 * @param ToVK2 V方向结束索引。
	 * @returns 返回计算点的二维点。
	 */
	LocalValue(U: number, V: number, FromUK1: number, ToUK2: number, FromVK1: number, ToVK2: number): Mx3dGePoint;
	/**
	 * 应用变换矩阵到曲面。
	 * @param T 变换矩阵。
	 */
	Transform(T: Mx3dGeTrsf): void;
	/**
	 * 复制当前曲面对象。
	 * @returns 返回一个新的曲面对象。
	 */
	Copy(): Mx3dGeomObject;
	/**
	 * 获取动态类型名称。
	 * @returns 返回类型名称的字符串。
	 */
	DynamicType(): string;
	/**
	 * @internal
	 */
	DynCast(theObject: Mx3dGeomObject): this;
	/**
	 * 父类对象转 Mx3dGeomBSplineSurface 类对象
	 * @param theObject 父类对象
	 * @returns Mx3dGeomBSplineSurface 类对象
	 */
	static DownCast(theObject: Mx3dGeomObject): Mx3dGeomBSplineSurface;
	/**
	 * 根据容忍度生成面片。
	 * @param TolDegen 容忍度。
	 * @returns 返回生成的面片对象。
	 */
	Face(TolDegen: number): Mx3dShapeFace;
	/**
	 * 根据线条和是否在内部生成面片。
	 * @param W 线条对象。
	 * @param Inside 是否在内部。
	 * @returns 返回生成的面片对象。
	 */
	Face(W: Mx3dShapeWire, Inside: boolean): Mx3dShapeFace;
	/**
	 * 根据U、V范围和容忍度生成面片。
	 * @param UMin U方向最小值。
	 * @param UMax U方向最大值。
	 * @param VMin V方向最小值。
	 * @param VMax V方向最大值。
	 * @param TolDegen 容忍度。
	 * @returns 返回生成的面片对象。
	 */
	Face(UMin: number, UMax: number, VMin: number, VMax: number, TolDegen: number): Mx3dShapeFace;
}
/**
 * 表示一个Bezier曲面，继承自Mx3dGeomBoundedSurface。
 * 提供多种操作和查询方法来处理Bezier曲面。
 */
export declare class Mx3dGeomBezierSurface extends Mx3dGeomBoundedSurface {
	/**
	 * 构造函数用于创建一个Bezier曲面。
	 * @param SurfacePoles 控制点数组，二维数组形式。
	 * @param PoleWeights 控制点权重数组（可选）。
	 */
	constructor(SurfacePoles: Mx3dGePoint[][], PoleWeights?: number[][]);
	/**
	 * 交换U和V方向的顺序。
	 */
	ExchangeUV(): void;
	/**
	 * 增加曲面的阶数。
	 * @param UDeg U方向的增加阶数。
	 * @param VDeg V方向的增加阶数。
	 */
	Increase(UDeg: number, VDeg: number): void;
	/**
	 * 在指定列后插入一个新的控制点列。
	 * @param VIndex 列的索引。
	 * @param CPoles 要插入的控制点数组。
	 * @param CPoleWeights 控制点权重数组（可选）。
	 */
	InsertPoleColAfter(VIndex: number, CPoles: Mx3dGePoint[], CPoleWeights?: number[]): void;
	/**
	 * 在指定列前插入一个新的控制点列。
	 * @param VIndex 列的索引。
	 * @param CPoles 要插入的控制点数组。
	 * @param CPoleWeights 控制点权重数组（可选）。
	 */
	InsertPoleColBefore(VIndex: number, CPoles: Mx3dGePoint[], CPoleWeights?: number[]): void;
	/**
	 * 在指定行后插入一个新的控制点行。
	 * @param UIndex 行的索引。
	 * @param CPoles 要插入的控制点数组。
	 * @param CPoleWeights 控制点权重数组（可选）。
	 */
	InsertPoleRowAfter(UIndex: number, CPoles: Mx3dGePoint[], CPoleWeights?: number[]): void;
	/**
	 * 在指定行前插入一个新的控制点行。
	 * @param UIndex 行的索引。
	 * @param CPoles 要插入的控制点数组。
	 * @param CPoleWeights 控制点权重数组（可选）。
	 */
	InsertPoleRowBefore(UIndex: number, CPoles: Mx3dGePoint[], CPoleWeights?: number[]): void;
	/**
	 * 移除指定列的控制点。
	 * @param VIndex 列的索引。
	 */
	RemovePoleCol(VIndex: number): void;
	/**
	 * 移除指定行的控制点。
	 * @param UIndex 行的索引。
	 */
	RemovePoleRow(UIndex: number): void;
	/**
	 * 定义曲面的一个部分，指定U和V的范围。
	 * @param U1 起始U值。
	 * @param U2 结束U值。
	 * @param V1 起始V值。
	 * @param V2 结束V值。
	 */
	Segment(U1: number, U2: number, V1: number, V2: number): void;
	/**
	 * 设置指定位置的控制点和权重。
	 * @param UIndex U方向的索引。
	 * @param VIndex V方向的索引。
	 * @param P 控制点位置。
	 * @param Weight 控制点权重（可选）。
	 */
	SetPole(UIndex: number, VIndex: number, P: Mx3dGePoint, Weight?: number): void;
	/**
	 * 设置指定列的控制点和权重。
	 * @param VIndex 列的索引。
	 * @param CPoles 控制点数组。
	 * @param CPoleWeights 控制点权重数组（可选）。
	 */
	SetPoleCol(VIndex: number, CPoles: Mx3dGePoint[], CPoleWeights?: number[]): void;
	/**
	 * 设置指定行的控制点和权重。
	 * @param UIndex 行的索引。
	 * @param CPoles 控制点数组。
	 * @param CPoleWeights 控制点权重数组（可选）。
	 */
	SetPoleRow(UIndex: number, CPoles: Mx3dGePoint[], CPoleWeights?: number[]): void;
	/**
	 * 设置指定控制点的权重。
	 * @param UIndex U方向的索引。
	 * @param VIndex V方向的索引。
	 * @param Weight 权重值。
	 */
	SetWeight(UIndex: number, VIndex: number, Weight: number): void;
	/**
	 * 设置指定列的控制点权重。
	 * @param VIndex 列的索引。
	 * @param CPoleWeights 控制点权重数组。
	 */
	SetWeightCol(VIndex: number, CPoleWeights: number[]): void;
	/**
	 * 设置指定行的控制点权重。
	 * @param UIndex 行的索引。
	 * @param CPoleWeights 控制点权重数组。
	 */
	SetWeightRow(UIndex: number, CPoleWeights: number[]): void;
	/**
	 * 反转U方向的参数。
	 */
	UReverse(): void;
	/**
	 * 计算反向U参数。
	 * @param U 参数U值。
	 * @returns 返回反向参数。
	 */
	UReversedParameter(U: number): number;
	/**
	 * 反转V方向的参数。
	 */
	VReverse(): void;
	/**
	 * 计算反向V参数。
	 * @param V 参数V值。
	 * @returns 返回反向参数。
	 */
	VReversedParameter(V: number): number;
	/**
	 * 获取曲面的边界范围。
	 * @param U1U2V1V2 范围数组。
	 */
	Bounds(U1U2V1V2: [
		dU1: number,
		dU2: number,
		dV1: number,
		dV2: number
	]): void;
	/**
	 * 获取曲面的连续性。
	 * @returns 返回连续性枚举值。
	 */
	Continuity(): MdGe.MxGAShapeEnum;
	/**
	 * 计算曲面在指定点的零阶导数。
	 * @param U 参数U值。
	 * @param V 参数V值。
	 * @param P 输出点。
	 */
	D0(U: number, V: number, P: Mx3dGePoint): void;
	/**
	 * 计算曲面在指定点的一级导数。
	 * @param U 参数U值。
	 * @param V 参数V值。
	 * @param P 输出点。
	 * @param D1U 输出U方向的一阶导数向量。
	 * @param D1V 输出V方向的一阶导数向量。
	 */
	D1(U: number, V: number, P: Mx3dGePoint, D1U: Mx3dGeVec, D1V: Mx3dGeVec): void;
	/**
	 * 计算曲面在指定点的二阶导数。
	 * @param U 参数U值。
	 * @param V 参数V值。
	 * @param P 输出点。
	 * @param D1U 输出U方向的一阶导数向量。
	 * @param D1V 输出V方向的一阶导数向量。
	 * @param D2U 输出U方向的二阶导数向量。
	 * @param D2V 输出V方向的二阶导数向量。
	 * @param D2UV 输出UV方向的二阶导数向量。
	 */
	D2(U: number, V: number, P: Mx3dGePoint, D1U: Mx3dGeVec, D1V: Mx3dGeVec, D2U: Mx3dGeVec, D2V: Mx3dGeVec, D2UV: Mx3dGeVec): void;
	/**
	 * 计算曲面在指定点的三阶导数。
	 * @param U 参数U值。
	 * @param V 参数V值。
	 * @param P 输出点。
	 * @param D1U 输出U方向的一阶导数向量。
	 * @param D1V 输出V方向的一阶导数向量。
	 * @param D2U 输出U方向的二阶导数向量。
	 * @param D2V 输出V方向的二阶导数向量。
	 * @param D2UV 输出UV方向的二阶导数向量。
	 * @param D3U 输出U方向的三阶导数向量。
	 * @param D3V 输出V方向的三阶导数向量。
	 * @param D3UUV 输出UU方向的三阶导数向量。
	 * @param D3UVV 输出UV方向的三阶导数向量。
	 */
	D3(U: number, V: number, P: Mx3dGePoint, D1U: Mx3dGeVec, D1V: Mx3dGeVec, D2U: Mx3dGeVec, D2V: Mx3dGeVec, D2UV: Mx3dGeVec, D3U: Mx3dGeVec, D3V: Mx3dGeVec, D3UUV: Mx3dGeVec, D3UVV: Mx3dGeVec): void;
	/**
	 * 计算曲面在指定点的N阶导数。
	 * @param U 参数U值。
	 * @param V 参数V值。
	 * @param Nu U方向阶数。
	 * @param Nv V方向阶数。
	 * @returns 返回导数向量。
	 */
	DN(U: number, V: number, Nu: number, Nv: number): Mx3dGeVec;
	/**
	 * 获取U方向上的控制点数量。
	 * @returns 返回U方向控制点数量。
	 */
	NbUPoles(): number;
	/**
	 * 获取V方向上的控制点数量。
	 * @returns 返回V方向控制点数量。
	 */
	NbVPoles(): number;
	/**
	 * 获取指定控制点位置。
	 * @param UIndex U方向的索引。
	 * @param VIndex V方向的索引。
	 * @returns 返回控制点位置。
	 */
	Pole(UIndex: number, VIndex: number): Mx3dGePoint;
	/**
	 * 获取所有控制点数组。
	 * @returns 返回控制点二维数组。
	 */
	Poles(): Mx3dGePoint[][];
	/**
	 * 获取U方向的阶数。
	 * @returns 返回U方向的阶数。
	 */
	UDegree(): number;
	/**
	 * 获取指定控制点的权重。
	 * @param UIndex U方向的索引。
	 * @param VIndex V方向的索引。
	 * @returns 返回权重值。
	 */
	Weight(UIndex: number, VIndex: number): number;
	/**
	 * 获取所有控制点权重数组。
	 * @returns 返回控制点权重二维数组。
	 */
	Weights(): number[][];
	/**
	 * 判断U方向是否闭合。
	 * @returns 返回是否闭合的布尔值。
	 */
	IsUClosed(): boolean;
	/**
	 * 判断V方向是否闭合。
	 * @returns 返回是否闭合的布尔值。
	 */
	IsVClosed(): boolean;
	/**
	 * 判断U方向上的连续阶数。
	 * @param N 阶数。
	 * @returns 返回是否连续的布尔值。
	 */
	IsCNu(N: number): boolean;
	/**
	 * 判断V方向上的连续阶数。
	 * @param N 阶数。
	 * @returns 返回是否连续的布尔值。
	 */
	IsCNv(N: number): boolean;
	/**
	 * 判断U方向是否周期性。
	 * @returns 返回是否周期性的布尔值。
	 */
	IsUPeriodic(): boolean;
	/**
	 * 判断V方向是否周期性。
	 * @returns 返回是否周期性的布尔值。
	 */
	IsVPeriodic(): boolean;
	/**
	 * 判断U方向是否为有理曲面。
	 * @returns 返回是否有理曲面的布尔值。
	 */
	IsURational(): boolean;
	/**
	 * 判断V方向是否为有理曲面。
	 * @returns 返回是否有理曲面的布尔值。
	 */
	IsVRational(): boolean;
	/**
	 * 应用变换矩阵到曲面。
	 * @param T 变换矩阵。
	 */
	Transform(T: Mx3dGeTrsf): void;
	/**
	 * 复制当前曲面对象。
	 * @returns 返回一个新的曲面对象。
	 */
	Copy(): Mx3dGeomObject;
	DynCast(theObject: Mx3dGeomObject): this;
	static DownCast(theObject: Mx3dGeomObject): Mx3dGeomBezierSurface;
	/**
	 * 根据容忍度生成面片。
	 * @param TolDegen 容忍度。
	 * @returns 返回生成的面片对象。
	 */
	Face(TolDegen: number): Mx3dShapeFace;
	/**
	 * 根据线条和是否在内部生成面片。
	 * @param W 线条对象。
	 * @param Inside 是否在内部。
	 * @returns 返回生成的面片对象。
	 */
	Face(W: Mx3dShapeWire, Inside: boolean): Mx3dShapeFace;
	/**
	 * 根据U、V范围和容忍度生成面片。
	 * @param UMin U方向最小值。
	 * @param UMax U方向最大值。
	 * @param VMin V方向最小值。
	 * @param VMax V方向最大值。
	 * @param TolDegen 容忍度。
	 * @returns 返回生成的面片对象。
	 */
	Face(UMin: number, UMax: number, VMin: number, VMax: number, TolDegen: number): Mx3dShapeFace;
}
/**
 * 表示三维图形中的材料属性，封装了材料的各种属性和设置方法。
 */
export declare class Mx3dGeMaterial extends Mx3dBaseObject {
	/**
	 * 创建一个默认材料对象。
	 */
	constructor();
	/**
	 * 创建一个具有指定名称的材料对象。
	 * @param theName 材料名称，参见 MdGe.MxNameOfMaterial。
	 */
	constructor(theName: MdGe.MxNameOfMaterial);
	/**
	 * 返回材料的名称。
	 * @returns 材料名称。
	 */
	Name(): MdGe.MxNameOfMaterial;
	/**
	 * 返回请求的材料名称。
	 * @returns 请求的材料名称。
	 */
	RequestedName(): MdGe.MxNameOfMaterial;
	/**
	 * 返回材料的字符串表示形式。
	 * @returns 材料的字符串名称。
	 */
	StringName(): string;
	/**
	 * 返回材料的名称（字符串形式）。
	 * @returns 材料的字符串名称。
	 */
	MaterialName(): string;
	/**
	 * 设置材料的名称。
	 * @param theName 新的材料名称。
	 */
	SetMaterialName(theName: string): void;
	/**
	 * 重置材料属性为默认值。
	 */
	Reset(): void;
	/**
	 * 返回材料的颜色。
	 * @returns 材料的颜色。
	 */
	Color(): Mx3dGeColor;
	/**
	 * 设置材料的颜色。
	 * @param theColor 新的颜色。
	 */
	SetColor(theColor: Mx3dGeColor): void;
	/**
	 * 返回透明度系数（0.0为完全透明，1.0为完全不透明）。
	 * @returns 透明度系数。
	 */
	Transparency(): number;
	/**
	 * 返回反透明度系数（0.0为完全透明，1.0为完全不透明）。
	 * @returns 反透明度系数。
	 */
	Alpha(): number;
	/**
	 * 设置透明度系数。
	 * @param theValue 透明度系数（0.0至1.0）。
	 */
	SetTransparency(theValue: number): void;
	/**
	 * 设置反透明度系数。
	 * @param theValue 反透明度系数（0.0至1.0）。
	 */
	SetAlpha(theValue: number): void;
	/**
	 * 返回环境光颜色。
	 * @returns 环境光颜色。
	 */
	AmbientColor(): Mx3dGeColor;
	/**
	 * 设置环境光颜色。
	 * @param theColor 新的环境光颜色。
	 */
	SetAmbientColor(theColor: Mx3dGeColor): void;
	/**
	 * 返回漫反射颜色。
	 * @returns 漫反射颜色。
	 */
	DiffuseColor(): Mx3dGeColor;
	/**
	 * 设置漫反射颜色。
	 * @param theColor 新的漫反射颜色。
	 */
	SetDiffuseColor(theColor: Mx3dGeColor): void;
	/**
	 * 返回镜面反射颜色。
	 * @returns 镜面反射颜色。
	 */
	SpecularColor(): Mx3dGeColor;
	/**
	 * 设置镜面反射颜色。
	 * @param theColor 新的镜面反射颜色。
	 */
	SetSpecularColor(theColor: Mx3dGeColor): void;
	/**
	 * 返回发光颜色。
	 * @returns 发光颜色。
	 */
	EmissiveColor(): Mx3dGeColor;
	/**
	 * 设置发光颜色。
	 * @param theColor 新的发光颜色。
	 */
	SetEmissiveColor(theColor: Mx3dGeColor): void;
	/**
	 * 返回材料的光泽度。
	 * @returns 光泽度值。
	 */
	Shininess(): number;
	/**
	 * 设置材料的光泽度。
	 * @param theValue 新的光泽度值（通常在0到1之间）。
	 */
	SetShininess(theValue: number): void;
	/**
	 * 增加光泽度。
	 * @param theDelta 增加的百分比。
	 */
	IncreaseShine(theDelta: number): void;
	/**
	 * 返回折射率。
	 * @returns 折射率值。
	 */
	RefractionIndex(): number;
	/**
	 * 设置折射率。
	 * @param theValue 新的折射率值，必须大于等于1.0。
	 */
	SetRefractionIndex(theValue: number): void;
	/**
	 * 检查指定类型的反射模式是否启用。
	 * @param theType 反射类型，参见 MdGe.MxTypeOfReflection。
	 * @returns 如果指定类型的反射模式启用，则返回 true，否则返回 false。
	 */
	ReflectionMode(theType: MdGe.MxTypeOfReflection): boolean;
	/**
	 * 返回材料类型。
	 * @returns 材料类型，参见 MdGe.MxTypeOfMaterial。
	 */
	MaterialType(): MdGe.MxTypeOfMaterial;
	/**
	 * 设置材料类型。
	 * @param theType 新的材料类型，参见 MdGe.MxTypeOfMaterial。
	 */
	SetMaterialType(theType: MdGe.MxTypeOfMaterial): void;
	/**
	 * 检查当前材料是否与另一个材料不同。
	 * @param theOther 另一个材料对象。
	 * @returns 如果当前材料与另一个材料不同，则返回 true，否则返回 false。
	 */
	IsDifferent(theOther: Mx3dGeMaterial): boolean;
	/**
	 * 检查当前材料是否与另一个材料相等。
	 * @param theOther 另一个材料对象。
	 * @returns 如果当前材料与另一个材料相等，则返回 true，否则返回 false。
	 */
	IsEqual(theOther: Mx3dGeMaterial): boolean;
}
/**
 * 表示线样式。
 */
export declare class Mx3dAspectLine extends Mx3dAspectObject {
	/**
	 * 构造函数，创建一个指定颜色，线型，线宽的线样式对象。
	 * @param theColor 颜色。
	 * @param theType 线型。
	 * @param theWidth 线宽。
	 */
	constructor(theColor: Mx3dGeColor, theType: MdGe.MxTypeOfLine, theWidth: number);
	/**
	 * 设置线样式对象的颜色。
	 * @param theColor 要设置的颜色对象（Mx3dGeColor）。
	 */
	SetColor(theColor: Mx3dGeColor): void;
	/**
	 * 设置线样式对象的线型。
	 * @param theType 线型。
	 */
	SetTypeOfLine(theType: MdGe.MxTypeOfLine): void;
	/**
	 * 设置线样式对象的线宽。
	 * @param theWidth 线宽。
	 */
	SetWidth(theWidth: number): void;
}
/**
 * 表示用于定义文本显示属性的类。
 * 此类封装了设置文本颜色、字体、高度、角度、对齐方式和方向的方法。
 */
export declare class Mx3dAspectText extends Mx3dAspectObject {
	/**
	 * 创建一个默认的文字样式对象。
	 */
	constructor();
	/**
	 * 设置文本显示的颜色。
	 * @param theColor 要设置的颜色对象（Mx3dGeColor）。
	 */
	SetColor(theColor: Mx3dGeColor): void;
	/**
	 * 设置文本显示的字体。
	 * @param theFont 要设置的字体名称。
	 */
	SetFont(theFont: string): void;
	/**
	 * 设置文本显示的高度。
	 * @param theHeight 要设置的文本高度。
	 */
	SetHeight(theHeight: number): void;
	/**
	 * 设置文本显示的角度。
	 * @param theAngle 要设置的文本角度。
	 */
	SetAngle(theAngle: number): void;
	/**
	 * 获取文本显示的高度。
	 * @returns 文本的高度。
	 */
	Height(): number;
	/**
	 * 获取文本显示的角度。
	 * @returns 文本的角度。
	 */
	Angle(): number;
	/**
	 * 设置文本的水平对齐方式。
	 * @param theJustification 要设置的水平对齐方式（MdGe.MxHorizontalTextAlignment）。
	 */
	SetHorizontalJustification(theJustification: MdGe.MxHorizontalTextAlignment): void;
	/**
	 * 设置文本的垂直对齐方式。
	 * @param theJustification 要设置的垂直对齐方式（MdGe.MxVerticalTextAlignment）。
	 */
	SetVerticalJustification(theJustification: MdGe.MxVerticalTextAlignment): void;
	/**
	 * 设置文本的显示方向。
	 * @param theOrientation 要设置的文本方向（MdGe.MxTextPath）。
	 */
	SetOrientation(theOrientation: MdGe.MxTextPath): void;
	/**
	 * 获取文本的水平对齐方式。
	 * @returns 水平对齐方式（MdGe.MxHorizontalTextAlignment）。
	 */
	HorizontalJustification(): MdGe.MxHorizontalTextAlignment;
	/**
	 * 获取文本的垂直对齐方式。
	 * @returns 垂直对齐方式（MdGe.MxVerticalTextAlignment）。
	 */
	VerticalJustification(): MdGe.MxVerticalTextAlignment;
	/**
	 * 获取文本的显示方向。
	 * @returns 文本方向（MdGe.MxTextPath）。
	 */
	Orientation(): MdGe.MxTextPath;
}
/**
 * Mx3dAspectArrow 类用于定义箭头的显示属性。
 * 该类提供了设置箭头角度、长度、颜色和缩放特性的方法。
 */
export declare class Mx3dAspectArrow extends Mx3dAspectObject {
	/**
	 * 构造一个箭头显示属性对象。
	 */
	constructor();
	/**
	 * 构造一个具有指定角度和长度的箭头显示属性对象。
	 * @param anAngle 箭头的角度。
	 * @param aLength 箭头的长度。
	 */
	constructor(anAngle: number, aLength: number);
	/**
	 * 设置箭头的角度。
	 * @param anAngle 要设置的箭头角度。
	 */
	SetAngle(anAngle: number): void;
	/**
	 * 获取箭头的当前角度。
	 * @returns 当前箭头的角度。
	 */
	Angle(): number;
	/**
	 * 设置箭头的长度。
	 * @param theLength 要设置的箭头长度。
	 */
	SetLength(theLength: number): void;
	/**
	 * 获取箭头的当前长度。
	 * @returns 当前箭头的长度。
	 */
	Length(): number;
	/**
	 * 设置箭头是否可缩放。
	 * @param theIsZoomable 如果为 true，箭头是可缩放的；否则为 false。
	 */
	SetZoomable(theIsZoomable: boolean): void;
	/**
	 * 检查箭头是否可缩放。
	 * @returns 如果箭头是可缩放的，则返回 true；否则返回 false。
	 */
	IsZoomable(): boolean;
	/**
	 * 设置箭头的颜色。
	 * @param theColor 要设置的箭头颜色。
	 */
	SetColor(theColor: Mx3dGeColor): void;
}
/**
 * Mx3dAspectDim 类定义了在 3D 表示中显示尺寸的属性。
 * 这包括尺寸测量相关的线条、文本和箭头的设置。
 */
export declare class Mx3dAspectDim extends Mx3dAspectObject {
	/**
	 * 构造函数，创建一个默认的显示尺寸的属性对象。
	 */
	constructor();
	/**
	 * 设置尺寸线条的显示属性。
	 * @param theAspect - 线条显示属性。
	 */
	SetLineAspect(theAspect: Mx3dAspectLine): void;
	/**
	 * 设置尺寸文本的显示属性。
	 * @param theAspect - 文本显示属性。
	 */
	SetTextAspect(theAspect: Mx3dAspectText): void;
	/**
	 * 检查尺寸文本是否为 3D。
	 * @returns 如果文本为 3D，返回 true，否则返回 false。
	 */
	IsText3d(): boolean;
	/**
	 * 设置尺寸文本为 3D 或 2D。
	 * @param isText3d - 如果为 true，将文本设置为 3D；否则为 2D。
	 */
	MakeText3d(isText3d: boolean): void;
	/**
	 * 检查 3D 尺寸文本是否有阴影。
	 * @returns 如果文本有阴影，返回 true，否则返回 false。
	 */
	IsTextShaded(): boolean;
	/**
	 * 开启或关闭 3D 尺寸文本的阴影。
	 * @param theIsTextShaded - 如果为 true，开启阴影；否则关闭阴影。
	 */
	MakeTextShaded(theIsTextShaded: boolean): void;
	/**
	 * 检查箭头是否为 3D。
	 * @returns 如果箭头为 3D，返回 true，否则返回 false。
	 */
	IsArrows3d(): boolean;
	/**
	 * 设置箭头为 3D 或 2D。
	 * @param theIsArrows3d - 如果为 true，将箭头设置为 3D；否则为 2D。
	 */
	MakeArrows3d(theIsArrows3d: boolean): void;
	/**
	 * 检查是否显示单位。
	 * @returns 如果显示单位，返回 true，否则返回 false。
	 */
	IsUnitsDisplayed(): boolean;
	/**
	 * 设置是否显示单位。
	 * @param theIsDisplayed - 如果为 true，显示单位；否则不显示。
	 */
	MakeUnitsDisplayed(theIsDisplayed: boolean): void;
	/**
	 * 设置箭头的方向（外部或内部）。
	 * @param theArrowOrient - 箭头方向。
	 */
	SetArrowOrientation(theArrowOrient: MdGe.MxDimensionArrowOrientation): void;
	/**
	 * 获取箭头的方向。
	 * @returns 箭头方向。
	 */
	ArrowOrientation(): MdGe.MxDimensionArrowOrientation;
	/**
	 * 设置文本的垂直位置。
	 * @param thePosition - 文本的垂直位置。
	 */
	SetTextVerticalPosition(thePosition: MdGe.MxDimensionTextVerticalPosition): void;
	/**
	 * 获取文本的垂直位置。
	 * @returns 文本的垂直位置。
	 */
	TextVerticalPosition(): MdGe.MxDimensionTextVerticalPosition;
	/**
	 * 设置文本的水平位置。
	 * @param thePosition - 文本的水平位置。
	 */
	SetTextHorizontalPosition(thePosition: MdGe.MxDimensionTextHorizontalPosition): void;
	/**
	 * 获取文本的水平位置。
	 * @returns 文本的水平位置。
	 */
	TextHorizontalPosition(): MdGe.MxDimensionTextHorizontalPosition;
	/**
	 * 设置尺寸箭头的显示属性。
	 * @param theAspect - 箭头显示属性。
	 */
	SetArrowAspect(theAspect: Mx3dAspectArrow): void;
	/**
	 * 为尺寸的所有部分（线条、箭头和文本）设置相同的颜色。
	 * @param theColor - 颜色值。
	 */
	SetCommonColor(theColor: Mx3dGeColor): void;
	/**
	 * 设置延伸尺寸的大小。
	 * @param theSize - 尺寸值。
	 */
	SetExtensionSize(theSize: number): void;
	/**
	 * 获取延伸尺寸的大小。
	 * @returns 尺寸值。
	 */
	ExtensionSize(): number;
	/**
	 * 设置箭头尾部的大小（无文本的延伸）。
	 * @param theSize - 尺寸值。
	 */
	SetArrowTailSize(theSize: number): void;
	/**
	 * 获取箭头尾部的大小。
	 * @returns 尺寸值。
	 */
	ArrowTailSize(): number;
	/**
	 * 设置用于格式化尺寸值标签的语法格式。
	 * @param theFormat - 格式字符串。
	 */
	SetValueStringFormat(theFormat: string): void;
	/**
	 * 获取尺寸值标签的格式。
	 * @returns 格式字符串。
	 */
	ValueStringFormat(): string;
}
/**
 * @class Mx3dDimDiameter
 * @extends Mx3dDimObject
 *
 * 表示3D环境中的直径尺寸。该类封装了在圆形或可以通过其直径进行测量的形状上创建、管理和显示直径尺寸的逻辑。
 * 它与几何定义和表示方面集成，以便在3D空间中实现精确的尺寸标注。
 */
export declare class Mx3dDimDiameter extends Mx3dDimObject {
	/**
	 * 构造直径尺寸，针对指定的圆形。
	 * @param theCircle 要测量的圆形。
	 */
	constructor(theCircle: Mx3dGeCircle);
	/**
	 * 构造直径尺寸，针对指定的圆形，并按照给定的平面进行定向。
	 * @param theCircle 要测量的圆形。
	 * @param thePlane 定义尺寸首选定向的平面。
	 */
	constructor(theCircle: Mx3dGeCircle, thePlane: Mx3dGePlane);
	/**
	 * @returns 返回该尺寸正在测量的圆形。
	 */
	Circle(): Mx3dGeCircle;
	/**
	 * @returns 返回圆上的锚点，用于此直径尺寸。
	 */
	AnchorPoint(): Mx3dGePoint;
	/**
	 * @returns 返回正在测量的形状对象。
	 */
	Shape(): Mx3dShapeObject;
	/**
	 * 设置要测量的几何体。
	 * @param theCircle 要测量的圆形。
	 */
	SetMeasuredGeometry(theCircle: Mx3dGeCircle): void;
	/**
	 * 设置文本位置。
	 * @param theTextPos 文本位置点。
	 */
	SetTextPosition(theTextPos: Mx3dGePoint): void;
	/**
	 * 获取文本位置。
	 * @returns 返回文本位置点。
	 */
	GetTextPosition(): Mx3dGePoint;
	/**
	 * 设置显示单位。
	 * @param theUnits 单位字符串。
	 */
	SetDisplayUnits(theUnits: string): void;
	/**
	 * 设置模型单位。
	 * @param theUnits 单位字符串。
	 */
	SetModelUnits(theUnits: string): void;
	/**
	 * 获取当前的尺寸值。
	 * @returns 返回当前的尺寸值。
	 */
	GetValue(): number;
	/**
	 * 设置计算的尺寸值。
	 */
	SetComputedValue(): void;
	/**
	 * 设置自定义尺寸值。
	 * @param theValue 自定义尺寸值。
	 */
	SetCustomValue(theValue: number): void;
	/**
	 * 获取当前的平面。
	 * @returns 返回当前的平面。
	 */
	GetPlane(): Mx3dGePlane;
	/**
	 * 获取几何类型。
	 * @returns 返回几何类型。
	 */
	GetGeometryType(): number;
	/**
	 * 设置自定义平面。
	 * @param thePlane 自定义平面。
	 */
	SetCustomPlane(thePlane: Mx3dGePlane): void;
	/**
	 * 取消自定义平面。
	 */
	UnsetCustomPlane(): void;
	/**
	 * 判断文本位置是否为自定义。
	 * @returns 返回布尔值，表示文本位置是否为自定义。
	 */
	IsTextPositionCustom(): boolean;
	/**
	 * 设置尺寸的显示外观。
	 * @param theDimensionAspect 尺寸外观。
	 */
	SetDimensionAspect(theDimensionAspect: Mx3dAspectDim): void;
	/**
	 * 获取尺寸类型。
	 * @returns 返回尺寸类型。
	 */
	KindOfDimension(): MdGe.MxKindOfDimension;
	/**
	 * 取消固定文本位置。
	 */
	UnsetFixedTextPosition(): void;
	/**
	 * 获取二维文本的选择容差。
	 * @returns 返回二维文本的选择容差。
	 */
	SelToleranceForText2d(): number;
	/**
	 * 设置二维文本的选择容差。
	 * @param theTol 容差值。
	 */
	SetSelToleranceForText2d(theTol: number): void;
	/**
	 * 获取尺寸线位置距离。
	 * @returns 返回尺寸线位置距离。
	 */
	GetFlyout(): number;
	/**
	 * 设置尺寸线位置距离。
	 * @param theFlyout 尺寸线位置距离值。
	 */
	SetFlyout(theFlyout: number): void;
	/**
	 * 判断当前尺寸是否有效。
	 * @returns 返回布尔值，表示尺寸是否有效。
	 */
	IsValid(): boolean;
}
/**
 * @class Mx3dDimRadius
 * @extends Mx3dDimObject
 *
 * 表示3D环境中的半径尺寸。该类封装了在圆形或可以通过其半径进行测量的形状上创建、管理和显示半径尺寸的逻辑。
 * 它与几何定义和表示方面集成，以便在3D空间中实现精确的尺寸标注。
 */
export declare class Mx3dDimRadius extends Mx3dDimObject {
	/**
	 * 构造半径尺寸，针对指定的圆形。
	 * @param theCircle 要测量的圆形。
	 */
	constructor(theCircle: Mx3dGeCircle);
	/**
	 * 构造半径尺寸，针对指定的圆形，并按照给定的锚点进行定向。
	 * @param theCircle 要测量的圆形。
	 * @param theAnchorPoint 用于定向的锚点，必须位于圆上。
	 */
	constructor(theCircle: Mx3dGeCircle, theAnchorPoint: Mx3dGePoint);
	/**
	 * 获取正在测量的圆形。
	 * @returns 返回该尺寸正在测量的圆形。
	 */
	Circle(): Mx3dGeCircle;
	/**
	 * 获取圆上的锚点，用于此半径尺寸。
	 * @returns 返回圆上的锚点。
	 */
	AnchorPoint(): Mx3dGePoint;
	/**
	 * 获取测量的形状。
	 * @returns 返回测量的形状。
	 */
	Shape(): Mx3dShapeObject;
	/**
	 * 设置测量的圆形。
	 * @param theCircle 要测量的圆形。
	 */
	SetMeasuredGeometry(theCircle: Mx3dGeCircle): void;
	/**
	 * 设置测量的圆形，并指定锚点。
	 * @param theCircle 要测量的圆形。
	 * @param theAnchorPoint 用于定向的锚点，必须位于圆上。
	 * @param theHasAnchor 是否使用锚点。
	 */
	SetMeasuredGeometry(theCircle: Mx3dGeCircle, theAnchorPoint: Mx3dGePoint, theHasAnchor: boolean): void;
	/**
	 * 设置文本位置。
	 * @param theTextPos 文本的位置。
	 */
	SetTextPosition(theTextPos: Mx3dGePoint): void;
	/**
	 * 获取文本位置。
	 * @returns 返回文本位置。
	 */
	GetTextPosition(): Mx3dGePoint;
	/**
	 * 获取尺寸值。
	 * @returns 返回尺寸值。
	 */
	GetValue(): number;
	/**
	 * 设置计算的尺寸值。
	 */
	SetComputedValue(): void;
	/**
	 * 设置自定义的尺寸值。
	 * @param theValue 自定义的尺寸值。
	 */
	SetCustomValue(theValue: number): void;
	/**
	 * 获取尺寸平面。
	 * @returns 返回尺寸平面。
	 */
	GetPlane(): Mx3dGePlane;
	/**
	 * 获取几何类型。
	 * @returns 返回几何类型。
	 */
	GetGeometryType(): number;
	/**
	 * 设置自定义平面。
	 * @param thePlane 自定义平面。
	 */
	SetCustomPlane(thePlane: Mx3dGePlane): void;
	/**
	 * 取消自定义平面。
	 */
	UnsetCustomPlane(): void;
	/**
	 * 检查文本位置是否为自定义。
	 * @returns 返回是否为自定义文本位置。
	 */
	IsTextPositionCustom(): boolean;
	/**
	 * 设置尺寸的外观。
	 * @param theDimensionAspect 尺寸的外观。
	 */
	SetDimensionAspect(theDimensionAspect: Mx3dAspectDim): void;
	/**
	 * 获取尺寸类型。
	 * @returns 返回尺寸类型。
	 */
	KindOfDimension(): MdGe.MxKindOfDimension;
	/**
	 * 取消固定文本位置。
	 */
	UnsetFixedTextPosition(): void;
	/**
	 * 获取2D文本选择公差。
	 * @returns 返回2D文本选择公差。
	 */
	SelToleranceForText2d(): number;
	/**
	 * 设置2D文本选择公差。
	 * @param theTol 2D文本选择公差。
	 */
	SetSelToleranceForText2d(theTol: number): void;
	/**
	 * 获取尺寸线位置距离。
	 * @returns 返回尺寸线位置距离。
	 */
	GetFlyout(): number;
	/**
	 * 设置尺寸线位置距离。
	 * @param theFlyout 尺寸线位置距离。
	 */
	SetFlyout(theFlyout: number): void;
	/**
	 * 检查该半径尺寸是否有效。
	 * @returns 返回是否有效。
	 */
	IsValid(): boolean;
}
/**
 * @class Mx3dDimAngle
 * @extends Mx3dDimObject
 *
 * 表示3D环境中的角度尺寸。该类封装了在不同几何体（如线段、点和面）之间创建、管理和显示角度尺寸的逻辑。
 * 它集成了几何定义和显示参数，以便在3D空间中实现精确的角度标注。
 */
export declare class Mx3dDimAngle extends Mx3dDimObject {
	/**
	 * 构造角度尺寸，针对指定的两条交叉边。
	 * @param theFirstEdge 第一条边。
	 * @param theSecondEdge 第二条边。
	 */
	constructor(theFirstEdge: Mx3dShapeEdge, theSecondEdge: Mx3dShapeEdge);
	/**
	 * 构造角度尺寸，针对指定的三点。
	 * @param theFirstPoint 第一点。
	 * @param theSecondPoint 第二点（角度中心点）。
	 * @param theThirdPoint 第三点。
	 */
	constructor(theFirstPoint: Mx3dGePoint, theSecondPoint: Mx3dGePoint, theThirdPoint: Mx3dGePoint);
	/**
	 * @returns 返回角度的第一点。
	 */
	FirstPoint(): Mx3dGePoint;
	/**
	 * @returns 返回角度的第二点。
	 */
	SecondPoint(): Mx3dGePoint;
	/**
	 * @returns 返回角度的中心点。
	 */
	CenterPoint(): Mx3dGePoint;
	/**
	 * @returns 返回第一个形状对象。
	 */
	FirstShape(): Mx3dShapeObject;
	/**
	 * @returns 返回第二个形状对象。
	 */
	SecondShape(): Mx3dShapeObject;
	/**
	 * @returns 返回第三个形状对象。
	 */
	ThirdShape(): Mx3dShapeObject;
	/**
	 * 设置测量几何体为圆锥面。
	 * @param theCone 圆锥面。
	 */
	SetMeasuredGeometry(theCone: Mx3dShapeFace): void;
	/**
	 * 设置测量几何体为两条交叉边。
	 * @param theFirstEdge 第一条边。
	 * @param theSecondEdge 第二条边。
	 */
	SetMeasuredGeometry(theFirstEdge: Mx3dShapeEdge, theSecondEdge: Mx3dShapeEdge): void;
	/**
	 * 设置测量几何体为三点。
	 * @param theFirstPoint 第一点。
	 * @param theSecondPoint 第二点（角度中心点）。
	 * @param theThridPoint 第三点。
	 */
	SetMeasuredGeometry(theFirstPoint: Mx3dGePoint, theSecondPoint: Mx3dGePoint, theThridPoint: Mx3dGePoint): void;
	/**
	 * 设置文本位置。
	 * @param theTextPos 文本位置点。
	 */
	SetTextPosition(theTextPos: Mx3dGePoint): void;
	/**
	 * @returns 返回文本位置点。
	 */
	GetTextPosition(): Mx3dGePoint;
	/**
	 * @returns 返回显示单位字符串。
	 */
	GetDisplayUnits(): string;
	/**
	 * @returns 返回模型单位字符串。
	 */
	GetModelUnits(): string;
	/**
	 * 设置显示单位字符串。
	 * @param theUnits 显示单位。
	 */
	SetDisplayUnits(theUnits: string): void;
	/**
	 * 设置模型单位字符串。
	 * @param theUnits 模型单位。
	 */
	SetModelUnits(theUnits: string): void;
	/**
	 * 设置角度类型。
	 * @param theType 角度类型。
	 */
	SetType(theType: MdGe.MxTypeOfAngle): void;
	/**
	 * @returns 返回当前角度类型。
	 */
	GetType(): MdGe.MxTypeOfAngle;
	/**
	 * 设置箭头可见性类型。
	 * @param theType 箭头可见性类型。
	 */
	SetArrowsVisibility(theType: MdGe.MxTypeOfAngleArrowVisibility): void;
	/**
	 * @returns 返回箭头可见性类型。
	 */
	GetArrowsVisibility(): MdGe.MxTypeOfAngleArrowVisibility;
	/**
	 * @returns 返回角度值。
	 */
	GetValue(): number;
	/**
	 * 设置计算值。
	 */
	SetComputedValue(): void;
	/**
	 * 设置自定义值。
	 * @param theValue 自定义角度值。
	 */
	SetCustomValue(theValue: number): void;
	/**
	 * @returns 返回角度的平面。
	 */
	GetPlane(): Mx3dGePlane;
	/**
	 * @returns 返回几何类型。
	 */
	GetGeometryType(): number;
	/**
	 * 设置自定义平面。
	 * @param thePlane 自定义平面。
	 */
	SetCustomPlane(thePlane: Mx3dGePlane): void;
	/**
	 * 取消设置自定义平面。
	 */
	UnsetCustomPlane(): void;
	/**
	 * @returns 返回文本位置是否自定义。
	 */
	IsTextPositionCustom(): boolean;
	/**
	 * 设置尺寸外观。
	 * @param theDimensionAspect 尺寸外观。
	 */
	SetDimensionAspect(theDimensionAspect: Mx3dAspectDim): void;
	/**
	 * @returns 返回尺寸的类型。
	 */
	KindOfDimension(): MdGe.MxKindOfDimension;
	/**
	 * 取消设置固定文本位置。
	 */
	UnsetFixedTextPosition(): void;
	/**
	 * @returns 返回二维文本选择公差。
	 */
	SelToleranceForText2d(): number;
	/**
	 * 设置二维文本选择公差。
	 * @param theTol 选择公差。
	 */
	SetSelToleranceForText2d(theTol: number): void;
	/**
	 * @returns 返回尺寸线位置距离。
	 */
	GetFlyout(): number;
	/**
	 * 设置尺寸线位置距离。
	 * @param theFlyout 尺寸线位置距离。
	 */
	SetFlyout(theFlyout: number): void;
	/**
	 * @returns 返回是否有效。
	 */
	IsValid(): boolean;
}
/**
 * @class Mx3dDimLength
 * @extends Mx3dDimObject
 *
 * 表示3D环境中的长度尺寸。该类封装了在不同几何体（如点和面）之间创建、管理和显示长度尺寸的逻辑。
 * 它集成了几何定义和显示参数，以便在3D空间中实现精确的长度标注。
 */
export declare class Mx3dDimLength extends Mx3dDimObject {
	/**
	 * 构造一个空的长度尺寸对象。
	 */
	constructor();
	/**
	 * 构造长度尺寸，针对指定的边和平面。
	 * @param theEdge 测量的边。
	 * @param thePlane 测量的平面。
	 */
	constructor(theEdge: Mx3dShapeEdge, thePlane: Mx3dGePlane);
	/**
	 * 构造长度尺寸，针对指定的两点和平面。
	 * @param theFirstPoint 第一点。
	 * @param theSecondPoint 第二点。
	 * @param thePlane 测量的平面。
	 */
	constructor(theFirstPoint: Mx3dGePoint, theSecondPoint: Mx3dGePoint, thePlane: Mx3dGePlane);
	/**
	 * 返回长度尺寸的第一点。
	 * @returns 第一点。
	 */
	FirstPoint(): Mx3dGePoint;
	/**
	 * 返回长度尺寸的第二点。
	 * @returns 第二点。
	 */
	SecondPoint(): Mx3dGePoint;
	/**
	 * 返回长度尺寸的第一形状对象。
	 * @returns 第一形状对象。
	 */
	FirstShape(): Mx3dShapeObject;
	/**
	 * 返回长度尺寸的第二形状对象。
	 * @returns 第二形状对象。
	 */
	SecondShape(): Mx3dShapeObject;
	/**
	 * 设置测量几何，基于指定的两点和平面。
	 * @param theFirstPoint 第一点。
	 * @param theSecondPoint 第二点。
	 * @param thePlane 测量的平面。
	 */
	SetMeasuredGeometry(theFirstPoint: Mx3dGePoint, theSecondPoint: Mx3dGePoint, thePlane: Mx3dGePlane): void;
	/**
	 * 设置测量几何，基于指定的形状。
	 * @param theFirstShape 第一形状对象。
	 * @param theSecondShape 第二形状对象。
	 */
	SetMeasuredShapes(theFirstShape: Mx3dShapeObject, theSecondShape: Mx3dShapeObject): void;
	/**
	 * 设置文本位置。
	 * @param theTextPos 文本位置。
	 */
	SetTextPosition(theTextPos: Mx3dGePoint): void;
	/**
	 * 获取文本位置。
	 * @returns 文本位置。
	 */
	GetTextPosition(): Mx3dGePoint;
	/**
	 * 设置自定义方向。
	 * @param theDirection 方向。
	 * @param theUseDirection 是否使用自定义方向。
	 */
	SetDirection(theDirection: Mx3dGeDir, theUseDirection: boolean): void;
	/**
	 * 获取尺寸值。
	 * @returns 尺寸值。
	 */
	GetValue(): number;
	/**
	 * 设置计算值。
	 */
	SetComputedValue(): void;
	/**
	 * 设置自定义值。
	 * @param theValue 自定义值。
	 */
	SetCustomValue(theValue: number): void;
	/**
	 * 获取测量平面。
	 * @returns 测量平面。
	 */
	GetPlane(): Mx3dGePlane;
	/**
	 * 获取几何类型。
	 * @returns 几何类型。
	 */
	GetGeometryType(): number;
	/**
	 * 设置自定义平面。
	 * @param thePlane 自定义平面。
	 */
	SetCustomPlane(thePlane: Mx3dGePlane): void;
	/**
	 * 取消自定义平面设置。
	 */
	UnsetCustomPlane(): void;
	/**
	 * 检查文本位置是否自定义。
	 * @returns 如果文本位置是自定义的，则返回 true；否则，返回 false。
	 */
	IsTextPositionCustom(): boolean;
	/**
	 * 设置尺寸外观。
	 * @param theDimensionAspect 尺寸外观。
	 */
	SetDimensionAspect(theDimensionAspect: Mx3dAspectDim): void;
	/**
	 * 获取尺寸类型。
	 * @returns 尺寸类型。
	 */
	KindOfDimension(): MdGe.MxKindOfDimension;
	/**
	 * 取消固定文本位置。
	 */
	UnsetFixedTextPosition(): void;
	/**
	 * 获取2D文本选择公差。
	 * @returns 2D文本选择公差。
	 */
	SelToleranceForText2d(): number;
	/**
	 * 设置2D文本选择公差。
	 * @param theTol 2D文本选择公差。
	 */
	SetSelToleranceForText2d(theTol: number): void;
	/**
	 * 获取尺寸线位置距离。
	 * @returns 尺寸线位置距离。
	 */
	GetFlyout(): number;
	/**
	 * 设置尺寸线位置距离。
	 * @param theFlyout 尺寸线位置距离。
	 */
	SetFlyout(theFlyout: number): void;
	/**
	 * 检查尺寸是否有效。
	 * @returns 如果尺寸有效，则返回 true；否则，返回 false。
	 */
	IsValid(): boolean;
}
/**
 * 表示插值B样条曲线算法。
 */
export declare class Mx3dInterpolateBSplineCurve extends Mx3dBaseObject {
	/**
	 * 构造函数，创建用于生成B样条曲线的对象。
	 * @param Points 插值点数组。
	 * @param PeriodicFlag 周期性标志。
	 * @param Tolerance 精度。
	 */
	constructor(Points: Mx3dGePoint[], PeriodicFlag: boolean, Tolerance: number);
	/**
	 * 构造函数，创建用于生成B样条曲线的对象。
	 * @param Points 插值点数组。
	 * @param Parameters 参数值数组。
	 * @param PeriodicFlag 周期性标志。
	 * @param Tolerance 精度。
	 */
	constructor(Points: Mx3dGePoint[], Parameters: number[], PeriodicFlag: boolean, Tolerance: number);
	/**
	 * 设置起点终点切向。
	 * @param InitialTangent 起点切向。
	 * @param FinalTangent 终点切向。
	 */
	LoadEnds(InitialTangent: UniVec, FinalTangent: UniVec): void;
	/**
	 * 设置所有插值点切向。
	 * @param Tangents 切向数组。
	 * @param TangentFlags 是否应用切向数组。
	 */
	Load(Tangents: Mx3dGeVec[], TangentFlags: boolean[]): void;
	/**
   * 执行算法。
   */
	Perform(): void;
	/**
	 * 获取插值算法生成的B样条曲线。
	 * @returns B样条曲线。
	 */
	Curve(): Mx3dGeomBSplineCurve;
	/**
	 * 判断算法是否执行成功。
	 * @returns 算法是否执行成功标志，true 成功， false 失败。
	 */
	IsDone(): boolean;
}

export {};
