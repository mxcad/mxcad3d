import{_ as t,c as a,o as r,a3 as o}from"./chunks/framework.C-dFTOTt.js";const u=JSON.parse('{"title":"Class: Mx3dMkPrism","description":"","frontmatter":{},"headers":[],"relativePath":"api_en/classes/Mx3dMkPrism.md","filePath":"api_en/classes/Mx3dMkPrism.md"}'),s={name:"api_en/classes/Mx3dMkPrism.md"};function d(l,e,i,h,n,c){return r(),a("div",null,[...e[0]||(e[0]=[o('<p>[mxcad_3d API Document](../README. md)/Mx3dMkRisk</p><h1 id="class-mx3dmkprism" tabindex="-1">Class: Mx3dMkPrism <a class="header-anchor" href="#class-mx3dmkprism" aria-label="Permalink to &quot;Class: Mx3dMkPrism&quot;">​</a></h1><p>The class that represents modeling stretched swept bodies inherits from Mx3dMkObject.</p><h2 id="hierarchy" tabindex="-1">Hierarchy <a class="header-anchor" href="#hierarchy" aria-label="Permalink to &quot;Hierarchy&quot;">​</a></h2><ul><li><p><a href="./Mx3dMkObject.html"><code>Mx3dMkObject</code></a></p><p>↳ <strong><code>Mx3dMkPrism</code></strong></p></li></ul><h2 id="table-of-contents" tabindex="-1">Table of contents <a class="header-anchor" href="#table-of-contents" aria-label="Permalink to &quot;Table of contents&quot;">​</a></h2><h3 id="constructors" tabindex="-1">Constructors <a class="header-anchor" href="#constructors" aria-label="Permalink to &quot;Constructors&quot;">​</a></h3><ul><li><a href="./Mx3dMkPrism.html#constructor">constructor</a></li></ul><h3 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;Methods&quot;">​</a></h3><ul><li><a href="./Mx3dMkPrism.html#build">Build</a></li><li><a href="./Mx3dMkPrism.html#isdone">IsDone</a></li><li><a href="./Mx3dMkPrism.html#shape">Shape</a></li></ul><h2 id="constructors-1" tabindex="-1">Constructors <a class="header-anchor" href="#constructors-1" aria-label="Permalink to &quot;Constructors&quot;">​</a></h2><h3 id="constructor" tabindex="-1">constructor <a class="header-anchor" href="#constructor" aria-label="Permalink to &quot;constructor&quot;">​</a></h3><p>• <strong>new Mx3dMkPrism</strong>(<code>S</code>, <code>V</code>)</p><p>Constructor that accepts a topological shape and a vector to create a stretched swept body.</p><h4 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;">S</td><td style="text-align:left;">[Mx3dShapeObject] (Mx3dShapeObject. md)</td><td style="text-align:left;">Topological shape object</td></tr><tr><td style="text-align:left;">V</td><td style="text-align:left;">[Mx3dGeVec] (Mx3dGeVec. md)</td><td style="text-align:left;">Stretch direction vector</td></tr></tbody></table><h4 id="overrides" tabindex="-1">Overrides <a class="header-anchor" href="#overrides" aria-label="Permalink to &quot;Overrides&quot;">​</a></h4><p>Mx3dMkObject.constructor</p><p>• <strong>new Mx3dMkPrism</strong>(<code>S</code>, <code>D</code>)</p><p>Constructor that accepts a topological shape and a direction to create a stretched swept body.</p><h4 id="parameters-1" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-1" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;">S</td><td style="text-align:left;">[Mx3dShapeObject] (Mx3dShapeObject. md)</td><td style="text-align:left;">Topological shape object</td></tr><tr><td style="text-align:left;">D</td><td style="text-align:left;">[Mx3dGeDir] (Mx3dGeDir. md)</td><td style="text-align:left;">Stretching direction</td></tr></tbody></table><h4 id="overrides-1" tabindex="-1">Overrides <a class="header-anchor" href="#overrides-1" aria-label="Permalink to &quot;Overrides&quot;">​</a></h4><p>Mx3dMkObject.constructor</p><h2 id="methods-1" tabindex="-1">Methods <a class="header-anchor" href="#methods-1" aria-label="Permalink to &quot;Methods&quot;">​</a></h2><h3 id="build" tabindex="-1">Build <a class="header-anchor" href="#build" aria-label="Permalink to &quot;Build&quot;">​</a></h3><p>▸ <strong>Build</strong>(): <code>void</code></p><p>Execute modeling algorithm for stretching swept bodies.</p><h4 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>void</code></p><hr><h3 id="isdone" tabindex="-1">IsDone <a class="header-anchor" href="#isdone" aria-label="Permalink to &quot;IsDone&quot;">​</a></h3><p>▸ <strong>IsDone</strong>(): <code>boolean</code></p><p>Check if the modeling algorithm has been executed successfully.</p><h4 id="returns-1" tabindex="-1">Returns <a class="header-anchor" href="#returns-1" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>boolean</code></p><p>The flag indicating whether the modeling algorithm execution has been completed, with true indicating completion and false indicating failure.</p><hr><h3 id="shape" tabindex="-1">Shape <a class="header-anchor" href="#shape" aria-label="Permalink to &quot;Shape&quot;">​</a></h3><p>▸ <strong>Shape</strong>(): <a href="./Mx3dShapeObject.html"><code>Mx3dShapeObject</code></a></p><p>Obtain the shape of the stretched swept body.</p><h4 id="returns-2" tabindex="-1">Returns <a class="header-anchor" href="#returns-2" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./Mx3dShapeObject.html"><code>Mx3dShapeObject</code></a></p><p>Stretch the shape object of the swept body.</p>',44)])])}const m=t(s,[["render",d]]);export{u as __pageData,m as default};
