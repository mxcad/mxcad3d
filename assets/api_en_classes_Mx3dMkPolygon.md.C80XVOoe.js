import{_ as a,c as t,o as r,a3 as o}from"./chunks/framework.C-dFTOTt.js";const u=JSON.parse('{"title":"Class: Mx3dMkPolygon","description":"","frontmatter":{},"headers":[],"relativePath":"api_en/classes/Mx3dMkPolygon.md","filePath":"api_en/classes/Mx3dMkPolygon.md"}'),d={name:"api_en/classes/Mx3dMkPolygon.md"};function l(h,e,n,s,i,c){return r(),t("div",null,[...e[0]||(e[0]=[o('<p>[mxcad_3d API Document](../README. md)/Mx3dMkPolygon</p><h1 id="class-mx3dmkpolygon" tabindex="-1">Class: Mx3dMkPolygon <a class="header-anchor" href="#class-mx3dmkpolygon" aria-label="Permalink to &quot;Class: Mx3dMkPolygon&quot;">​</a></h1><p>The class that represents modeling polylines inherits from Mx3dMkObject.</p><h2 id="hierarchy" tabindex="-1">Hierarchy <a class="header-anchor" href="#hierarchy" aria-label="Permalink to &quot;Hierarchy&quot;">​</a></h2><ul><li><p><a href="./Mx3dMkObject.html"><code>Mx3dMkObject</code></a></p><p>↳ <strong><code>Mx3dMkPolygon</code></strong></p></li></ul><h2 id="table-of-contents" tabindex="-1">Table of contents <a class="header-anchor" href="#table-of-contents" aria-label="Permalink to &quot;Table of contents&quot;">​</a></h2><h3 id="constructors" tabindex="-1">Constructors <a class="header-anchor" href="#constructors" aria-label="Permalink to &quot;Constructors&quot;">​</a></h3><ul><li><a href="./Mx3dMkPolygon.html#constructor">constructor</a></li></ul><h3 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;Methods&quot;">​</a></h3><ul><li><a href="./Mx3dMkPolygon.html#add">Add</a></li><li><a href="./Mx3dMkPolygon.html#added">Added</a></li><li><a href="./Mx3dMkPolygon.html#build">Build</a></li><li><a href="./Mx3dMkPolygon.html#close">Close</a></li><li><a href="./Mx3dMkPolygon.html#edge">Edge</a></li><li><a href="./Mx3dMkPolygon.html#firstvertex">FirstVertex</a></li><li><a href="./Mx3dMkPolygon.html#isdone">IsDone</a></li><li><a href="./Mx3dMkPolygon.html#lastvertex">LastVertex</a></li><li><a href="./Mx3dMkPolygon.html#shape">Shape</a></li><li><a href="./Mx3dMkPolygon.html#wire">Wire</a></li></ul><h2 id="constructors-1" tabindex="-1">Constructors <a class="header-anchor" href="#constructors-1" aria-label="Permalink to &quot;Constructors&quot;">​</a></h2><h3 id="constructor" tabindex="-1">constructor <a class="header-anchor" href="#constructor" aria-label="Permalink to &quot;constructor&quot;">​</a></h3><p>• <strong>new Mx3dMkPolygon</strong>()</p><p>Constructor, initialize polyline object.</p><h4 id="overrides" tabindex="-1">Overrides <a class="header-anchor" href="#overrides" aria-label="Permalink to &quot;Overrides&quot;">​</a></h4><p>Mx3dMkObject.constructor</p><h2 id="methods-1" tabindex="-1">Methods <a class="header-anchor" href="#methods-1" aria-label="Permalink to &quot;Methods&quot;">​</a></h2><h3 id="add" tabindex="-1">Add <a class="header-anchor" href="#add" aria-label="Permalink to &quot;Add&quot;">​</a></h3><p>▸ <strong>Add</strong>(<code>P</code>): <code>void</code></p><p>Add a vertex to a polyline.</p><h4 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;">P</td><td style="text-align:left;">[Mx3dGePoint] (Mx3dGePoint. md)</td><td style="text-align:left;">Point object to be added</td></tr></tbody></table><h4 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>void</code></p><hr><h3 id="added" tabindex="-1">Added <a class="header-anchor" href="#added" aria-label="Permalink to &quot;Added&quot;">​</a></h3><p>▸ <strong>Added</strong>(): <code>boolean</code></p><p>Check if the last added vertex coincides with the previous vertex.</p><h4 id="returns-1" tabindex="-1">Returns <a class="header-anchor" href="#returns-1" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>boolean</code></p><p>If the last added vertex does not coincide with the previous vertex, return true; Otherwise, return false.</p><hr><h3 id="build" tabindex="-1">Build <a class="header-anchor" href="#build" aria-label="Permalink to &quot;Build&quot;">​</a></h3><p>▸ <strong>Build</strong>(): <code>void</code></p><p>Execute modeling algorithms for polylines.</p><h4 id="returns-2" tabindex="-1">Returns <a class="header-anchor" href="#returns-2" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>void</code></p><hr><h3 id="close" tabindex="-1">Close <a class="header-anchor" href="#close" aria-label="Permalink to &quot;Close&quot;">​</a></h3><p>▸ <strong>Close</strong>(): <code>void</code></p><p>Close polylines to form a closed shape.</p><h4 id="returns-3" tabindex="-1">Returns <a class="header-anchor" href="#returns-3" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>void</code></p><hr><h3 id="edge" tabindex="-1">Edge <a class="header-anchor" href="#edge" aria-label="Permalink to &quot;Edge&quot;">​</a></h3><p>▸ <strong>Edge</strong>(): <a href="./Mx3dShapeEdge.html"><code>Mx3dShapeEdge</code></a></p><p>Retrieve the Edge object of polylines.</p><h4 id="returns-4" tabindex="-1">Returns <a class="header-anchor" href="#returns-4" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./Mx3dShapeEdge.html"><code>Mx3dShapeEdge</code></a></p><p>Edge object for polylines.</p><hr><h3 id="firstvertex" tabindex="-1">FirstVertex <a class="header-anchor" href="#firstvertex" aria-label="Permalink to &quot;FirstVertex&quot;">​</a></h3><p>▸ <strong>FirstVertex</strong>(): <a href="./Mx3dShapeVertex.html"><code>Mx3dShapeVertex</code></a></p><p>Get the first vertex of the polyline.</p><h4 id="returns-5" tabindex="-1">Returns <a class="header-anchor" href="#returns-5" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./Mx3dShapeVertex.html"><code>Mx3dShapeVertex</code></a></p><p>The first vertex object.</p><hr><h3 id="isdone" tabindex="-1">IsDone <a class="header-anchor" href="#isdone" aria-label="Permalink to &quot;IsDone&quot;">​</a></h3><p>▸ <strong>IsDone</strong>(): <code>boolean</code></p><p>Check if the modeling algorithm has been executed successfully.</p><h4 id="returns-6" tabindex="-1">Returns <a class="header-anchor" href="#returns-6" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>boolean</code></p><p>The flag indicating whether the modeling algorithm execution has been completed, with true indicating completion and false indicating failure.</p><hr><h3 id="lastvertex" tabindex="-1">LastVertex <a class="header-anchor" href="#lastvertex" aria-label="Permalink to &quot;LastVertex&quot;">​</a></h3><p>▸ <strong>LastVertex</strong>(): <a href="./Mx3dShapeVertex.html"><code>Mx3dShapeVertex</code></a></p><p>Get the last vertex of the polyline.</p><h4 id="returns-7" tabindex="-1">Returns <a class="header-anchor" href="#returns-7" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./Mx3dShapeVertex.html"><code>Mx3dShapeVertex</code></a></p><p>The last vertex object.</p><hr><h3 id="shape" tabindex="-1">Shape <a class="header-anchor" href="#shape" aria-label="Permalink to &quot;Shape&quot;">​</a></h3><p>▸ <strong>Shape</strong>(): <a href="./Mx3dShapeObject.html"><code>Mx3dShapeObject</code></a></p><p>Obtain the shape of polylines.</p><h4 id="returns-8" tabindex="-1">Returns <a class="header-anchor" href="#returns-8" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./Mx3dShapeObject.html"><code>Mx3dShapeObject</code></a></p><p>The shape object of polylines.</p><hr><h3 id="wire" tabindex="-1">Wire <a class="header-anchor" href="#wire" aria-label="Permalink to &quot;Wire&quot;">​</a></h3><p>▸ <strong>Wire</strong>(): <a href="./Mx3dShapeWire.html"><code>Mx3dShapeWire</code></a></p><p>Retrieve the Wire object of a polyline.</p><h4 id="returns-9" tabindex="-1">Returns <a class="header-anchor" href="#returns-9" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./Mx3dShapeWire.html"><code>Mx3dShapeWire</code></a></p><p>Wire object for polylines.</p>',85)])])}const x=a(d,[["render",l]]);export{u as __pageData,x as default};
